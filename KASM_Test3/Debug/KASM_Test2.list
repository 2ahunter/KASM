
KASM_Test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c50  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008ee8  08008ee8  00018ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000002c  24000000  080090d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002388  24000030  08009104  00020030  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240023b8  08009104  000223b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015072  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002275  00000000  00000000  0003510f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012d0  00000000  00000000  00037388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ebf  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000380f9  00000000  00000000  00039517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014dfc  00000000  00000000  00071610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173737  00000000  00000000  0008640c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000052f4  00000000  00000000  001f9b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  001fee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000030 	.word	0x24000030
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008ed0 	.word	0x08008ed0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000034 	.word	0x24000034
 80002d4:	08008ed0 	.word	0x08008ed0

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002dc:	f001 fce6 	bl	8001cac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f002 fa9e 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f9d4 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f001 f998 	bl	800161c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ec:	f000 fc4e 	bl	8000b8c <MX_TIM1_Init>
  MX_TIM2_Init();
 80002f0:	f000 fd1c 	bl	8000d2c <MX_TIM2_Init>
  MX_TIM4_Init();
 80002f4:	f000 fd90 	bl	8000e18 <MX_TIM4_Init>
  MX_TIM5_Init();
 80002f8:	f000 fe26 	bl	8000f48 <MX_TIM5_Init>
  MX_TIM8_Init();
 80002fc:	f000 fea6 	bl	800104c <MX_TIM8_Init>
  MX_TIM12_Init();
 8000300:	f000 ff4e 	bl	80011a0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000304:	f000 ffc4 	bl	8001290 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000308:	f001 f810 	bl	800132c <MX_TIM14_Init>
  MX_TIM15_Init();
 800030c:	f001 f85c 	bl	80013c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000310:	f001 f90a 	bl	8001528 <MX_TIM16_Init>
  MX_HRTIM_Init();
 8000314:	f000 fa6a 	bl	80007ec <MX_HRTIM_Init>
  MX_LPTIM1_Init();
 8000318:	f000 fc0a 	bl	8000b30 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */


  //Timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 800031c:	48c8      	ldr	r0, [pc, #800]	; (8000640 <main+0x368>)
 800031e:	f006 fd2f 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);    //Starts the PWM on each of the desired channels
 8000322:	2100      	movs	r1, #0
 8000324:	48c6      	ldr	r0, [pc, #792]	; (8000640 <main+0x368>)
 8000326:	f006 fe05 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800032a:	2104      	movs	r1, #4
 800032c:	48c4      	ldr	r0, [pc, #784]	; (8000640 <main+0x368>)
 800032e:	f006 fe01 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000332:	2108      	movs	r1, #8
 8000334:	48c2      	ldr	r0, [pc, #776]	; (8000640 <main+0x368>)
 8000336:	f006 fdfd 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800033a:	210c      	movs	r1, #12
 800033c:	48c0      	ldr	r0, [pc, #768]	; (8000640 <main+0x368>)
 800033e:	f006 fdf9 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, GPIO_PIN_SET);   //Sets the pin to 1
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	48bf      	ldr	r0, [pc, #764]	; (8000644 <main+0x36c>)
 8000348:	f002 fe40 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, GPIO_PIN_SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	48bc      	ldr	r0, [pc, #752]	; (8000644 <main+0x36c>)
 8000352:	f002 fe3b 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	2104      	movs	r1, #4
 800035a:	48ba      	ldr	r0, [pc, #744]	; (8000644 <main+0x36c>)
 800035c:	f002 fe36 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2108      	movs	r1, #8
 8000364:	48b7      	ldr	r0, [pc, #732]	; (8000644 <main+0x36c>)
 8000366:	f002 fe31 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 1

  //Timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 800036a:	48b7      	ldr	r0, [pc, #732]	; (8000648 <main+0x370>)
 800036c:	f006 fd08 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000370:	2100      	movs	r1, #0
 8000372:	48b5      	ldr	r0, [pc, #724]	; (8000648 <main+0x370>)
 8000374:	f006 fdde 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2110      	movs	r1, #16
 800037c:	48b1      	ldr	r0, [pc, #708]	; (8000644 <main+0x36c>)
 800037e:	f002 fe25 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 2


  //Timer 4
  HAL_TIM_Base_Start_IT(&htim4);
 8000382:	48b2      	ldr	r0, [pc, #712]	; (800064c <main+0x374>)
 8000384:	f006 fcfc 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000388:	2100      	movs	r1, #0
 800038a:	48b0      	ldr	r0, [pc, #704]	; (800064c <main+0x374>)
 800038c:	f006 fdd2 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000390:	2104      	movs	r1, #4
 8000392:	48ae      	ldr	r0, [pc, #696]	; (800064c <main+0x374>)
 8000394:	f006 fdce 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000398:	2108      	movs	r1, #8
 800039a:	48ac      	ldr	r0, [pc, #688]	; (800064c <main+0x374>)
 800039c:	f006 fdca 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80003a0:	210c      	movs	r1, #12
 80003a2:	48aa      	ldr	r0, [pc, #680]	; (800064c <main+0x374>)
 80003a4:	f006 fdc6 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ae:	48a8      	ldr	r0, [pc, #672]	; (8000650 <main+0x378>)
 80003b0:	f002 fe0c 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ba:	48a5      	ldr	r0, [pc, #660]	; (8000650 <main+0x378>)
 80003bc:	f002 fe06 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c6:	48a3      	ldr	r0, [pc, #652]	; (8000654 <main+0x37c>)
 80003c8:	f002 fe00 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	48a0      	ldr	r0, [pc, #640]	; (8000654 <main+0x37c>)
 80003d4:	f002 fdfa 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 4


  //Timer 5
  HAL_TIM_Base_Start_IT(&htim5);
 80003d8:	489f      	ldr	r0, [pc, #636]	; (8000658 <main+0x380>)
 80003da:	f006 fcd1 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80003de:	2104      	movs	r1, #4
 80003e0:	489d      	ldr	r0, [pc, #628]	; (8000658 <main+0x380>)
 80003e2:	f006 fda7 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80003e6:	2108      	movs	r1, #8
 80003e8:	489b      	ldr	r0, [pc, #620]	; (8000658 <main+0x380>)
 80003ea:	f006 fda3 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003f4:	4897      	ldr	r0, [pc, #604]	; (8000654 <main+0x37c>)
 80003f6:	f002 fde9 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000400:	4894      	ldr	r0, [pc, #592]	; (8000654 <main+0x37c>)
 8000402:	f002 fde3 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 5


  //Timer 8
  HAL_TIM_Base_Start_IT(&htim8);
 8000406:	4895      	ldr	r0, [pc, #596]	; (800065c <main+0x384>)
 8000408:	f006 fcba 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800040c:	210c      	movs	r1, #12
 800040e:	4893      	ldr	r0, [pc, #588]	; (800065c <main+0x384>)
 8000410:	f006 fd90 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2180      	movs	r1, #128	; 0x80
 8000418:	488a      	ldr	r0, [pc, #552]	; (8000644 <main+0x36c>)
 800041a:	f002 fdd7 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 8


  //Timer 12
  HAL_TIM_Base_Start_IT(&htim12);
 800041e:	4890      	ldr	r0, [pc, #576]	; (8000660 <main+0x388>)
 8000420:	f006 fcae 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000424:	2104      	movs	r1, #4
 8000426:	488e      	ldr	r0, [pc, #568]	; (8000660 <main+0x388>)
 8000428:	f006 fd84 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4884      	ldr	r0, [pc, #528]	; (8000644 <main+0x36c>)
 8000434:	f002 fdca 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 12


  //Timer 13
  HAL_TIM_Base_Start_IT(&htim13);
 8000438:	488a      	ldr	r0, [pc, #552]	; (8000664 <main+0x38c>)
 800043a:	f006 fca1 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800043e:	2100      	movs	r1, #0
 8000440:	4888      	ldr	r0, [pc, #544]	; (8000664 <main+0x38c>)
 8000442:	f006 fd77 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044c:	487d      	ldr	r0, [pc, #500]	; (8000644 <main+0x36c>)
 800044e:	f002 fdbd 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 13


  //Timer 14
  HAL_TIM_Base_Start_IT(&htim14);
 8000452:	4885      	ldr	r0, [pc, #532]	; (8000668 <main+0x390>)
 8000454:	f006 fc94 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000458:	2100      	movs	r1, #0
 800045a:	4883      	ldr	r0, [pc, #524]	; (8000668 <main+0x390>)
 800045c:	f006 fd6a 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000466:	4877      	ldr	r0, [pc, #476]	; (8000644 <main+0x36c>)
 8000468:	f002 fdb0 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 14


  //Timer 15
  HAL_TIM_Base_Start_IT(&htim15);
 800046c:	487f      	ldr	r0, [pc, #508]	; (800066c <main+0x394>)
 800046e:	f006 fc87 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000472:	2100      	movs	r1, #0
 8000474:	487d      	ldr	r0, [pc, #500]	; (800066c <main+0x394>)
 8000476:	f006 fd5d 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800047a:	2104      	movs	r1, #4
 800047c:	487b      	ldr	r0, [pc, #492]	; (800066c <main+0x394>)
 800047e:	f006 fd59 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, GPIO_PIN_SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000488:	486e      	ldr	r0, [pc, #440]	; (8000644 <main+0x36c>)
 800048a:	f002 fd9f 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	4877      	ldr	r0, [pc, #476]	; (8000670 <main+0x398>)
 8000494:	f002 fd9a 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 15


  //Timer 16
  HAL_TIM_Base_Start_IT(&htim16);
 8000498:	4876      	ldr	r0, [pc, #472]	; (8000674 <main+0x39c>)
 800049a:	f006 fc71 	bl	8006d80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	4874      	ldr	r0, [pc, #464]	; (8000674 <main+0x39c>)
 80004a2:	f006 fd47 	bl	8006f34 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2102      	movs	r1, #2
 80004aa:	4871      	ldr	r0, [pc, #452]	; (8000670 <main+0x398>)
 80004ac:	f002 fd8e 	bl	8002fcc <HAL_GPIO_WritePin>
  //End Timer 16


  //High Resolution timer CHA
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_A);
 80004b0:	2100      	movs	r1, #0
 80004b2:	4871      	ldr	r0, [pc, #452]	; (8000678 <main+0x3a0>)
 80004b4:	f002 fe9c 	bl	80031f0 <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2100      	movs	r1, #0
 80004bc:	486e      	ldr	r0, [pc, #440]	; (8000678 <main+0x3a0>)
 80004be:	f002 fee3 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2);
 80004c2:	2202      	movs	r2, #2
 80004c4:	2100      	movs	r1, #0
 80004c6:	486c      	ldr	r0, [pc, #432]	; (8000678 <main+0x3a0>)
 80004c8:	f002 fede 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	4867      	ldr	r0, [pc, #412]	; (8000670 <main+0x398>)
 80004d2:	f002 fd7b 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	4865      	ldr	r0, [pc, #404]	; (8000670 <main+0x398>)
 80004dc:	f002 fd76 	bl	8002fcc <HAL_GPIO_WritePin>

	  //Set CHA1 high on the start of the period and low on the compare 1 event
	  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].SETx1R = HRTIM_SET1R_PER;
 80004e0:	4b66      	ldr	r3, [pc, #408]	; (800067c <main+0x3a4>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	  HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].RSTx1R = HRTIM_RST1R_CMP1;
 80004e8:	4b64      	ldr	r3, [pc, #400]	; (800067c <main+0x3a4>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	   //Set CHA2 high on the start of the period and low on the compare 1 event
	   HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].SETx2R = HRTIM_SET2R_PER;
 80004f0:	4b62      	ldr	r3, [pc, #392]	; (800067c <main+0x3a4>)
 80004f2:	2204      	movs	r2, #4
 80004f4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	   HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].RSTx2R = HRTIM_RST2R_CMP2;
 80004f8:	4b60      	ldr	r3, [pc, #384]	; (800067c <main+0x3a4>)
 80004fa:	2210      	movs	r2, #16
 80004fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  //End HRTIM CHA


  //High Resolution timer CHB
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_B);
 8000500:	2101      	movs	r1, #1
 8000502:	485d      	ldr	r0, [pc, #372]	; (8000678 <main+0x3a0>)
 8000504:	f002 fe74 	bl	80031f0 <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1);
 8000508:	2204      	movs	r2, #4
 800050a:	2101      	movs	r1, #1
 800050c:	485a      	ldr	r0, [pc, #360]	; (8000678 <main+0x3a0>)
 800050e:	f002 febb 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2);
 8000512:	2208      	movs	r2, #8
 8000514:	2101      	movs	r1, #1
 8000516:	4858      	ldr	r0, [pc, #352]	; (8000678 <main+0x3a0>)
 8000518:	f002 feb6 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	4853      	ldr	r0, [pc, #332]	; (8000670 <main+0x398>)
 8000522:	f002 fd53 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	4851      	ldr	r0, [pc, #324]	; (8000670 <main+0x398>)
 800052c:	f002 fd4e 	bl	8002fcc <HAL_GPIO_WritePin>

  	  	//Set CHB1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx1R = HRTIM_SET1R_PER;
 8000530:	4b52      	ldr	r3, [pc, #328]	; (800067c <main+0x3a4>)
 8000532:	2204      	movs	r2, #4
 8000534:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx1R = HRTIM_RST1R_CMP1;
 8000538:	4b50      	ldr	r3, [pc, #320]	; (800067c <main+0x3a4>)
 800053a:	2208      	movs	r2, #8
 800053c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  		//Set CHB2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].SETx2R = HRTIM_SET2R_PER;
 8000540:	4b4e      	ldr	r3, [pc, #312]	; (800067c <main+0x3a4>)
 8000542:	2204      	movs	r2, #4
 8000544:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].RSTx2R = HRTIM_RST2R_CMP2;
 8000548:	4b4c      	ldr	r3, [pc, #304]	; (800067c <main+0x3a4>)
 800054a:	2210      	movs	r2, #16
 800054c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  //End HRTIM CHB


  //High Resolution timer CHC
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_C);
 8000550:	2102      	movs	r1, #2
 8000552:	4849      	ldr	r0, [pc, #292]	; (8000678 <main+0x3a0>)
 8000554:	f002 fe4c 	bl	80031f0 <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1);
 8000558:	2210      	movs	r2, #16
 800055a:	2102      	movs	r1, #2
 800055c:	4846      	ldr	r0, [pc, #280]	; (8000678 <main+0x3a0>)
 800055e:	f002 fe93 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2);
 8000562:	2220      	movs	r2, #32
 8000564:	2102      	movs	r1, #2
 8000566:	4844      	ldr	r0, [pc, #272]	; (8000678 <main+0x3a0>)
 8000568:	f002 fe8e 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000572:	483f      	ldr	r0, [pc, #252]	; (8000670 <main+0x398>)
 8000574:	f002 fd2a 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057e:	483c      	ldr	r0, [pc, #240]	; (8000670 <main+0x398>)
 8000580:	f002 fd24 	bl	8002fcc <HAL_GPIO_WritePin>

  	  	//Set CHC1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx1R = HRTIM_SET1R_PER;
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <main+0x3a4>)
 8000586:	2204      	movs	r2, #4
 8000588:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx1R = HRTIM_RST1R_CMP1;
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <main+0x3a4>)
 800058e:	2208      	movs	r2, #8
 8000590:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

  		//Set CHC2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].SETx2R = HRTIM_SET2R_PER;
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <main+0x3a4>)
 8000596:	2204      	movs	r2, #4
 8000598:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].RSTx2R = HRTIM_RST2R_CMP2;
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <main+0x3a4>)
 800059e:	2210      	movs	r2, #16
 80005a0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  //End HRTIM CHC


  //High Resolution timer CHD
  HAL_HRTIM_SimpleBaseStart_IT(&hhrtim, HRTIM_TIMERINDEX_TIMER_D);
 80005a4:	2103      	movs	r1, #3
 80005a6:	4834      	ldr	r0, [pc, #208]	; (8000678 <main+0x3a0>)
 80005a8:	f002 fe22 	bl	80031f0 <HAL_HRTIM_SimpleBaseStart_IT>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1);
 80005ac:	2240      	movs	r2, #64	; 0x40
 80005ae:	2103      	movs	r1, #3
 80005b0:	4831      	ldr	r0, [pc, #196]	; (8000678 <main+0x3a0>)
 80005b2:	f002 fe69 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_HRTIM_SimplePWMStart(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2);
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	2103      	movs	r1, #3
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <main+0x3a0>)
 80005bc:	f002 fe64 	bl	8003288 <HAL_HRTIM_SimplePWMStart>
  HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	482a      	ldr	r0, [pc, #168]	; (8000670 <main+0x398>)
 80005c8:	f002 fd00 	bl	8002fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	4827      	ldr	r0, [pc, #156]	; (8000670 <main+0x398>)
 80005d4:	f002 fcfa 	bl	8002fcc <HAL_GPIO_WritePin>

  	  	//Set CHD1 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx1R = HRTIM_SET1R_PER;
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <main+0x3a4>)
 80005da:	2204      	movs	r2, #4
 80005dc:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx1R = HRTIM_RST1R_CMP1;
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <main+0x3a4>)
 80005e2:	2208      	movs	r2, #8
 80005e4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240

  		//Set CHD2 high on the start of the period and low on the compare 1 event
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].SETx2R = HRTIM_SET2R_PER;
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <main+0x3a4>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].RSTx2R = HRTIM_RST2R_CMP2;
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <main+0x3a4>)
 80005f2:	2210      	movs	r2, #16
 80005f4:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  //End HRTIM CHD


  //Low-Power Timer
  HAL_LPTIM_Counter_Start_IT(&hlptim1, LPTIM_ARR_ARR);
 80005f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005fc:	4820      	ldr	r0, [pc, #128]	; (8000680 <main+0x3a8>)
 80005fe:	f003 fcdc 	bl	8003fba <HAL_LPTIM_Counter_Start_IT>
  HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_ARR_ARR, LPTIM_CMP_CMP);
 8000602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000606:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800060a:	481d      	ldr	r0, [pc, #116]	; (8000680 <main+0x3a8>)
 800060c:	f003 fc88 	bl	8003f20 <HAL_LPTIM_PWM_Start>
  HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0x398>)
 8000616:	f002 fcd9 	bl	8002fcc <HAL_GPIO_WritePin>
  	  LPTIM1->ARR = (12000-1);
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <main+0x3ac>)
 800061c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000620:	619a      	str	r2, [r3, #24]

  //End Low Power Timer


  gen_sine();
 8000622:	f001 fb0d 	bl	8001c40 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0x3b0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1fb      	bne.n	8000626 <main+0x34e>
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <main+0x3b4>)
 8000630:	ed93 7b00 	vldr	d7, [r3]
 8000634:	eeb0 0b47 	vmov.f64	d0, d7
 8000638:	f001 f90e 	bl	8001858 <control_update>
 800063c:	e7f3      	b.n	8000626 <main+0x34e>
 800063e:	bf00      	nop
 8000640:	24000160 	.word	0x24000160
 8000644:	58021000 	.word	0x58021000
 8000648:	240001ac 	.word	0x240001ac
 800064c:	240001f8 	.word	0x240001f8
 8000650:	58020400 	.word	0x58020400
 8000654:	58020800 	.word	0x58020800
 8000658:	24000244 	.word	0x24000244
 800065c:	24000290 	.word	0x24000290
 8000660:	240002dc 	.word	0x240002dc
 8000664:	24000328 	.word	0x24000328
 8000668:	24000374 	.word	0x24000374
 800066c:	240003c0 	.word	0x240003c0
 8000670:	58020c00 	.word	0x58020c00
 8000674:	2400040c 	.word	0x2400040c
 8000678:	2400004c 	.word	0x2400004c
 800067c:	40017400 	.word	0x40017400
 8000680:	24000128 	.word	0x24000128
 8000684:	40002400 	.word	0x40002400
 8000688:	24000458 	.word	0x24000458
 800068c:	24000460 	.word	0x24000460

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069a:	224c      	movs	r2, #76	; 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fdfc 	bl	800829c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2220      	movs	r2, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fdf5 	bl	800829c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b2:	2002      	movs	r0, #2
 80006b4:	f003 ffda 	bl	800466c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <SystemClock_Config+0x150>)
 80006be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c0:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <SystemClock_Config+0x150>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <SystemClock_Config+0x150>)
 80006ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <SystemClock_Config+0x154>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a43      	ldr	r2, [pc, #268]	; (80007e4 <SystemClock_Config+0x154>)
 80006d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <SystemClock_Config+0x154>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ea:	bf00      	nop
 80006ec:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <SystemClock_Config+0x154>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f8:	d1f8      	bne.n	80006ec <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <SystemClock_Config+0x158>)
 80006fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000700:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <SystemClock_Config+0x158>)
 8000702:	f043 0302 	orr.w	r3, r3, #2
 8000706:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800070a:	4b37      	ldr	r3, [pc, #220]	; (80007e8 <SystemClock_Config+0x158>)
 800070c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <SystemClock_Config+0x154>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <SystemClock_Config+0x154>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <SystemClock_Config+0x154>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <SystemClock_Config+0x150>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <SystemClock_Config+0x150>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073e:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0x150>)
 8000740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074a:	bf00      	nop
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0x154>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000758:	d1f8      	bne.n	800074c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075a:	2301      	movs	r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000768:	2302      	movs	r3, #2
 800076a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000770:	2350      	movs	r3, #80	; 0x50
 8000772:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000780:	230c      	movs	r3, #12
 8000782:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000784:	2300      	movs	r3, #0
 8000786:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000790:	4618      	mov	r0, r3
 8000792:	f003 ffa5 	bl	80046e0 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800079c:	f001 fab2 	bl	8001d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	233f      	movs	r3, #63	; 0x3f
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2303      	movs	r3, #3
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ac:	2308      	movs	r3, #8
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b0:	2340      	movs	r3, #64	; 0x40
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2104      	movs	r1, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fbe3 	bl	8004f94 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80007d4:	f001 fa96 	bl	8001d04 <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3778      	adds	r7, #120	; 0x78
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	58000400 	.word	0x58000400
 80007e4:	58024800 	.word	0x58024800
 80007e8:	58024400 	.word	0x58024400

080007ec <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a4      	sub	sp, #144	; 0x90
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80007f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000804:	2254      	movs	r2, #84	; 0x54
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fd47 	bl	800829c <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fd3b 	bl	800829c <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000826:	4bc0      	ldr	r3, [pc, #768]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000828:	4ac0      	ldr	r2, [pc, #768]	; (8000b2c <MX_HRTIM_Init+0x340>)
 800082a:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800082c:	4bbe      	ldr	r3, [pc, #760]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000832:	4bbd      	ldr	r3, [pc, #756]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000838:	48bb      	ldr	r0, [pc, #748]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 800083a:	f002 fbe1 	bl	8003000 <HAL_HRTIM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8000844:	f001 fa5e 	bl	8001d04 <Error_Handler>
  }
  pTimeBaseCfg.Period = 24000-1;
 8000848:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 800084c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000850:	2300      	movs	r3, #0
 8000852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000856:	2305      	movs	r3, #5
 8000858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800085c:	2308      	movs	r3, #8
 800085e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000862:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000866:	461a      	mov	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	48af      	ldr	r0, [pc, #700]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 800086c:	f002 fc98 	bl	80031a0 <HAL_HRTIM_TimeBaseConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8000876:	f001 fa45 	bl	8001d04 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8000886:	2300      	movs	r3, #0
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 800088a:	2301      	movs	r3, #1
 800088c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800088e:	2300      	movs	r3, #0
 8000890:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000892:	2300      	movs	r3, #0
 8000894:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000896:	2300      	movs	r3, #0
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800089e:	2300      	movs	r3, #0
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80008aa:	2300      	movs	r3, #0
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 80008be:	2300      	movs	r3, #0
 80008c0:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80008ca:	2300      	movs	r3, #0
 80008cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80008ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d2:	461a      	mov	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	4894      	ldr	r0, [pc, #592]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 80008d8:	f002 fd12 	bl	8003300 <HAL_HRTIM_WaveformTimerConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 80008e2:	f001 fa0f 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80008e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ea:	461a      	mov	r2, r3
 80008ec:	2101      	movs	r1, #1
 80008ee:	488e      	ldr	r0, [pc, #568]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 80008f0:	f002 fd06 	bl	8003300 <HAL_HRTIM_WaveformTimerConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_HRTIM_Init+0x112>
  {
    Error_Handler();
 80008fa:	f001 fa03 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80008fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000902:	461a      	mov	r2, r3
 8000904:	2102      	movs	r1, #2
 8000906:	4888      	ldr	r0, [pc, #544]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000908:	f002 fcfa 	bl	8003300 <HAL_HRTIM_WaveformTimerConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_HRTIM_Init+0x12a>
  {
    Error_Handler();
 8000912:	f001 f9f7 	bl	8001d04 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000916:	2300      	movs	r3, #0
 8000918:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 800091a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091e:	461a      	mov	r2, r3
 8000920:	2103      	movs	r1, #3
 8000922:	4881      	ldr	r0, [pc, #516]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000924:	f002 fcec 	bl	8003300 <HAL_HRTIM_WaveformTimerConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_HRTIM_Init+0x146>
  {
    Error_Handler();
 800092e:	f001 f9e9 	bl	8001d04 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0x00005A00/2;
 8000932:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8000936:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	2201      	movs	r2, #1
 800093e:	2100      	movs	r1, #0
 8000940:	4879      	ldr	r0, [pc, #484]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000942:	f002 fd4f 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_HRTIM_Init+0x164>
  {
    Error_Handler();
 800094c:	f001 f9da 	bl	8001d04 <Error_Handler>
  }
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	2202      	movs	r2, #2
 800095e:	2100      	movs	r1, #0
 8000960:	4871      	ldr	r0, [pc, #452]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000962:	f002 fd3f 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_HRTIM_Init+0x184>
  {
    Error_Handler();
 800096c:	f001 f9ca 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	2202      	movs	r2, #2
 8000976:	2101      	movs	r1, #1
 8000978:	486b      	ldr	r0, [pc, #428]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 800097a:	f002 fd33 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_HRTIM_Init+0x19c>
  {
    Error_Handler();
 8000984:	f001 f9be 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	2202      	movs	r2, #2
 800098e:	2102      	movs	r1, #2
 8000990:	4865      	ldr	r0, [pc, #404]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000992:	f002 fd27 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_HRTIM_Init+0x1b4>
  {
    Error_Handler();
 800099c:	f001 f9b2 	bl	8001d04 <Error_Handler>
  }

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	2202      	movs	r2, #2
 80009a6:	2103      	movs	r1, #3
 80009a8:	485f      	ldr	r0, [pc, #380]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 80009aa:	f002 fd1b 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_HRTIM_Init+0x1cc>
  {
    Error_Handler();
 80009b4:	f001 f9a6 	bl	8001d04 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2201      	movs	r2, #1
 80009dc:	2100      	movs	r1, #0
 80009de:	4852      	ldr	r0, [pc, #328]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 80009e0:	f002 fe6e 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_HRTIM_Init+0x202>
  {
    Error_Handler();
 80009ea:	f001 f98b 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	2204      	movs	r2, #4
 80009f2:	2101      	movs	r1, #1
 80009f4:	484c      	ldr	r0, [pc, #304]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 80009f6:	f002 fe63 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_HRTIM_Init+0x218>
  {
    Error_Handler();
 8000a00:	f001 f980 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2210      	movs	r2, #16
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4847      	ldr	r0, [pc, #284]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a0c:	f002 fe58 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_HRTIM_Init+0x22e>
  {
    Error_Handler();
 8000a16:	f001 f975 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	2103      	movs	r1, #3
 8000a20:	4841      	ldr	r0, [pc, #260]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a22:	f002 fe4d 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_HRTIM_Init+0x244>
  {
    Error_Handler();
 8000a2c:	f001 f96a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2202      	movs	r2, #2
 8000a34:	2100      	movs	r1, #0
 8000a36:	483c      	ldr	r0, [pc, #240]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a38:	f002 fe42 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_HRTIM_Init+0x25a>
  {
    Error_Handler();
 8000a42:	f001 f95f 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2208      	movs	r2, #8
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4836      	ldr	r0, [pc, #216]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a4e:	f002 fe37 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_HRTIM_Init+0x270>
  {
    Error_Handler();
 8000a58:	f001 f954 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2220      	movs	r2, #32
 8000a60:	2102      	movs	r1, #2
 8000a62:	4831      	ldr	r0, [pc, #196]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a64:	f002 fe2c 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_HRTIM_Init+0x286>
  {
    Error_Handler();
 8000a6e:	f001 f949 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	2103      	movs	r1, #3
 8000a78:	482b      	ldr	r0, [pc, #172]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a7a:	f002 fe21 	bl	80036c0 <HAL_HRTIM_WaveformOutputConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_HRTIM_Init+0x29c>
  {
    Error_Handler();
 8000a84:	f001 f93e 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000a88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4825      	ldr	r0, [pc, #148]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000a92:	f002 fb85 	bl	80031a0 <HAL_HRTIM_TimeBaseConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_HRTIM_Init+0x2b4>
  {
    Error_Handler();
 8000a9c:	f001 f932 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	481f      	ldr	r0, [pc, #124]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000aaa:	f002 fc9b 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_HRTIM_Init+0x2cc>
  {
    Error_Handler();
 8000ab4:	f001 f926 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000ab8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000abc:	461a      	mov	r2, r3
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000ac2:	f002 fb6d 	bl	80031a0 <HAL_HRTIM_TimeBaseConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_HRTIM_Init+0x2e4>
  {
    Error_Handler();
 8000acc:	f001 f91a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000ada:	f002 fc83 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_HRTIM_Init+0x2fc>
  {
    Error_Handler();
 8000ae4:	f001 f90e 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000ae8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aec:	461a      	mov	r2, r3
 8000aee:	2103      	movs	r1, #3
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000af2:	f002 fb55 	bl	80031a0 <HAL_HRTIM_TimeBaseConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_HRTIM_Init+0x314>
  {
    Error_Handler();
 8000afc:	f001 f902 	bl	8001d04 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	2201      	movs	r2, #1
 8000b06:	2103      	movs	r1, #3
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000b0a:	f002 fc6b 	bl	80033e4 <HAL_HRTIM_WaveformCompareConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_HRTIM_Init+0x32c>
  {
    Error_Handler();
 8000b14:	f001 f8f6 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <MX_HRTIM_Init+0x33c>)
 8000b1a:	f001 f94d 	bl	8001db8 <HAL_HRTIM_MspPostInit>

}
 8000b1e:	bf00      	nop
 8000b20:	3790      	adds	r7, #144	; 0x90
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2400004c 	.word	0x2400004c
 8000b2c:	40017400 	.word	0x40017400

08000b30 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <MX_LPTIM1_Init+0x58>)
 8000b38:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_LOW;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b54:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_LPTIM1_Init+0x54>)
 8000b70:	f003 f926 	bl	8003dc0 <HAL_LPTIM_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8000b7a:	f001 f8c3 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	24000128 	.word	0x24000128
 8000b88:	40002400 	.word	0x40002400

08000b8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	; 0x68
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	222c      	movs	r2, #44	; 0x2c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fb68 	bl	800829c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bcc:	4b55      	ldr	r3, [pc, #340]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bce:	4a56      	ldr	r2, [pc, #344]	; (8000d28 <MX_TIM1_Init+0x19c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b52      	ldr	r3, [pc, #328]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000be0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000be4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bec:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bf8:	484a      	ldr	r0, [pc, #296]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000bfa:	f006 f869 	bl	8006cd0 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f001 f87e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c12:	4619      	mov	r1, r3
 8000c14:	4843      	ldr	r0, [pc, #268]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000c16:	f006 fcb7 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c20:	f001 f870 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c24:	483f      	ldr	r0, [pc, #252]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000c26:	f006 f923 	bl	8006e70 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c30:	f001 f868 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4837      	ldr	r0, [pc, #220]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000c48:	f007 f9fe 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c52:	f001 f857 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c56:	2360      	movs	r3, #96	; 0x60
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482a      	ldr	r0, [pc, #168]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000c7c:	f006 fb70 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c86:	f001 f83d 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	4824      	ldr	r0, [pc, #144]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000c94:	f006 fb64 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c9e:	f001 f831 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481e      	ldr	r0, [pc, #120]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000cac:	f006 fb58 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000cb6:	f001 f825 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000cc4:	f006 fb4c 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000cce:	f001 f819 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000d08:	f007 fa2c 	bl	8008164 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000d12:	f000 fff7 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <MX_TIM1_Init+0x198>)
 8000d18:	f001 fa6c 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000d1c:	bf00      	nop
 8000d1e:	3768      	adds	r7, #104	; 0x68
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000160 	.word	0x24000160
 8000d28:	40010000 	.word	0x40010000

08000d2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d74:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d80:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d86:	4823      	ldr	r0, [pc, #140]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000d88:	f005 ffa2 	bl	8006cd0 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f000 ffb7 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da0:	4619      	mov	r1, r3
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000da4:	f006 fbf0 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dae:	f000 ffa9 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000db2:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000db4:	f006 f85c 	bl	8006e70 <HAL_TIM_PWM_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dbe:	f000 ffa1 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4810      	ldr	r0, [pc, #64]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000dd2:	f007 f939 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ddc:	f000 ff92 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de0:	2360      	movs	r3, #96	; 0x60
 8000de2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000df8:	f006 fab2 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e02:	f000 ff7f 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM2_Init+0xe8>)
 8000e08:	f001 f9f4 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	240001ac 	.word	0x240001ac

08000e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e4c:	4a3d      	ldr	r2, [pc, #244]	; (8000f44 <MX_TIM4_Init+0x12c>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 24000-1;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e5e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000e62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e70:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e72:	f005 ff2d 	bl	8006cd0 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e7c:	f000 ff42 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e8e:	f006 fb7b 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e98:	f000 ff34 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000e9e:	f005 ffe7 	bl	8006e70 <HAL_TIM_PWM_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 ff2c 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4821      	ldr	r0, [pc, #132]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000ebc:	f007 f8c4 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ec6:	f000 ff1d 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eca:	2360      	movs	r3, #96	; 0x60
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000ee2:	f006 fa3d 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000eec:	f000 ff0a 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000ef8:	f006 fa32 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f02:	f000 feff 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	2208      	movs	r2, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000f0e:	f006 fa27 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000f18:	f000 fef4 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	220c      	movs	r2, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000f24:	f006 fa1c 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000f2e:	f000 fee9 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM4_Init+0x128>)
 8000f34:	f001 f95e 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	240001f8 	.word	0x240001f8
 8000f44:	40000800 	.word	0x40000800

08000f48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <MX_TIM5_Init+0x100>)
 8000f7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 24000-1;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f8e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000f92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa0:	4828      	ldr	r0, [pc, #160]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000fa2:	f005 fe95 	bl	8006cd0 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000fac:	f000 feaa 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4821      	ldr	r0, [pc, #132]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000fbe:	f006 fae3 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000fc8:	f000 fe9c 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000fce:	f005 ff4f 	bl	8006e70 <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f000 fe94 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <MX_TIM5_Init+0xfc>)
 8000fec:	f007 f82c 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fe85 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	; 0x60
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	2204      	movs	r2, #4
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_TIM5_Init+0xfc>)
 8001012:	f006 f9a5 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800101c:	f000 fe72 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	2208      	movs	r2, #8
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM5_Init+0xfc>)
 8001028:	f006 f99a 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8001032:	f000 fe67 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM5_Init+0xfc>)
 8001038:	f001 f8dc 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800103c:	bf00      	nop
 800103e:	3738      	adds	r7, #56	; 0x38
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000244 	.word	0x24000244
 8001048:	40000c00 	.word	0x40000c00

0800104c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09a      	sub	sp, #104	; 0x68
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	222c      	movs	r2, #44	; 0x2c
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f908 	bl	800829c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <MX_TIM8_Init+0x14c>)
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <MX_TIM8_Init+0x150>)
 8001090:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001092:	4b41      	ldr	r3, [pc, #260]	; (8001198 <MX_TIM8_Init+0x14c>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <MX_TIM8_Init+0x14c>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 24000-1;
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010a0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80010a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010b8:	4837      	ldr	r0, [pc, #220]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010ba:	f005 fe09 	bl	8006cd0 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f000 fe1e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d2:	4619      	mov	r1, r3
 80010d4:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010d6:	f006 fa57 	bl	8007588 <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80010e0:	f000 fe10 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010e4:	482c      	ldr	r0, [pc, #176]	; (8001198 <MX_TIM8_Init+0x14c>)
 80010e6:	f005 fec3 	bl	8006e70 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80010f0:	f000 fe08 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	4619      	mov	r1, r3
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <MX_TIM8_Init+0x14c>)
 8001108:	f006 ff9e 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001112:	f000 fdf7 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001116:	2360      	movs	r3, #96	; 0x60
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800112e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001132:	220c      	movs	r2, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM8_Init+0x14c>)
 8001138:	f006 f912 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8001142:	f000 fddf 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM8_Init+0x14c>)
 800117c:	f006 fff2 	bl	8008164 <HAL_TIMEx_ConfigBreakDeadTime>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001186:	f000 fdbd 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM8_Init+0x14c>)
 800118c:	f001 f832 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001190:	bf00      	nop
 8001192:	3768      	adds	r7, #104	; 0x68
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24000290 	.word	0x24000290
 800119c:	40010400 	.word	0x40010400

080011a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <MX_TIM12_Init+0xec>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 24000-1;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011e6:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80011ea:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_TIM12_Init+0xe8>)
 80011fa:	f005 fd69 	bl	8006cd0 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM12_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fd7e 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_TIM12_Init+0xe8>)
 8001216:	f006 f9b7 	bl	8007588 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM12_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fd70 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <MX_TIM12_Init+0xe8>)
 8001226:	f005 fe23 	bl	8006e70 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM12_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fd68 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_TIM12_Init+0xe8>)
 8001244:	f006 ff00 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fd59 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM12_Init+0xe8>)
 800126a:	f006 f879 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM12_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fd46 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM12_Init+0xe8>)
 800127a:	f000 ffbb 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	; 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240002dc 	.word	0x240002dc
 800128c:	40001800 	.word	0x40001800

08001290 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM13_Init+0x94>)
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <MX_TIM13_Init+0x98>)
 80012ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80012ae:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_TIM13_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_TIM13_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 24000-1;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM13_Init+0x94>)
 80012bc:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80012c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM13_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_TIM13_Init+0x94>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <MX_TIM13_Init+0x94>)
 80012d0:	f005 fcfe 	bl	8006cd0 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80012da:	f000 fd13 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80012de:	4811      	ldr	r0, [pc, #68]	; (8001324 <MX_TIM13_Init+0x94>)
 80012e0:	f005 fdc6 	bl	8006e70 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 fd0b 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	; 0x60
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM13_Init+0x94>)
 8001306:	f006 f82b 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 fcf8 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM13_Init+0x94>)
 8001316:	f000 ff6d 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	24000328 	.word	0x24000328
 8001328:	40001c00 	.word	0x40001c00

0800132c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <MX_TIM14_Init+0x94>)
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <MX_TIM14_Init+0x98>)
 8001348:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_TIM14_Init+0x94>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_TIM14_Init+0x94>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 24000-1;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_TIM14_Init+0x94>)
 8001358:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800135c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_TIM14_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_TIM14_Init+0x94>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800136a:	4815      	ldr	r0, [pc, #84]	; (80013c0 <MX_TIM14_Init+0x94>)
 800136c:	f005 fcb0 	bl	8006cd0 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001376:	f000 fcc5 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_TIM14_Init+0x94>)
 800137c:	f005 fd78 	bl	8006e70 <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001386:	f000 fcbd 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM14_Init+0x94>)
 80013a2:	f005 ffdd 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80013ac:	f000 fcaa 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM14_Init+0x94>)
 80013b2:	f000 ff1f 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000374 	.word	0x24000374
 80013c4:	40002000 	.word	0x40002000

080013c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b09a      	sub	sp, #104	; 0x68
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	222c      	movs	r2, #44	; 0x2c
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 ff4a 	bl	800829c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001408:	4b45      	ldr	r3, [pc, #276]	; (8001520 <MX_TIM15_Init+0x158>)
 800140a:	4a46      	ldr	r2, [pc, #280]	; (8001524 <MX_TIM15_Init+0x15c>)
 800140c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <MX_TIM15_Init+0x158>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <MX_TIM15_Init+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 24000-1;
 800141a:	4b41      	ldr	r3, [pc, #260]	; (8001520 <MX_TIM15_Init+0x158>)
 800141c:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001420:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_TIM15_Init+0x158>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001428:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <MX_TIM15_Init+0x158>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_TIM15_Init+0x158>)
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001434:	483a      	ldr	r0, [pc, #232]	; (8001520 <MX_TIM15_Init+0x158>)
 8001436:	f005 fc4b 	bl	8006cd0 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001440:	f000 fc60 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800144e:	4619      	mov	r1, r3
 8001450:	4833      	ldr	r0, [pc, #204]	; (8001520 <MX_TIM15_Init+0x158>)
 8001452:	f006 f899 	bl	8007588 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800145c:	f000 fc52 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001460:	482f      	ldr	r0, [pc, #188]	; (8001520 <MX_TIM15_Init+0x158>)
 8001462:	f005 fd05 	bl	8006e70 <HAL_TIM_PWM_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800146c:	f000 fc4a 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001478:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147c:	4619      	mov	r1, r3
 800147e:	4828      	ldr	r0, [pc, #160]	; (8001520 <MX_TIM15_Init+0x158>)
 8001480:	f006 fde2 	bl	8008048 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800148a:	f000 fc3b 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148e:	2360      	movs	r3, #96	; 0x60
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	481b      	ldr	r0, [pc, #108]	; (8001520 <MX_TIM15_Init+0x158>)
 80014b4:	f005 ff54 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80014be:	f000 fc21 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c6:	2204      	movs	r2, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4815      	ldr	r0, [pc, #84]	; (8001520 <MX_TIM15_Init+0x158>)
 80014cc:	f005 ff48 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80014d6:	f000 fc15 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_TIM15_Init+0x158>)
 8001502:	f006 fe2f 	bl	8008164 <HAL_TIMEx_ConfigBreakDeadTime>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800150c:	f000 fbfa 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_TIM15_Init+0x158>)
 8001512:	f000 fe6f 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001516:	bf00      	nop
 8001518:	3768      	adds	r7, #104	; 0x68
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	240003c0 	.word	0x240003c0
 8001524:	40014000 	.word	0x40014000

08001528 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b092      	sub	sp, #72	; 0x48
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800152e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	222c      	movs	r2, #44	; 0x2c
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fea7 	bl	800829c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <MX_TIM16_Init+0xec>)
 8001550:	4a31      	ldr	r2, [pc, #196]	; (8001618 <MX_TIM16_Init+0xf0>)
 8001552:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <MX_TIM16_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <MX_TIM16_Init+0xec>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 24000-1;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <MX_TIM16_Init+0xec>)
 8001562:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001566:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <MX_TIM16_Init+0xec>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <MX_TIM16_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <MX_TIM16_Init+0xec>)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800157a:	4826      	ldr	r0, [pc, #152]	; (8001614 <MX_TIM16_Init+0xec>)
 800157c:	f005 fba8 	bl	8006cd0 <HAL_TIM_Base_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001586:	f000 fbbd 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800158a:	4822      	ldr	r0, [pc, #136]	; (8001614 <MX_TIM16_Init+0xec>)
 800158c:	f005 fc70 	bl	8006e70 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001596:	f000 fbb5 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159a:	2360      	movs	r3, #96	; 0x60
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4815      	ldr	r0, [pc, #84]	; (8001614 <MX_TIM16_Init+0xec>)
 80015c0:	f005 fece 	bl	8007360 <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80015ca:	f000 fb9b 	bl	8001d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <MX_TIM16_Init+0xec>)
 80015f6:	f006 fdb5 	bl	8008164 <HAL_TIMEx_ConfigBreakDeadTime>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001600:	f000 fb80 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <MX_TIM16_Init+0xec>)
 8001606:	f000 fdf5 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3748      	adds	r7, #72	; 0x48
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2400040c 	.word	0x2400040c
 8001618:	40014400 	.word	0x40014400

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	4a57      	ldr	r2, [pc, #348]	; (8001798 <MX_GPIO_Init+0x17c>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001642:	4b55      	ldr	r3, [pc, #340]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	4a50      	ldr	r2, [pc, #320]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	4a48      	ldr	r2, [pc, #288]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b42      	ldr	r3, [pc, #264]	; (8001798 <MX_GPIO_Init+0x17c>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001692:	4a41      	ldr	r2, [pc, #260]	; (8001798 <MX_GPIO_Init+0x17c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800169c:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <MX_GPIO_Init+0x17c>)
 800169e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	4a39      	ldr	r2, [pc, #228]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b33      	ldr	r3, [pc, #204]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	4a32      	ldr	r2, [pc, #200]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <MX_GPIO_Init+0x17c>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 80016e6:	2200      	movs	r2, #0
 80016e8:	f249 519f 	movw	r1, #38303	; 0x959f
 80016ec:	482b      	ldr	r0, [pc, #172]	; (800179c <MX_GPIO_Init+0x180>)
 80016ee:	f001 fc6d 	bl	8002fcc <HAL_GPIO_WritePin>
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <MX_GPIO_Init+0x184>)
 80016fa:	f001 fc67 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001704:	4827      	ldr	r0, [pc, #156]	; (80017a4 <MX_GPIO_Init+0x188>)
 8001706:	f001 fc61 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 800170a:	2200      	movs	r2, #0
 800170c:	f640 71f7 	movw	r1, #4087	; 0xff7
 8001710:	4825      	ldr	r0, [pc, #148]	; (80017a8 <MX_GPIO_Init+0x18c>)
 8001712:	f001 fc5b 	bl	8002fcc <HAL_GPIO_WritePin>
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : TIM1_CH3_PH_Pin TIM1_CH4_PH_Pin TIM2_CH1_PH_Pin TIM8_CH4_PH_Pin
                           TIM12_CH2_PH_Pin TIM13_CH1_PH_Pin TIM14_CH1_PH_Pin TIM15_CH1_PH_Pin
                           TIM1_CH1_PH_Pin TIM1_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM1_CH3_PH_Pin|TIM1_CH4_PH_Pin|TIM2_CH1_PH_Pin|TIM8_CH4_PH_Pin
 8001716:	f249 539f 	movw	r3, #38303	; 0x959f
 800171a:	61fb      	str	r3, [r7, #28]
                          |TIM12_CH2_PH_Pin|TIM13_CH1_PH_Pin|TIM14_CH1_PH_Pin|TIM15_CH1_PH_Pin
                          |TIM1_CH1_PH_Pin|TIM1_CH2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	; (800179c <MX_GPIO_Init+0x180>)
 8001730:	f001 fa9c 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH4_PH_Pin TIM5_CH2_PH_Pin TIM5_CH3_PH_Pin TIM4_CH3_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH4_PH_Pin|TIM5_CH2_PH_Pin|TIM5_CH3_PH_Pin|TIM4_CH3_PH_Pin;
 8001734:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	4619      	mov	r1, r3
 800174c:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_GPIO_Init+0x184>)
 800174e:	f001 fa8d 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : TIM4_CH1_PH_Pin TIM4_CH2_PH_Pin */
  GPIO_InitStruct.Pin = TIM4_CH1_PH_Pin|TIM4_CH2_PH_Pin;
 8001752:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_GPIO_Init+0x188>)
 800176c:	f001 fa7e 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : HRTIM_CHC1_PH_Pin HRTIM_CHC2_PH_Pin HRTIM_CHD1_PH_Pin HRTIM_CHD2_PH_Pin
                           TIM15_CH2_PH_Pin TIM16_CH1_PH_Pin LPTIM1_OUT_PH_Pin HRTIM_CHA1_PH_Pin
                           HRTIM_CHA2_PH_Pin HRTIM_CHB1_PH_Pin HRTIM_CHB2_PH_Pin */
  GPIO_InitStruct.Pin = HRTIM_CHC1_PH_Pin|HRTIM_CHC2_PH_Pin|HRTIM_CHD1_PH_Pin|HRTIM_CHD2_PH_Pin
 8001770:	f640 73f7 	movw	r3, #4087	; 0xff7
 8001774:	61fb      	str	r3, [r7, #28]
                          |TIM15_CH2_PH_Pin|TIM16_CH1_PH_Pin|LPTIM1_OUT_PH_Pin|HRTIM_CHA1_PH_Pin
                          |HRTIM_CHA2_PH_Pin|HRTIM_CHB1_PH_Pin|HRTIM_CHB2_PH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_GPIO_Init+0x18c>)
 800178a:	f001 fa6f 	bl	8002c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	; 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58024400 	.word	0x58024400
 800179c:	58021000 	.word	0x58021000
 80017a0:	58020800 	.word	0x58020800
 80017a4:	58020400 	.word	0x58020400
 80017a8:	58020c00 	.word	0x58020c00
 80017ac:	00000000 	.word	0x00000000

080017b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 80017b8:	230a      	movs	r3, #10
 80017ba:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 80017bc:	a324      	add	r3, pc, #144	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	e9c7 2302 	strd	r2, r3, [r7, #8]


    if (htim==&htim1){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12d      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017d6:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	fb93 f2f2 	sdiv	r2, r3, r2
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11d      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f6:	db02      	blt.n	80017fe <HAL_TIM_PeriodElapsedCallback+0x4e>
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4413      	add	r3, r2
 8001808:	ed93 6b00 	vldr	d6, [r3]
 800180c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001816:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001822:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	24000160 	.word	0x24000160
 800183c:	240023a8 	.word	0x240023a8
 8001840:	240023ac 	.word	0x240023ac
 8001844:	24000468 	.word	0x24000468
 8001848:	24000460 	.word	0x24000460
 800184c:	24000458 	.word	0x24000458
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333

08001858 <control_update>:

static void control_update(double ref)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	//int new_phase = {0};
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 800186e:	ed97 7b00 	vldr	d7, [r7]
 8001872:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d505      	bpl.n	8001888 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 800187c:	4b01      	ldr	r3, [pc, #4]	; (8001884 <control_update+0x2c>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e004      	b.n	800188e <control_update+0x36>
 8001884:	24000000 	.word	0x24000000
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8001888:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <control_update+0x2c0>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){

		//Timer 1
		HAL_GPIO_WritePin(TIM1_CH1_PH_GPIO_Port, TIM1_CH1_PH_Pin, phase);  //Starts the phase generation on each of the pins (Channels)
 800188e:	4ba2      	ldr	r3, [pc, #648]	; (8001b18 <control_update+0x2c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	2101      	movs	r1, #1
 8001898:	48a0      	ldr	r0, [pc, #640]	; (8001b1c <control_update+0x2c4>)
 800189a:	f001 fb97 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH2_PH_GPIO_Port, TIM1_CH2_PH_Pin, phase);
 800189e:	4b9e      	ldr	r3, [pc, #632]	; (8001b18 <control_update+0x2c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2102      	movs	r1, #2
 80018a8:	489c      	ldr	r0, [pc, #624]	; (8001b1c <control_update+0x2c4>)
 80018aa:	f001 fb8f 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH3_PH_GPIO_Port, TIM1_CH3_PH_Pin, phase);
 80018ae:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <control_update+0x2c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	2104      	movs	r1, #4
 80018b8:	4898      	ldr	r0, [pc, #608]	; (8001b1c <control_update+0x2c4>)
 80018ba:	f001 fb87 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM1_CH4_PH_GPIO_Port, TIM1_CH4_PH_Pin, phase);
 80018be:	4b96      	ldr	r3, [pc, #600]	; (8001b18 <control_update+0x2c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	2108      	movs	r1, #8
 80018c8:	4894      	ldr	r0, [pc, #592]	; (8001b1c <control_update+0x2c4>)
 80018ca:	f001 fb7f 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 1

		//Timer 2
		HAL_GPIO_WritePin(TIM2_CH1_PH_GPIO_Port, TIM2_CH1_PH_Pin, phase);
 80018ce:	4b92      	ldr	r3, [pc, #584]	; (8001b18 <control_update+0x2c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	2110      	movs	r1, #16
 80018d8:	4890      	ldr	r0, [pc, #576]	; (8001b1c <control_update+0x2c4>)
 80018da:	f001 fb77 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 2

		//Timer 4
		HAL_GPIO_WritePin(TIM4_CH1_PH_GPIO_Port, TIM4_CH1_PH_Pin, phase);
 80018de:	4b8e      	ldr	r3, [pc, #568]	; (8001b18 <control_update+0x2c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ea:	488d      	ldr	r0, [pc, #564]	; (8001b20 <control_update+0x2c8>)
 80018ec:	f001 fb6e 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH2_PH_GPIO_Port, TIM4_CH2_PH_Pin, phase);
 80018f0:	4b89      	ldr	r3, [pc, #548]	; (8001b18 <control_update+0x2c0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fc:	4888      	ldr	r0, [pc, #544]	; (8001b20 <control_update+0x2c8>)
 80018fe:	f001 fb65 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH3_PH_GPIO_Port, TIM4_CH3_PH_Pin, phase);
 8001902:	4b85      	ldr	r3, [pc, #532]	; (8001b18 <control_update+0x2c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190e:	4885      	ldr	r0, [pc, #532]	; (8001b24 <control_update+0x2cc>)
 8001910:	f001 fb5c 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM4_CH4_PH_GPIO_Port, TIM4_CH4_PH_Pin, phase);
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <control_update+0x2c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001920:	4880      	ldr	r0, [pc, #512]	; (8001b24 <control_update+0x2cc>)
 8001922:	f001 fb53 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 4


		//Timer 5
		HAL_GPIO_WritePin(TIM5_CH2_PH_GPIO_Port, TIM5_CH2_PH_Pin, phase);
 8001926:	4b7c      	ldr	r3, [pc, #496]	; (8001b18 <control_update+0x2c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001932:	487c      	ldr	r0, [pc, #496]	; (8001b24 <control_update+0x2cc>)
 8001934:	f001 fb4a 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM5_CH3_PH_GPIO_Port, TIM5_CH3_PH_Pin, phase);
 8001938:	4b77      	ldr	r3, [pc, #476]	; (8001b18 <control_update+0x2c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001944:	4877      	ldr	r0, [pc, #476]	; (8001b24 <control_update+0x2cc>)
 8001946:	f001 fb41 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 5


		//Timer 8
		HAL_GPIO_WritePin(TIM8_CH4_PH_GPIO_Port, TIM8_CH4_PH_Pin, phase);
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <control_update+0x2c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	4871      	ldr	r0, [pc, #452]	; (8001b1c <control_update+0x2c4>)
 8001956:	f001 fb39 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 8


		//Timer 12
		HAL_GPIO_WritePin(TIM12_CH2_PH_GPIO_Port, TIM12_CH2_PH_Pin, phase);
 800195a:	4b6f      	ldr	r3, [pc, #444]	; (8001b18 <control_update+0x2c0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	486d      	ldr	r0, [pc, #436]	; (8001b1c <control_update+0x2c4>)
 8001968:	f001 fb30 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 12


		//Timer 13
		HAL_GPIO_WritePin(TIM13_CH1_PH_GPIO_Port, TIM13_CH1_PH_Pin, phase);
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <control_update+0x2c0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	4868      	ldr	r0, [pc, #416]	; (8001b1c <control_update+0x2c4>)
 800197a:	f001 fb27 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 13


		//Timer 14
		HAL_GPIO_WritePin(TIM14_CH1_PH_GPIO_Port, TIM14_CH1_PH_Pin, phase);
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <control_update+0x2c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198a:	4864      	ldr	r0, [pc, #400]	; (8001b1c <control_update+0x2c4>)
 800198c:	f001 fb1e 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 14


		//Timer 15
		HAL_GPIO_WritePin(TIM15_CH1_PH_GPIO_Port, TIM15_CH1_PH_Pin, phase);
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <control_update+0x2c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199c:	485f      	ldr	r0, [pc, #380]	; (8001b1c <control_update+0x2c4>)
 800199e:	f001 fb15 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TIM15_CH2_PH_GPIO_Port, TIM15_CH2_PH_Pin, phase);
 80019a2:	4b5d      	ldr	r3, [pc, #372]	; (8001b18 <control_update+0x2c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	2101      	movs	r1, #1
 80019ac:	485e      	ldr	r0, [pc, #376]	; (8001b28 <control_update+0x2d0>)
 80019ae:	f001 fb0d 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 15


		//Timer 16
		HAL_GPIO_WritePin(TIM16_CH1_PH_GPIO_Port, TIM16_CH1_PH_Pin, phase);
 80019b2:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <control_update+0x2c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	2102      	movs	r1, #2
 80019bc:	485a      	ldr	r0, [pc, #360]	; (8001b28 <control_update+0x2d0>)
 80019be:	f001 fb05 	bl	8002fcc <HAL_GPIO_WritePin>
		//End Timer 16


		//High Resolution Timer CHA
		HAL_GPIO_WritePin(HRTIM_CHA1_PH_GPIO_Port, HRTIM_CHA1_PH_Pin, phase);
 80019c2:	4b55      	ldr	r3, [pc, #340]	; (8001b18 <control_update+0x2c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	2110      	movs	r1, #16
 80019cc:	4856      	ldr	r0, [pc, #344]	; (8001b28 <control_update+0x2d0>)
 80019ce:	f001 fafd 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHA2_PH_GPIO_Port, HRTIM_CHA2_PH_Pin, phase);
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <control_update+0x2c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	2120      	movs	r1, #32
 80019dc:	4852      	ldr	r0, [pc, #328]	; (8001b28 <control_update+0x2d0>)
 80019de:	f001 faf5 	bl	8002fcc <HAL_GPIO_WritePin>
		//End High HRTIM CHA


		//High Resolution Timer CHB
		HAL_GPIO_WritePin(HRTIM_CHB1_PH_GPIO_Port, HRTIM_CHB1_PH_Pin, phase);
 80019e2:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <control_update+0x2c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	2140      	movs	r1, #64	; 0x40
 80019ec:	484e      	ldr	r0, [pc, #312]	; (8001b28 <control_update+0x2d0>)
 80019ee:	f001 faed 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHB2_PH_GPIO_Port, HRTIM_CHB2_PH_Pin, phase);
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <control_update+0x2c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	484a      	ldr	r0, [pc, #296]	; (8001b28 <control_update+0x2d0>)
 80019fe:	f001 fae5 	bl	8002fcc <HAL_GPIO_WritePin>
		//End High HRTIM CHB

		//High Resolution Timer CHC
		HAL_GPIO_WritePin(HRTIM_CHC1_PH_GPIO_Port, HRTIM_CHC1_PH_Pin, phase);
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <control_update+0x2c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4846      	ldr	r0, [pc, #280]	; (8001b28 <control_update+0x2d0>)
 8001a10:	f001 fadc 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHC2_PH_GPIO_Port, HRTIM_CHC2_PH_Pin, phase);
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <control_update+0x2c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a20:	4841      	ldr	r0, [pc, #260]	; (8001b28 <control_update+0x2d0>)
 8001a22:	f001 fad3 	bl	8002fcc <HAL_GPIO_WritePin>
		//End High HRTIM CHB1 & CHC


		//High Resolution Timer CHD
		HAL_GPIO_WritePin(HRTIM_CHD1_PH_GPIO_Port, HRTIM_CHD1_PH_Pin, phase);
 8001a26:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <control_update+0x2c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a32:	483d      	ldr	r0, [pc, #244]	; (8001b28 <control_update+0x2d0>)
 8001a34:	f001 faca 	bl	8002fcc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HRTIM_CHD2_PH_GPIO_Port, HRTIM_CHD2_PH_Pin, phase);
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <control_update+0x2c0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a44:	4838      	ldr	r0, [pc, #224]	; (8001b28 <control_update+0x2d0>)
 8001a46:	f001 fac1 	bl	8002fcc <HAL_GPIO_WritePin>
		//End High HRTIM CHB1 & CHD


		//Low Power Timer
		HAL_GPIO_WritePin(LPTIM1_OUT_PH_GPIO_Port, LPTIM1_OUT_PH_Pin, phase);
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <control_update+0x2c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	2104      	movs	r1, #4
 8001a54:	4834      	ldr	r0, [pc, #208]	; (8001b28 <control_update+0x2d0>)
 8001a56:	f001 fab9 	bl	8002fcc <HAL_GPIO_WritePin>


//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8001a5a:	ed97 7b00 	vldr	d7, [r7]
 8001a5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001a62:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8001a66:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8001b10 <control_update+0x2b8>
 8001a6a:	eeb0 1b47 	vmov.f64	d1, d7
 8001a6e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a72:	f000 f8b9 	bl	8001be8 <calc_dutycycle>
 8001a76:	4603      	mov	r3, r0
 8001a78:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <control_update+0x2d4>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	89fa      	ldrh	r2, [r7, #14]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f000 809b 	beq.w	8001bbc <control_update+0x364>
		// then save new dutycycle
		dutycycle = new_dc;
 8001a86:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <control_update+0x2d4>)
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		//Timer 1
		TIM1->CCR1 = dutycycle;   //Calls the duty cycle on the timers at the desired channel
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <control_update+0x2d4>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <control_update+0x2d8>)
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = dutycycle;
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <control_update+0x2d4>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <control_update+0x2d8>)
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = dutycycle;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <control_update+0x2d4>)
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <control_update+0x2d8>)
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = dutycycle;
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <control_update+0x2d4>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <control_update+0x2d8>)
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
		//End Timer 1

		//Timer 2
		TIM2->CCR1 = dutycycle;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <control_update+0x2d4>)
 8001aae:	881a      	ldrh	r2, [r3, #0]
 8001ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
		//End Timer 2

		//Timer 4
		TIM4->CCR1 = dutycycle;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <control_update+0x2d4>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <control_update+0x2dc>)
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = dutycycle;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <control_update+0x2d4>)
 8001ac0:	881a      	ldrh	r2, [r3, #0]
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <control_update+0x2dc>)
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = dutycycle;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <control_update+0x2d4>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <control_update+0x2dc>)
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = dutycycle;
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <control_update+0x2d4>)
 8001ad0:	881a      	ldrh	r2, [r3, #0]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <control_update+0x2dc>)
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
		//End Timer 4

		//Timer 5
		TIM5->CCR2 = dutycycle;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <control_update+0x2d4>)
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <control_update+0x2e0>)
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR3 = dutycycle;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <control_update+0x2d4>)
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <control_update+0x2e0>)
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c
		//End Timer 5

		//Timer 8
		TIM8->CCR4 = dutycycle;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <control_update+0x2d4>)
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <control_update+0x2e4>)
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
		//End Timer 8

		//Timer 12
		TIM12->CCR2 = dutycycle;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <control_update+0x2d4>)
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <control_update+0x2e8>)
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
		//End Timer 12

		//Timer 13
		TIM13->CCR1 = dutycycle;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <control_update+0x2d4>)
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <control_update+0x2ec>)
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34
		//End Timer 13

		//Timer 14
		TIM14->CCR1 = dutycycle;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <control_update+0x2d4>)
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <control_update+0x2f0>)
 8001b04:	635a      	str	r2, [r3, #52]	; 0x34
		//End Timer 14

		//Timer 15
		TIM15->CCR1 = dutycycle;
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <control_update+0x2d4>)
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	e01f      	b.n	8001b4c <control_update+0x2f4>
 8001b0c:	f3af 8000 	nop.w
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	3ffccccc 	.word	0x3ffccccc
 8001b18:	24000000 	.word	0x24000000
 8001b1c:	58021000 	.word	0x58021000
 8001b20:	58020400 	.word	0x58020400
 8001b24:	58020800 	.word	0x58020800
 8001b28:	58020c00 	.word	0x58020c00
 8001b2c:	240023b0 	.word	0x240023b0
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40000800 	.word	0x40000800
 8001b38:	40000c00 	.word	0x40000c00
 8001b3c:	40010400 	.word	0x40010400
 8001b40:	40001800 	.word	0x40001800
 8001b44:	40001c00 	.word	0x40001c00
 8001b48:	40002000 	.word	0x40002000
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <control_update+0x374>)
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR2 = dutycycle;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <control_update+0x378>)
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <control_update+0x374>)
 8001b56:	639a      	str	r2, [r3, #56]	; 0x38
		//End Timer 15

		//Timer 16
		TIM16->CCR1 = dutycycle;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <control_update+0x378>)
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <control_update+0x37c>)
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
		//End Timer 16

		//HRTIM CHA
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP1xR = dutycycle;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <control_update+0x378>)
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <control_update+0x380>)
 8001b66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_A].CMP2xR = dutycycle;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <control_update+0x378>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <control_update+0x380>)
 8001b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		//End HRTIM CHA

		//HRTIM CHB
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP1xR = dutycycle;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <control_update+0x378>)
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <control_update+0x380>)
 8001b7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_B].CMP2xR = dutycycle;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <control_update+0x378>)
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <control_update+0x380>)
 8001b84:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		//End HRTIM CHB

		//HRTIM CHC
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP1xR = dutycycle;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <control_update+0x378>)
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <control_update+0x380>)
 8001b8e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_C].CMP2xR = dutycycle;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <control_update+0x378>)
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <control_update+0x380>)
 8001b98:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		//End HRTIM CHC

		//HRTIM CHD
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP1xR = dutycycle;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <control_update+0x378>)
 8001b9e:	881a      	ldrh	r2, [r3, #0]
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <control_update+0x380>)
 8001ba2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		HRTIM1->sTimerxRegs[HRTIM_TIMERINDEX_TIMER_D].CMP2xR = dutycycle;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <control_update+0x378>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <control_update+0x380>)
 8001bac:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		//End HRTIM CHD

		//LPTIM1
		LPTIM1->CMP = dutycycle/2;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <control_update+0x378>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <control_update+0x384>)
 8001bba:	615a      	str	r2, [r3, #20]
		//End LPTIM1

	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <control_update+0x388>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40014000 	.word	0x40014000
 8001bd0:	240023b0 	.word	0x240023b0
 8001bd4:	40014400 	.word	0x40014400
 8001bd8:	40017400 	.word	0x40017400
 8001bdc:	40002400 	.word	0x40002400
 8001be0:	24000458 	.word	0x24000458
 8001be4:	00000000 	.word	0x00000000

08001be8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bf2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8001bfa:	ed97 5b02 	vldr	d5, [r7, #8]
 8001bfe:	ed97 6b00 	vldr	d6, [r7]
 8001c02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c06:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001c38 <calc_dutycycle+0x50>
 8001c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001c12:	ee17 3a90 	vmov	r3, s15
 8001c16:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d902      	bls.n	8001c28 <calc_dutycycle+0x40>
 8001c22:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 8001c26:	82fb      	strh	r3, [r7, #22]

	return dc;
 8001c28:	8afb      	ldrh	r3, [r7, #22]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40d76fc0 	.word	0x40d76fc0

08001c40 <gen_sine>:

static void gen_sine(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
	int i = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8001c4a:	a316      	add	r3, pc, #88	; (adr r3, 8001ca4 <gen_sine+0x64>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e017      	b.n	8001c8a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c64:	ed97 7b00 	vldr	d7, [r7]
 8001c68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8001c70:	f006 fb42 	bl	80082f8 <sin>
 8001c74:	eeb0 7b40 	vmov.f64	d7, d0
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <gen_sine+0x60>)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c90:	dbe3      	blt.n	8001c5a <gen_sine+0x1a>
	}
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	24000468 	.word	0x24000468
 8001ca4:	b68b71c3 	.word	0xb68b71c3
 8001ca8:	3f79bc65 	.word	0x3f79bc65

08001cac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001cbe:	f000 ff5d 	bl	8002b7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cce:	231f      	movs	r3, #31
 8001cd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cd2:	2387      	movs	r3, #135	; 0x87
 8001cd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 ff7b 	bl	8002bec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f000 ff58 	bl	8002bac <HAL_MPU_Enable>

}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_MspInit+0x30>)
 8001d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d1c:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x30>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x30>)
 8001d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	58024400 	.word	0x58024400

08001d44 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b4      	sub	sp, #208	; 0xd0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	22c0      	movs	r2, #192	; 0xc0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f006 faa1 	bl	800829c <memset>
  if(hhrtim->Instance==HRTIM1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_HRTIM_MspInit+0x6c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d121      	bne.n	8001da8 <HAL_HRTIM_MspInit+0x64>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fc3a 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001d86:	f7ff ffbd 	bl	8001d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d90:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_HRTIM_MspInit+0x70>)
 8001d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	37d0      	adds	r7, #208	; 0xd0
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40017400 	.word	0x40017400
 8001db4:	58024400 	.word	0x58024400

08001db8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_HRTIM_MspPostInit+0xac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d13f      	bne.n	8001e5a <HAL_HRTIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_HRTIM_MspPostInit+0xb0>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001e16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	480e      	ldr	r0, [pc, #56]	; (8001e6c <HAL_HRTIM_MspPostInit+0xb4>)
 8001e34:	f000 ff1a 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e38:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_HRTIM_MspPostInit+0xb8>)
 8001e56:	f000 ff09 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40017400 	.word	0x40017400
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58020800 	.word	0x58020800
 8001e70:	58020000 	.word	0x58020000

08001e74 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ba      	sub	sp, #232	; 0xe8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	22c0      	movs	r2, #192	; 0xc0
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f006 fa01 	bl	800829c <memset>
  if(hlptim->Instance==LPTIM1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_LPTIM_MspInit+0xd8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d14e      	bne.n	8001f42 <HAL_LPTIM_MspInit+0xce>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001ea4:	f04f 0220 	mov.w	r2, #32
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fb9a 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001ec6:	f7ff ff1d 	bl	8001d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_LPTIM_MspInit+0xdc>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_LPTIM_MspInit+0xe0>)
 8001f2e:	f000 fe9d 	bl	8002c6c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	205d      	movs	r0, #93	; 0x5d
 8001f38:	f000 fdeb 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f3c:	205d      	movs	r0, #93	; 0x5d
 8001f3e:	f000 fe02 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	37e8      	adds	r7, #232	; 0xe8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40002400 	.word	0x40002400
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020c00 	.word	0x58020c00

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a99      	ldr	r2, [pc, #612]	; (80021cc <HAL_TIM_Base_MspInit+0x274>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d117      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f6a:	4b99      	ldr	r3, [pc, #612]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f70:	4a97      	ldr	r2, [pc, #604]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f7a:	4b95      	ldr	r3, [pc, #596]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2019      	movs	r0, #25
 8001f8e:	f000 fdc0 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f92:	2019      	movs	r0, #25
 8001f94:	f000 fdd7 	bl	8002b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f98:	e113      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d117      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa4:	4b8a      	ldr	r3, [pc, #552]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001faa:	4a89      	ldr	r2, [pc, #548]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb4:	4b86      	ldr	r3, [pc, #536]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	201c      	movs	r0, #28
 8001fc8:	f000 fda3 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f000 fdba 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8001fd2:	e0f6      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7e      	ldr	r2, [pc, #504]	; (80021d4 <HAL_TIM_Base_MspInit+0x27c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d117      	bne.n	800200e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe4:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fee:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8001ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	201e      	movs	r0, #30
 8002002:	f000 fd86 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002006:	201e      	movs	r0, #30
 8002008:	f000 fd9d 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 800200c:	e0d9      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM5)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_TIM_Base_MspInit+0x280>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d117      	bne.n	8002048 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002018:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800201a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201e:	4a6c      	ldr	r2, [pc, #432]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002028:	4b69      	ldr	r3, [pc, #420]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800202a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2032      	movs	r0, #50	; 0x32
 800203c:	f000 fd69 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002040:	2032      	movs	r0, #50	; 0x32
 8002042:	f000 fd80 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002046:	e0bc      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM8)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a63      	ldr	r2, [pc, #396]	; (80021dc <HAL_TIM_Base_MspInit+0x284>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d127      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002052:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002058:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	202b      	movs	r0, #43	; 0x2b
 8002076:	f000 fd4c 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800207a:	202b      	movs	r0, #43	; 0x2b
 800207c:	f000 fd63 	bl	8002b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	202c      	movs	r0, #44	; 0x2c
 8002086:	f000 fd44 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800208a:	202c      	movs	r0, #44	; 0x2c
 800208c:	f000 fd5b 	bl	8002b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	202d      	movs	r0, #45	; 0x2d
 8002096:	f000 fd3c 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800209a:	202d      	movs	r0, #45	; 0x2d
 800209c:	f000 fd53 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 80020a0:	e08f      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM12)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <HAL_TIM_Base_MspInit+0x288>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d117      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020ac:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020b2:	4a47      	ldr	r2, [pc, #284]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020bc:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	202b      	movs	r0, #43	; 0x2b
 80020d0:	f000 fd1f 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020d4:	202b      	movs	r0, #43	; 0x2b
 80020d6:	f000 fd36 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 80020da:	e072      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM13)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a40      	ldr	r2, [pc, #256]	; (80021e4 <HAL_TIM_Base_MspInit+0x28c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d117      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x1be>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ec:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80020f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	202c      	movs	r0, #44	; 0x2c
 800210a:	f000 fd02 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800210e:	202c      	movs	r0, #44	; 0x2c
 8002110:	f000 fd19 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002114:	e055      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM14)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_TIM_Base_MspInit+0x290>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d117      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002122:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002126:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	202d      	movs	r0, #45	; 0x2d
 8002144:	f000 fce5 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002148:	202d      	movs	r0, #45	; 0x2d
 800214a:	f000 fcfc 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 800214e:	e038      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM15)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <HAL_TIM_Base_MspInit+0x294>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d117      	bne.n	800218a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800215c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800216c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2074      	movs	r0, #116	; 0x74
 800217e:	f000 fcc8 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002182:	2074      	movs	r0, #116	; 0x74
 8002184:	f000 fcdf 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 8002188:	e01b      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
  else if(htim_base->Instance==TIM16)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_TIM_Base_MspInit+0x298>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d116      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0x26a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 8002196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800219a:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_TIM_Base_MspInit+0x278>)
 80021a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	2075      	movs	r0, #117	; 0x75
 80021b8:	f000 fcab 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80021bc:	2075      	movs	r0, #117	; 0x75
 80021be:	f000 fcc2 	bl	8002b46 <HAL_NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3730      	adds	r7, #48	; 0x30
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	58024400 	.word	0x58024400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40001800 	.word	0x40001800
 80021e4:	40001c00 	.word	0x40001c00
 80021e8:	40002000 	.word	0x40002000
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400

080021f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b092      	sub	sp, #72	; 0x48
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4aa4      	ldr	r2, [pc, #656]	; (80024a4 <HAL_TIM_MspPostInit+0x2b0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d120      	bne.n	8002258 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	4ba4      	ldr	r3, [pc, #656]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221c:	4aa2      	ldr	r2, [pc, #648]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002226:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002234:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002246:	2301      	movs	r3, #1
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800224e:	4619      	mov	r1, r3
 8002250:	4896      	ldr	r0, [pc, #600]	; (80024ac <HAL_TIM_MspPostInit+0x2b8>)
 8002252:	f000 fd0b 	bl	8002c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002256:	e189      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d11f      	bne.n	80022a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	4a8f      	ldr	r2, [pc, #572]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002272:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002280:	2301      	movs	r3, #1
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002290:	2301      	movs	r3, #1
 8002292:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002298:	4619      	mov	r1, r3
 800229a:	4885      	ldr	r0, [pc, #532]	; (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 800229c:	f000 fce6 	bl	8002c6c <HAL_GPIO_Init>
}
 80022a0:	e164      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM4)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a83      	ldr	r2, [pc, #524]	; (80024b4 <HAL_TIM_MspPostInit+0x2c0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d13f      	bne.n	800232c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b2:	4a7d      	ldr	r2, [pc, #500]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022bc:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b77      	ldr	r3, [pc, #476]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d0:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022da:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80022e8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80022ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022fa:	2302      	movs	r3, #2
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002302:	4619      	mov	r1, r3
 8002304:	486c      	ldr	r0, [pc, #432]	; (80024b8 <HAL_TIM_MspPostInit+0x2c4>)
 8002306:	f000 fcb1 	bl	8002c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800231a:	2302      	movs	r3, #2
 800231c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002322:	4619      	mov	r1, r3
 8002324:	4865      	ldr	r0, [pc, #404]	; (80024bc <HAL_TIM_MspPostInit+0x2c8>)
 8002326:	f000 fca1 	bl	8002c6c <HAL_GPIO_Init>
}
 800232a:	e11f      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a63      	ldr	r2, [pc, #396]	; (80024c0 <HAL_TIM_MspPostInit+0x2cc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11f      	bne.n	8002376 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233c:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002354:	2306      	movs	r3, #6
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002364:	2302      	movs	r3, #2
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236c:	4619      	mov	r1, r3
 800236e:	4850      	ldr	r0, [pc, #320]	; (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002370:	f000 fc7c 	bl	8002c6c <HAL_GPIO_Init>
}
 8002374:	e0fa      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM8)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_TIM_MspPostInit+0x2d0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d120      	bne.n	80023c2 <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002380:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002386:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002390:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023b0:	2303      	movs	r3, #3
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023b8:	4619      	mov	r1, r3
 80023ba:	4843      	ldr	r0, [pc, #268]	; (80024c8 <HAL_TIM_MspPostInit+0x2d4>)
 80023bc:	f000 fc56 	bl	8002c6c <HAL_GPIO_Init>
}
 80023c0:	e0d4      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM12)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a41      	ldr	r2, [pc, #260]	; (80024cc <HAL_TIM_MspPostInit+0x2d8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d120      	bne.n	800240e <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80023fc:	2302      	movs	r3, #2
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002404:	4619      	mov	r1, r3
 8002406:	482d      	ldr	r0, [pc, #180]	; (80024bc <HAL_TIM_MspPostInit+0x2c8>)
 8002408:	f000 fc30 	bl	8002c6c <HAL_GPIO_Init>
}
 800240c:	e0ae      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM13)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_TIM_MspPostInit+0x2dc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d11f      	bne.n	8002458 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800241a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241e:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800242a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002446:	2309      	movs	r3, #9
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800244e:	4619      	mov	r1, r3
 8002450:	4817      	ldr	r0, [pc, #92]	; (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 8002452:	f000 fc0b 	bl	8002c6c <HAL_GPIO_Init>
}
 8002456:	e089      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM14)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_TIM_MspPostInit+0x2e0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d13a      	bne.n	80024d8 <HAL_TIM_MspPostInit+0x2e4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002468:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_TIM_MspPostInit+0x2b4>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002490:	2309      	movs	r3, #9
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <HAL_TIM_MspPostInit+0x2bc>)
 800249c:	f000 fbe6 	bl	8002c6c <HAL_GPIO_Init>
}
 80024a0:	e064      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
 80024a2:	bf00      	nop
 80024a4:	40010000 	.word	0x40010000
 80024a8:	58024400 	.word	0x58024400
 80024ac:	58021000 	.word	0x58021000
 80024b0:	58020000 	.word	0x58020000
 80024b4:	40000800 	.word	0x40000800
 80024b8:	58020c00 	.word	0x58020c00
 80024bc:	58020400 	.word	0x58020400
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40010400 	.word	0x40010400
 80024c8:	58020800 	.word	0x58020800
 80024cc:	40001800 	.word	0x40001800
 80024d0:	40001c00 	.word	0x40001c00
 80024d4:	40002000 	.word	0x40002000
  else if(htim->Instance==TIM15)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a25      	ldr	r2, [pc, #148]	; (8002574 <HAL_TIM_MspPostInit+0x380>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d11f      	bne.n	8002522 <HAL_TIM_MspPostInit+0x32e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	4a23      	ldr	r2, [pc, #140]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024ea:	f043 0310 	orr.w	r3, r3, #16
 80024ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 80024f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002500:	2360      	movs	r3, #96	; 0x60
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002510:	2304      	movs	r3, #4
 8002512:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002518:	4619      	mov	r1, r3
 800251a:	4818      	ldr	r0, [pc, #96]	; (800257c <HAL_TIM_MspPostInit+0x388>)
 800251c:	f000 fba6 	bl	8002c6c <HAL_GPIO_Init>
}
 8002520:	e024      	b.n	800256c <HAL_TIM_MspPostInit+0x378>
  else if(htim->Instance==TIM16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIM_MspPostInit+0x38c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d11f      	bne.n	800256c <HAL_TIM_MspPostInit+0x378>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_TIM_MspPostInit+0x384>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800254a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800255c:	2301      	movs	r3, #1
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <HAL_TIM_MspPostInit+0x390>)
 8002568:	f000 fb80 	bl	8002c6c <HAL_GPIO_Init>
}
 800256c:	bf00      	nop
 800256e:	3748      	adds	r7, #72	; 0x48
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40014000 	.word	0x40014000
 8002578:	58024400 	.word	0x58024400
 800257c:	58021000 	.word	0x58021000
 8002580:	40014400 	.word	0x40014400
 8002584:	58020400 	.word	0x58020400

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	e7fe      	b.n	800258c <NMI_Handler+0x4>

0800258e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002592:	e7fe      	b.n	8002592 <HardFault_Handler+0x4>

08002594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <MemManage_Handler+0x4>

0800259a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d4:	f000 f996 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM1_UP_IRQHandler+0x10>)
 80025e2:	f004 fdb5 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24000160 	.word	0x24000160

080025f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM2_IRQHandler+0x10>)
 80025f6:	f004 fdab 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	240001ac 	.word	0x240001ac

08002604 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM4_IRQHandler+0x10>)
 800260a:	f004 fda1 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	240001f8 	.word	0x240001f8

08002618 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800261e:	f004 fd97 	bl	8007150 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8002622:	4803      	ldr	r0, [pc, #12]	; (8002630 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8002624:	f004 fd94 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24000290 	.word	0x24000290
 8002630:	240002dc 	.word	0x240002dc

08002634 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002638:	4803      	ldr	r0, [pc, #12]	; (8002648 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800263a:	f004 fd89 	bl	8007150 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800263e:	4803      	ldr	r0, [pc, #12]	; (800264c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8002640:	f004 fd86 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	24000290 	.word	0x24000290
 800264c:	24000328 	.word	0x24000328

08002650 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002654:	4803      	ldr	r0, [pc, #12]	; (8002664 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002656:	f004 fd7b 	bl	8007150 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800265c:	f004 fd78 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	24000290 	.word	0x24000290
 8002668:	24000374 	.word	0x24000374

0800266c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <TIM5_IRQHandler+0x10>)
 8002672:	f004 fd6d 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24000244 	.word	0x24000244

08002680 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <LPTIM1_IRQHandler+0x10>)
 8002686:	f001 fcff 	bl	8004088 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24000128 	.word	0x24000128

08002694 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <TIM15_IRQHandler+0x10>)
 800269a:	f004 fd59 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	240003c0 	.word	0x240003c0

080026a8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <TIM16_IRQHandler+0x10>)
 80026ae:	f004 fd4f 	bl	8007150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2400040c 	.word	0x2400040c

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c0:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <SystemInit+0xe4>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <SystemInit+0xe4>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <SystemInit+0xe8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d807      	bhi.n	80026ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <SystemInit+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 030f 	bic.w	r3, r3, #15
 80026e4:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <SystemInit+0xe8>)
 80026e6:	f043 0307 	orr.w	r3, r3, #7
 80026ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <SystemInit+0xec>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <SystemInit+0xec>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <SystemInit+0xec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <SystemInit+0xec>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4929      	ldr	r1, [pc, #164]	; (80027a8 <SystemInit+0xec>)
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <SystemInit+0xf0>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <SystemInit+0xe8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002716:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <SystemInit+0xe8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <SystemInit+0xe8>)
 8002720:	f043 0307 	orr.w	r3, r3, #7
 8002724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <SystemInit+0xec>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <SystemInit+0xec>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <SystemInit+0xec>)
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <SystemInit+0xf4>)
 800273c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <SystemInit+0xec>)
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <SystemInit+0xf8>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <SystemInit+0xec>)
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <SystemInit+0xfc>)
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <SystemInit+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <SystemInit+0xec>)
 8002752:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <SystemInit+0xfc>)
 8002754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <SystemInit+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <SystemInit+0xec>)
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <SystemInit+0xfc>)
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <SystemInit+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <SystemInit+0xec>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <SystemInit+0x100>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <SystemInit+0x104>)
 8002780:	4013      	ands	r3, r2
 8002782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002786:	d202      	bcs.n	800278e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <SystemInit+0x108>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <SystemInit+0x10c>)
 8002790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	52002000 	.word	0x52002000
 80027a8:	58024400 	.word	0x58024400
 80027ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80027b0:	02020200 	.word	0x02020200
 80027b4:	01ff0000 	.word	0x01ff0000
 80027b8:	01010280 	.word	0x01010280
 80027bc:	5c001000 	.word	0x5c001000
 80027c0:	ffff0000 	.word	0xffff0000
 80027c4:	51008108 	.word	0x51008108
 80027c8:	52004000 	.word	0x52004000

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d0:	f7ff ff74 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fa:	f005 fd57 	bl	80082ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7fd fd6b 	bl	80002d8 <main>
  bx  lr
 8002802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002804:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002808:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800280c:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8002810:	080090d8 	.word	0x080090d8
  ldr r2, =_sbss
 8002814:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8002818:	240023b8 	.word	0x240023b8

0800281c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC3_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002826:	2003      	movs	r0, #3
 8002828:	f000 f968 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800282c:	f002 fd68 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_Init+0x68>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	4913      	ldr	r1, [pc, #76]	; (800288c <HAL_Init+0x6c>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_Init+0x68>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_Init+0x6c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_Init+0x70>)
 8002862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_Init+0x74>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800286a:	200f      	movs	r0, #15
 800286c:	f000 f814 	bl	8002898 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e002      	b.n	8002880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800287a:	f7ff fa49 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	58024400 	.word	0x58024400
 800288c:	08008ee8 	.word	0x08008ee8
 8002890:	24000008 	.word	0x24000008
 8002894:	24000004 	.word	0x24000004

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_InitTick+0x60>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e021      	b.n	80028f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_InitTick+0x64>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_InitTick+0x60>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f94d 	bl	8002b62 <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e0:	f000 f917 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_InitTick+0x68>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	24000010 	.word	0x24000010
 80028fc:	24000004 	.word	0x24000004
 8002900:	2400000c 	.word	0x2400000c

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	24000010 	.word	0x24000010
 8002928:	240023b4 	.word	0x240023b4

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	240023b4 	.word	0x240023b4

08002944 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetREVID+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0c1b      	lsrs	r3, r3, #16
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	5c001000 	.word	0x5c001000

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <__NVIC_SetPriorityGrouping+0x40>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002986:	4313      	orrs	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <__NVIC_SetPriorityGrouping+0x40>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00
 80029a0:	05fa0000 	.word	0x05fa0000

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b20:	f7ff ff40 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f7ff ff90 	bl	8002a50 <NVIC_EncodePriority>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff5f 	bl	80029fc <__NVIC_SetPriority>
}
 8002b3e:	bf00      	nop
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff33 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffa4 	bl	8002ab8 <SysTick_Config>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b80:	f3bf 8f5f 	dmb	sy
}
 8002b84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_MPU_Disable+0x28>)
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <HAL_MPU_Disable+0x28>)
 8002b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b90:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_MPU_Disable+0x2c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00
 8002ba8:	e000ed90 	.word	0xe000ed90

08002bac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bb4:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_MPU_Enable+0x38>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_MPU_Enable+0x3c>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_MPU_Enable+0x3c>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bca:	f3bf 8f4f 	dsb	sy
}
 8002bce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bd0:	f3bf 8f6f 	isb	sy
}
 8002bd4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed90 	.word	0xe000ed90
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	785a      	ldrb	r2, [r3, #1]
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_MPU_ConfigRegion+0x7c>)
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_MPU_ConfigRegion+0x7c>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_MPU_ConfigRegion+0x7c>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_MPU_ConfigRegion+0x7c>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7b1b      	ldrb	r3, [r3, #12]
 8002c14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7adb      	ldrb	r3, [r3, #11]
 8002c1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7a9b      	ldrb	r3, [r3, #10]
 8002c22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7b5b      	ldrb	r3, [r3, #13]
 8002c2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7b9b      	ldrb	r3, [r3, #14]
 8002c32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7bdb      	ldrb	r3, [r3, #15]
 8002c3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7a5b      	ldrb	r3, [r3, #9]
 8002c42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7a1b      	ldrb	r3, [r3, #8]
 8002c4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c58:	6113      	str	r3, [r2, #16]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed90 	.word	0xe000ed90

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <HAL_GPIO_Init+0x234>)
 8002c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c7e:	e194      	b.n	8002faa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8186 	beq.w	8002fa4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d005      	beq.n	8002cb0 <HAL_GPIO_Init+0x44>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d130      	bne.n	8002d12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 0201 	and.w	r2, r3, #1
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d017      	beq.n	8002d4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d123      	bne.n	8002da2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	69b9      	ldr	r1, [r7, #24]
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80e0 	beq.w	8002fa4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de4:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_GPIO_Init+0x238>)
 8002de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <HAL_GPIO_Init+0x238>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_GPIO_Init+0x238>)
 8002df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e02:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <HAL_GPIO_Init+0x23c>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a20      	ldr	r2, [pc, #128]	; (8002eac <HAL_GPIO_Init+0x240>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d052      	beq.n	8002ed4 <HAL_GPIO_Init+0x268>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_GPIO_Init+0x244>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_GPIO_Init+0x22e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_GPIO_Init+0x248>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <HAL_GPIO_Init+0x22a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_GPIO_Init+0x24c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d025      	beq.n	8002e92 <HAL_GPIO_Init+0x226>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_GPIO_Init+0x250>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_GPIO_Init+0x222>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_GPIO_Init+0x254>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_GPIO_Init+0x21e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_GPIO_Init+0x258>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x21a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <HAL_GPIO_Init+0x25c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x216>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_GPIO_Init+0x260>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x212>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_GPIO_Init+0x264>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x20e>
 8002e76:	2309      	movs	r3, #9
 8002e78:	e02d      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	e02b      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e029      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e027      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e86:	2306      	movs	r3, #6
 8002e88:	e025      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e023      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e021      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e01f      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e01d      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e01b      	b.n	8002ed6 <HAL_GPIO_Init+0x26a>
 8002e9e:	bf00      	nop
 8002ea0:	58000080 	.word	0x58000080
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	58000400 	.word	0x58000400
 8002eac:	58020000 	.word	0x58020000
 8002eb0:	58020400 	.word	0x58020400
 8002eb4:	58020800 	.word	0x58020800
 8002eb8:	58020c00 	.word	0x58020c00
 8002ebc:	58021000 	.word	0x58021000
 8002ec0:	58021400 	.word	0x58021400
 8002ec4:	58021800 	.word	0x58021800
 8002ec8:	58021c00 	.word	0x58021c00
 8002ecc:	58022000 	.word	0x58022000
 8002ed0:	58022400 	.word	0x58022400
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	f002 0203 	and.w	r2, r2, #3
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	4093      	lsls	r3, r2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee6:	4938      	ldr	r1, [pc, #224]	; (8002fc8 <HAL_GPIO_Init+0x35c>)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3302      	adds	r3, #2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae63 	bne.w	8002c80 <HAL_GPIO_Init+0x14>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3724      	adds	r7, #36	; 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	58000400 	.word	0x58000400

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0bd      	b.n	800318e <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d031      	beq.n	80030ba <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4f      	ldr	r2, [pc, #316]	; (8003198 <HAL_HRTIM_Init+0x198>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10e      	bne.n	800307e <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003060:	4b4e      	ldr	r3, [pc, #312]	; (800319c <HAL_HRTIM_Init+0x19c>)
 8003062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003066:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_HRTIM_Init+0x19c>)
 8003068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800306c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003070:	4b4a      	ldr	r3, [pc, #296]	; (800319c <HAL_HRTIM_Init+0x19c>)
 8003072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800308c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe fe42 	bl	8001d44 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030da:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
 8003106:	e03e      	b.n	8003186 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8003108:	7dfa      	ldrb	r2, [r7, #23]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3318      	adds	r3, #24
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800311c:	7dfa      	ldrb	r2, [r7, #23]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	331c      	adds	r3, #28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8003130:	7dfa      	ldrb	r2, [r7, #23]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3320      	adds	r3, #32
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8003144:	7dfa      	ldrb	r2, [r7, #23]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8003158:	7dfa      	ldrb	r2, [r7, #23]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3328      	adds	r3, #40	; 0x28
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 800316c:	7dfa      	ldrb	r2, [r7, #23]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3330      	adds	r3, #48	; 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	3301      	adds	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d9bd      	bls.n	8003108 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40017400 	.word	0x40017400
 800319c:	58024400 	.word	0x58024400

080031a0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d101      	bne.n	80031bc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
 80031ba:	e015      	b.n	80031e8 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b05      	cmp	r3, #5
 80031c8:	d104      	bne.n	80031d4 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 faa8 	bl	8003722 <HRTIM_MasterBase_Config>
 80031d2:	e004      	b.n	80031de <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fad1 	bl	8003780 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_HRTIM_SimpleBaseStart_IT>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimpleBaseStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_HRTIM_SimpleBaseStart_IT+0x18>
 8003204:	2302      	movs	r3, #2
 8003206:	e037      	b.n	8003278 <HAL_HRTIM_SimpleBaseStart_IT+0x88>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the repetition interrupt */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d108      	bne.n	8003230 <HAL_HRTIM_SimpleBaseStart_IT+0x40>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0210 	orr.w	r2, r2, #16
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e00f      	b.n	8003250 <HAL_HRTIM_SimpleBaseStart_IT+0x60>
  }
  else
  {
    __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	4413      	add	r3, r2
 800323a:	338c      	adds	r3, #140	; 0x8c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6811      	ldr	r1, [r2, #0]
 8003242:	f043 0210 	orr.w	r2, r3, #16
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	01db      	lsls	r3, r3, #7
 800324a:	440b      	add	r3, r1
 800324c:	338c      	adds	r3, #140	; 0x8c
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <HAL_HRTIM_SimpleBaseStart_IT+0x94>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	24000014 	.word	0x24000014

08003288 <HAL_HRTIM_SimplePWMStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_SimplePWMStart(HRTIM_HandleTypeDef * hhrtim,
                                          uint32_t TimerIdx,
                                          uint32_t PWMChannel)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
   /* Check the parameters */
  assert_param(IS_HRTIM_TIMER_OUTPUT(TimerIdx, PWMChannel));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_HRTIM_SimplePWMStart+0x1a>
 800329e:	2302      	movs	r3, #2
 80032a0:	e025      	b.n	80032ee <HAL_HRTIM_SimplePWMStart+0x66>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the timer output */
  hhrtim->Instance->sCommonRegs.OENR |= PWMChannel;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  /* Enable the timer counter */
  __HAL_HRTIM_ENABLE(hhrtim, TimerIdxToTimerId[TimerIdx]);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_HRTIM_SimplePWMStart+0x74>)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	24000014 	.word	0x24000014

08003300 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d101      	bne.n	800331c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	e05f      	b.n	80033dc <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8003326:	2302      	movs	r3, #2
 8003328:	e058      	b.n	80033dc <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d104      	bne.n	800334a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa5c 	bl	8003800 <HRTIM_MasterWaveform_Config>
 8003348:	e004      	b.n	8003354 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fabc 	bl	80038cc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	3320      	adds	r3, #32
 8003368:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4403      	add	r3, r0
 800337c:	3324      	adds	r3, #36	; 0x24
 800337e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	3328      	adds	r3, #40	; 0x28
 8003394:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	332c      	adds	r3, #44	; 0x2c
 80033aa:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6919      	ldr	r1, [r3, #16]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4403      	add	r3, r0
 80033be:	3330      	adds	r3, #48	; 0x30
 80033c0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fc99 	bl	8003cfc <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d101      	bne.n	8003402 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	e157      	b.n	80036b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 800340c:	2302      	movs	r3, #2
 800340e:	e150      	b.n	80036b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d140      	bne.n	80034a8 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3b01      	subs	r3, #1
 800342a:	2b07      	cmp	r3, #7
 800342c:	d82a      	bhi.n	8003484 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003455 	.word	0x08003455
 8003438:	08003461 	.word	0x08003461
 800343c:	08003485 	.word	0x08003485
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003485 	.word	0x08003485
 8003448:	08003485 	.word	0x08003485
 800344c:	08003485 	.word	0x08003485
 8003450:	08003479 	.word	0x08003479
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	61da      	str	r2, [r3, #28]
        break;
 800345e:	e01a      	b.n	8003496 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800346a:	e014      	b.n	8003496 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8003476:	e00e      	b.n	8003496 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8003482:	e008      	b.n	8003496 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2207      	movs	r2, #7
 8003488:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8003494:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b07      	cmp	r3, #7
 80034a0:	f040 80fe 	bne.w	80036a0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e104      	b.n	80036b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	f200 80e3 	bhi.w	8003678 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034d9 	.word	0x080034d9
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	08003679 	.word	0x08003679
 80034c4:	080035a9 	.word	0x080035a9
 80034c8:	08003679 	.word	0x08003679
 80034cc:	08003679 	.word	0x08003679
 80034d0:	08003679 	.word	0x08003679
 80034d4:	080035bd 	.word	0x080035bd
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	01db      	lsls	r3, r3, #7
 80034e4:	440b      	add	r3, r1
 80034e6:	339c      	adds	r3, #156	; 0x9c
 80034e8:	601a      	str	r2, [r3, #0]
        break;
 80034ea:	e0d1      	b.n	8003690 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	01db      	lsls	r3, r3, #7
 80034f8:	440b      	add	r3, r1
 80034fa:	33a4      	adds	r3, #164	; 0xa4
 80034fc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03f      	beq.n	8003586 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	01db      	lsls	r3, r3, #7
 8003510:	4413      	add	r3, r2
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	6811      	ldr	r1, [r2, #0]
 8003518:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3301      	adds	r3, #1
 8003520:	01db      	lsls	r3, r3, #7
 8003522:	440b      	add	r3, r1
 8003524:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	4413      	add	r3, r2
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	6809      	ldr	r1, [r1, #0]
 800353c:	431a      	orrs	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	01db      	lsls	r3, r3, #7
 8003544:	440b      	add	r3, r1
 8003546:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003550:	d109      	bne.n	8003566 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	01db      	lsls	r3, r3, #7
 800355e:	440b      	add	r3, r1
 8003560:	339c      	adds	r3, #156	; 0x9c
 8003562:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8003564:	e091      	b.n	800368a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800356e:	f040 808c 	bne.w	800368a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	01db      	lsls	r3, r3, #7
 800357e:	440b      	add	r3, r1
 8003580:	33a8      	adds	r3, #168	; 0xa8
 8003582:	601a      	str	r2, [r3, #0]
         break;
 8003584:	e081      	b.n	800368a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3301      	adds	r3, #1
 800358e:	01db      	lsls	r3, r3, #7
 8003590:	4413      	add	r3, r2
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	6811      	ldr	r1, [r2, #0]
 8003598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3301      	adds	r3, #1
 80035a0:	01db      	lsls	r3, r3, #7
 80035a2:	440b      	add	r3, r1
 80035a4:	601a      	str	r2, [r3, #0]
         break;
 80035a6:	e070      	b.n	800368a <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6819      	ldr	r1, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	01db      	lsls	r3, r3, #7
 80035b4:	440b      	add	r3, r1
 80035b6:	33a8      	adds	r3, #168	; 0xa8
 80035b8:	601a      	str	r2, [r3, #0]
        break;
 80035ba:	e069      	b.n	8003690 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	01db      	lsls	r3, r3, #7
 80035c8:	440b      	add	r3, r1
 80035ca:	33ac      	adds	r3, #172	; 0xac
 80035cc:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03f      	beq.n	8003656 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3301      	adds	r3, #1
 80035de:	01db      	lsls	r3, r3, #7
 80035e0:	4413      	add	r3, r2
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	6811      	ldr	r1, [r2, #0]
 80035e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	440b      	add	r3, r1
 80035f4:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3301      	adds	r3, #1
 80035fe:	01db      	lsls	r3, r3, #7
 8003600:	4413      	add	r3, r2
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6809      	ldr	r1, [r1, #0]
 800360e:	431a      	orrs	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3301      	adds	r3, #1
 8003614:	01db      	lsls	r3, r3, #7
 8003616:	440b      	add	r3, r1
 8003618:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d109      	bne.n	8003638 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	440b      	add	r3, r1
 8003632:	339c      	adds	r3, #156	; 0x9c
 8003634:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8003636:	e02a      	b.n	800368e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003640:	d125      	bne.n	800368e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	01db      	lsls	r3, r3, #7
 800364e:	440b      	add	r3, r1
 8003650:	33a8      	adds	r3, #168	; 0xa8
 8003652:	601a      	str	r2, [r3, #0]
         break;
 8003654:	e01b      	b.n	800368e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	3301      	adds	r3, #1
 800365e:	01db      	lsls	r3, r3, #7
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3301      	adds	r3, #1
 8003670:	01db      	lsls	r3, r3, #7
 8003672:	440b      	add	r3, r1
 8003674:	601a      	str	r2, [r3, #0]
         break;
 8003676:	e00a      	b.n	800368e <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2207      	movs	r2, #7
 800367c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8003688:	e002      	b.n	8003690 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800368e:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b07      	cmp	r3, #7
 800369a:	d101      	bne.n	80036a0 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e008      	b.n	80036b2 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d101      	bne.n	80036de <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	e01d      	b.n	800371a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e016      	b.n	800371a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fa22 	bl	8003b4c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f023 0318 	bic.w	r3, r3, #24
 800374c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	619a      	str	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	3301      	adds	r3, #1
 8003794:	01db      	lsls	r3, r3, #7
 8003796:	4413      	add	r3, r2
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 0318 	bic.w	r3, r3, #24
 80037b4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3301      	adds	r3, #1
 80037c8:	01db      	lsls	r3, r3, #7
 80037ca:	4413      	add	r3, r2
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	01db      	lsls	r3, r3, #7
 80037dc:	440b      	add	r3, r1
 80037de:	3394      	adds	r3, #148	; 0x94
 80037e0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	01db      	lsls	r3, r3, #7
 80037ee:	440b      	add	r3, r1
 80037f0:	3398      	adds	r3, #152	; 0x98
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800381a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003834:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003846:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003858:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800386a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800387c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003890:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	; 0x2c
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	01db      	lsls	r3, r3, #7
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6811      	ldr	r1, [r2, #0]
 80038ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	01db      	lsls	r3, r3, #7
 80038f4:	440b      	add	r3, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3301      	adds	r3, #1
 8003900:	01db      	lsls	r3, r3, #7
 8003902:	4413      	add	r3, r2
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	01db      	lsls	r3, r3, #7
 8003910:	4413      	add	r3, r2
 8003912:	33e8      	adds	r3, #232	; 0xe8
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	01db      	lsls	r3, r3, #7
 8003920:	4413      	add	r3, r2
 8003922:	33e4      	adds	r3, #228	; 0xe4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003930:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f023 0320 	bic.w	r3, r3, #32
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	4313      	orrs	r3, r2
 8003942:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	4313      	orrs	r3, r2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	4313      	orrs	r3, r2
 8003966:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	4313      	orrs	r3, r2
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003988:	4313      	orrs	r3, r2
 800398a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	4313      	orrs	r3, r2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ae:	d103      	bne.n	80039b8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	4313      	orrs	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	4313      	orrs	r3, r2
 80039da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	4313      	orrs	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f023 031f 	bic.w	r3, r3, #31
 80039f4:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a0a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a24:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	6a3a      	ldr	r2, [r7, #32]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003a38:	d004      	beq.n	8003a44 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003a42:	d103      	bne.n	8003a4c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d108      	bne.n	8003a5e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003a52:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d843      	bhi.n	8003af2 <HRTIM_TimingUnitWaveform_Config+0x226>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a85 	.word	0x08003a85
 8003a74:	08003a9b 	.word	0x08003a9b
 8003a78:	08003ab1 	.word	0x08003ab1
 8003a7c:	08003ac7 	.word	0x08003ac7
 8003a80:	08003add 	.word	0x08003add
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a8a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61fb      	str	r3, [r7, #28]
      break;
 8003a98:	e02c      	b.n	8003af4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61fb      	str	r3, [r7, #28]
      break;
 8003aae:	e021      	b.n	8003af4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003ab6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
      break;
 8003ac4:	e016      	b.n	8003af4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003acc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61fb      	str	r3, [r7, #28]
      break;
 8003ada:	e00b      	b.n	8003af4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ae2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	015b      	lsls	r3, r3, #5
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61fb      	str	r3, [r7, #28]
      break;
 8003af0:	e000      	b.n	8003af4 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8003af2:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3301      	adds	r3, #1
 8003afc:	01db      	lsls	r3, r3, #7
 8003afe:	4413      	add	r3, r2
 8003b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	4413      	add	r3, r2
 8003b0e:	33e8      	adds	r3, #232	; 0xe8
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	01db      	lsls	r3, r3, #7
 8003b1c:	4413      	add	r3, r2
 8003b1e:	33e4      	adds	r3, #228	; 0xe4
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	01db      	lsls	r3, r3, #7
 8003b2c:	4413      	add	r3, r2
 8003b2e:	33d4      	adds	r3, #212	; 0xd4
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003b3e:	bf00      	nop
 8003b40:	372c      	adds	r7, #44	; 0x2c
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	01db      	lsls	r3, r3, #7
 8003b66:	4413      	add	r3, r2
 8003b68:	33e4      	adds	r3, #228	; 0xe4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	01db      	lsls	r3, r3, #7
 8003b76:	4413      	add	r3, r2
 8003b78:	33b8      	adds	r3, #184	; 0xb8
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d04d      	beq.n	8003c22 <HRTIM_OutputConfig+0xd6>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d85e      	bhi.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d032      	beq.n	8003bfc <HRTIM_OutputConfig+0xb0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d856      	bhi.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d03e      	beq.n	8003c22 <HRTIM_OutputConfig+0xd6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d850      	bhi.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d025      	beq.n	8003bfc <HRTIM_OutputConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d84a      	bhi.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d01f      	beq.n	8003bfc <HRTIM_OutputConfig+0xb0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d044      	beq.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d841      	bhi.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d33e      	bcc.n	8003c4c <HRTIM_OutputConfig+0x100>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3b02      	subs	r3, #2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <HRTIM_OutputConfig+0x1ac>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11c      	bne.n	8003c22 <HRTIM_OutputConfig+0xd6>
 8003be8:	f244 0304 	movw	r3, #16388	; 0x4004
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	bf14      	ite	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	2300      	moveq	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d027      	beq.n	8003c4c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	440b      	add	r3, r1
 8003c0a:	33bc      	adds	r3, #188	; 0xbc
 8003c0c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	440b      	add	r3, r1
 8003c1c:	33c0      	adds	r3, #192	; 0xc0
 8003c1e:	601a      	str	r2, [r3, #0]
      break;
 8003c20:	e015      	b.n	8003c4e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	01db      	lsls	r3, r3, #7
 8003c2e:	440b      	add	r3, r1
 8003c30:	33c4      	adds	r3, #196	; 0xc4
 8003c32:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	01db      	lsls	r3, r3, #7
 8003c40:	440b      	add	r3, r1
 8003c42:	33c8      	adds	r3, #200	; 0xc8
 8003c44:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003c46:	2310      	movs	r3, #16
 8003c48:	61bb      	str	r3, [r7, #24]
      break;
 8003c4a:	e000      	b.n	8003c4e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8003c4c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8003c4e:	22fe      	movs	r2, #254	; 0xfe
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d111      	bne.n	8003cda <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10c      	bne.n	8003cda <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	01db      	lsls	r3, r3, #7
 8003ce2:	4413      	add	r3, r2
 8003ce4:	33e4      	adds	r3, #228	; 0xe4
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40000041 	.word	0x40000041

08003cfc <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d851      	bhi.n	8003db0 <HRTIM_ForceRegistersUpdate+0xb4>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HRTIM_ForceRegistersUpdate+0x18>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d43 	.word	0x08003d43
 8003d18:	08003d59 	.word	0x08003d59
 8003d1c:	08003d6f 	.word	0x08003d6f
 8003d20:	08003d85 	.word	0x08003d85
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003d2d 	.word	0x08003d2d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d40:	e037      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0202 	orr.w	r2, r2, #2
 8003d52:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d56:	e02c      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0204 	orr.w	r2, r2, #4
 8003d68:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d6c:	e021      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0208 	orr.w	r2, r2, #8
 8003d7e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d82:	e016      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0210 	orr.w	r2, r2, #16
 8003d94:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d98:	e00b      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0220 	orr.w	r2, r2, #32
 8003daa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003dae:	e000      	b.n	8003db2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8003db0:	bf00      	nop
  }
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop

08003dc0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e097      	b.n	8003f02 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7fe f841 	bl	8001e74 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d004      	beq.n	8003e14 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e12:	d103      	bne.n	8003e1c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 031e 	bic.w	r3, r3, #30
 8003e1a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <HAL_LPTIM_Init+0x14c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <HAL_LPTIM_Init+0x150>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e40:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003e46:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003e4c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003e52:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d004      	beq.n	8003e84 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e82:	d107      	bne.n	8003e94 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ea8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003eae:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <HAL_LPTIM_Init+0x154>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_LPTIM_Init+0x112>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_LPTIM_Init+0x158>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee2:	e009      	b.n	8003ef8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <HAL_LPTIM_Init+0x15c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d104      	bne.n	8003ef8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	ffff1f3f 	.word	0xffff1f3f
 8003f10:	ff19f1fe 	.word	0xff19f1fe
 8003f14:	40002400 	.word	0x40002400
 8003f18:	58002400 	.word	0x58002400
 8003f1c:	58002800 	.word	0x58002800

08003f20 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2210      	movs	r2, #16
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003f64:	2110      	movs	r1, #16
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f97e 	bl	8004268 <LPTIM_WaitForFlag>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d101      	bne.n	8003f76 <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e01d      	b.n	8003fb2 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003f86:	2108      	movs	r1, #8
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f96d 	bl	8004268 <LPTIM_WaitForFlag>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d101      	bne.n	8003f98 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e00c      	b.n	8003fb2 <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0204 	orr.w	r2, r2, #4
 8003fa6:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d00c      	beq.n	8003fee <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fdc:	d107      	bne.n	8003fee <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8003fec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2210      	movs	r2, #16
 8004004:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800400e:	2110      	movs	r1, #16
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f929 	bl	8004268 <LPTIM_WaitForFlag>
 8004016:	4603      	mov	r3, r0
 8004018:	2b03      	cmp	r3, #3
 800401a:	d101      	bne.n	8004020 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e02f      	b.n	8004080 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f951 	bl	80042c8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f90f 	bl	800424a <HAL_LPTIM_GetState>
 800402c:	4603      	mov	r3, r0
 800402e:	2b03      	cmp	r3, #3
 8004030:	d101      	bne.n	8004036 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e024      	b.n	8004080 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0210 	orr.w	r2, r2, #16
 8004044:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0202 	orr.w	r2, r2, #2
 8004054:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0204 	orr.w	r2, r2, #4
 8004074:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10d      	bne.n	80040ba <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2201      	movs	r2, #1
 80040b2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f882 	bl	80041be <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10d      	bne.n	80040e4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d106      	bne.n	80040e4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2202      	movs	r2, #2
 80040dc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f877 	bl	80041d2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d10d      	bne.n	800410e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d106      	bne.n	800410e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2204      	movs	r2, #4
 8004106:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f86c 	bl	80041e6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d10d      	bne.n	8004138 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d106      	bne.n	8004138 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2208      	movs	r2, #8
 8004130:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f861 	bl	80041fa <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d10d      	bne.n	8004162 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d106      	bne.n	8004162 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2210      	movs	r2, #16
 800415a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f856 	bl	800420e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b20      	cmp	r3, #32
 800416e:	d10d      	bne.n	800418c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d106      	bne.n	800418c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2220      	movs	r2, #32
 8004184:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f84b 	bl	8004222 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d10d      	bne.n	80041b6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d106      	bne.n	80041b6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f840 	bl	8004236 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004258:	b2db      	uxtb	r3, r3
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <LPTIM_WaitForFlag+0x58>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <LPTIM_WaitForFlag+0x5c>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	0b9b      	lsrs	r3, r3, #14
 8004282:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	3b01      	subs	r3, #1
 8004290:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	4013      	ands	r3, r2
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d002      	beq.n	80042b2 <LPTIM_WaitForFlag+0x4a>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ec      	bne.n	800428c <LPTIM_WaitForFlag+0x24>

  return result;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	24000004 	.word	0x24000004
 80042c4:	d1b71759 	.word	0xd1b71759

080042c8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d4:	f3ef 8310 	mrs	r3, PRIMASK
 80042d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80042da:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	2301      	movs	r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f383 8810 	msr	PRIMASK, r3
}
 80042e8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a81      	ldr	r2, [pc, #516]	; (80044f4 <LPTIM_Disable+0x22c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d02d      	beq.n	8004350 <LPTIM_Disable+0x88>
 80042f4:	4a7f      	ldr	r2, [pc, #508]	; (80044f4 <LPTIM_Disable+0x22c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d830      	bhi.n	800435c <LPTIM_Disable+0x94>
 80042fa:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <LPTIM_Disable+0x230>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d021      	beq.n	8004344 <LPTIM_Disable+0x7c>
 8004300:	4a7d      	ldr	r2, [pc, #500]	; (80044f8 <LPTIM_Disable+0x230>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d82a      	bhi.n	800435c <LPTIM_Disable+0x94>
 8004306:	4a7d      	ldr	r2, [pc, #500]	; (80044fc <LPTIM_Disable+0x234>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d015      	beq.n	8004338 <LPTIM_Disable+0x70>
 800430c:	4a7b      	ldr	r2, [pc, #492]	; (80044fc <LPTIM_Disable+0x234>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d824      	bhi.n	800435c <LPTIM_Disable+0x94>
 8004312:	4a7b      	ldr	r2, [pc, #492]	; (8004500 <LPTIM_Disable+0x238>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <LPTIM_Disable+0x58>
 8004318:	4a7a      	ldr	r2, [pc, #488]	; (8004504 <LPTIM_Disable+0x23c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d006      	beq.n	800432c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800431e:	e01d      	b.n	800435c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004320:	4b79      	ldr	r3, [pc, #484]	; (8004508 <LPTIM_Disable+0x240>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800432a:	e018      	b.n	800435e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800432c:	4b76      	ldr	r3, [pc, #472]	; (8004508 <LPTIM_Disable+0x240>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004336:	e012      	b.n	800435e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004338:	4b73      	ldr	r3, [pc, #460]	; (8004508 <LPTIM_Disable+0x240>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8004342:	e00c      	b.n	800435e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8004344:	4b70      	ldr	r3, [pc, #448]	; (8004508 <LPTIM_Disable+0x240>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800434e:	e006      	b.n	800435e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8004350:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <LPTIM_Disable+0x240>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800435a:	e000      	b.n	800435e <LPTIM_Disable+0x96>
      break;
 800435c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a5a      	ldr	r2, [pc, #360]	; (80044f4 <LPTIM_Disable+0x22c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d059      	beq.n	8004444 <LPTIM_Disable+0x17c>
 8004390:	4a58      	ldr	r2, [pc, #352]	; (80044f4 <LPTIM_Disable+0x22c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d867      	bhi.n	8004466 <LPTIM_Disable+0x19e>
 8004396:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <LPTIM_Disable+0x230>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d042      	beq.n	8004422 <LPTIM_Disable+0x15a>
 800439c:	4a56      	ldr	r2, [pc, #344]	; (80044f8 <LPTIM_Disable+0x230>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d861      	bhi.n	8004466 <LPTIM_Disable+0x19e>
 80043a2:	4a56      	ldr	r2, [pc, #344]	; (80044fc <LPTIM_Disable+0x234>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02b      	beq.n	8004400 <LPTIM_Disable+0x138>
 80043a8:	4a54      	ldr	r2, [pc, #336]	; (80044fc <LPTIM_Disable+0x234>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d85b      	bhi.n	8004466 <LPTIM_Disable+0x19e>
 80043ae:	4a54      	ldr	r2, [pc, #336]	; (8004500 <LPTIM_Disable+0x238>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <LPTIM_Disable+0xf4>
 80043b4:	4a53      	ldr	r2, [pc, #332]	; (8004504 <LPTIM_Disable+0x23c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d011      	beq.n	80043de <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80043ba:	e054      	b.n	8004466 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80043bc:	4b52      	ldr	r3, [pc, #328]	; (8004508 <LPTIM_Disable+0x240>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	4a51      	ldr	r2, [pc, #324]	; (8004508 <LPTIM_Disable+0x240>)
 80043c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80043cc:	4b4e      	ldr	r3, [pc, #312]	; (8004508 <LPTIM_Disable+0x240>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d2:	4a4d      	ldr	r2, [pc, #308]	; (8004508 <LPTIM_Disable+0x240>)
 80043d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80043dc:	e044      	b.n	8004468 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80043de:	4b4a      	ldr	r3, [pc, #296]	; (8004508 <LPTIM_Disable+0x240>)
 80043e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e4:	4a48      	ldr	r2, [pc, #288]	; (8004508 <LPTIM_Disable+0x240>)
 80043e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <LPTIM_Disable+0x240>)
 80043f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f4:	4a44      	ldr	r2, [pc, #272]	; (8004508 <LPTIM_Disable+0x240>)
 80043f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80043fe:	e033      	b.n	8004468 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004400:	4b41      	ldr	r3, [pc, #260]	; (8004508 <LPTIM_Disable+0x240>)
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004406:	4a40      	ldr	r2, [pc, #256]	; (8004508 <LPTIM_Disable+0x240>)
 8004408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800440c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004410:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <LPTIM_Disable+0x240>)
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <LPTIM_Disable+0x240>)
 8004418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800441c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004420:	e022      	b.n	8004468 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8004422:	4b39      	ldr	r3, [pc, #228]	; (8004508 <LPTIM_Disable+0x240>)
 8004424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004428:	4a37      	ldr	r2, [pc, #220]	; (8004508 <LPTIM_Disable+0x240>)
 800442a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800442e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8004432:	4b35      	ldr	r3, [pc, #212]	; (8004508 <LPTIM_Disable+0x240>)
 8004434:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004438:	4a33      	ldr	r2, [pc, #204]	; (8004508 <LPTIM_Disable+0x240>)
 800443a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004442:	e011      	b.n	8004468 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8004444:	4b30      	ldr	r3, [pc, #192]	; (8004508 <LPTIM_Disable+0x240>)
 8004446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <LPTIM_Disable+0x240>)
 800444c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004450:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8004454:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <LPTIM_Disable+0x240>)
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445a:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <LPTIM_Disable+0x240>)
 800445c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004460:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8004464:	e000      	b.n	8004468 <LPTIM_Disable+0x1a0>
      break;
 8004466:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <LPTIM_Disable+0x1ae>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80d1 	beq.w	8004618 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <LPTIM_Disable+0x22c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d031      	beq.n	80044e4 <LPTIM_Disable+0x21c>
 8004480:	4a1c      	ldr	r2, [pc, #112]	; (80044f4 <LPTIM_Disable+0x22c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d842      	bhi.n	800450c <LPTIM_Disable+0x244>
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <LPTIM_Disable+0x230>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d024      	beq.n	80044d6 <LPTIM_Disable+0x20e>
 800448c:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <LPTIM_Disable+0x230>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d83c      	bhi.n	800450c <LPTIM_Disable+0x244>
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <LPTIM_Disable+0x234>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d017      	beq.n	80044c8 <LPTIM_Disable+0x200>
 8004498:	4a18      	ldr	r2, [pc, #96]	; (80044fc <LPTIM_Disable+0x234>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d836      	bhi.n	800450c <LPTIM_Disable+0x244>
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <LPTIM_Disable+0x238>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <LPTIM_Disable+0x1e4>
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <LPTIM_Disable+0x23c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80044aa:	e02f      	b.n	800450c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <LPTIM_Disable+0x240>)
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <LPTIM_Disable+0x240>)
 80044b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80044b6:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80044b8:	e029      	b.n	800450e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <LPTIM_Disable+0x240>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <LPTIM_Disable+0x240>)
 80044c0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80044c6:	e022      	b.n	800450e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <LPTIM_Disable+0x240>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <LPTIM_Disable+0x240>)
 80044ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044d2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80044d4:	e01b      	b.n	800450e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <LPTIM_Disable+0x240>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <LPTIM_Disable+0x240>)
 80044dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044e0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80044e2:	e014      	b.n	800450e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <LPTIM_Disable+0x240>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	4a07      	ldr	r2, [pc, #28]	; (8004508 <LPTIM_Disable+0x240>)
 80044ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044ee:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80044f0:	e00d      	b.n	800450e <LPTIM_Disable+0x246>
 80044f2:	bf00      	nop
 80044f4:	58003000 	.word	0x58003000
 80044f8:	58002c00 	.word	0x58002c00
 80044fc:	58002800 	.word	0x58002800
 8004500:	40002400 	.word	0x40002400
 8004504:	58002400 	.word	0x58002400
 8004508:	58024400 	.word	0x58024400
        break;
 800450c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01a      	beq.n	800454a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800452c:	2108      	movs	r1, #8
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fe9a 	bl	8004268 <LPTIM_WaitForFlag>
 8004534:	4603      	mov	r3, r0
 8004536:	2b03      	cmp	r3, #3
 8004538:	d103      	bne.n	8004542 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2208      	movs	r2, #8
 8004548:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01a      	beq.n	8004586 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004568:	2110      	movs	r1, #16
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fe7c 	bl	8004268 <LPTIM_WaitForFlag>
 8004570:	4603      	mov	r3, r0
 8004572:	2b03      	cmp	r3, #3
 8004574:	d103      	bne.n	800457e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2210      	movs	r2, #16
 8004584:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a32      	ldr	r2, [pc, #200]	; (8004654 <LPTIM_Disable+0x38c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d039      	beq.n	8004604 <LPTIM_Disable+0x33c>
 8004590:	4a30      	ldr	r2, [pc, #192]	; (8004654 <LPTIM_Disable+0x38c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d83f      	bhi.n	8004616 <LPTIM_Disable+0x34e>
 8004596:	4a30      	ldr	r2, [pc, #192]	; (8004658 <LPTIM_Disable+0x390>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02a      	beq.n	80045f2 <LPTIM_Disable+0x32a>
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <LPTIM_Disable+0x390>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d839      	bhi.n	8004616 <LPTIM_Disable+0x34e>
 80045a2:	4a2e      	ldr	r2, [pc, #184]	; (800465c <LPTIM_Disable+0x394>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01b      	beq.n	80045e0 <LPTIM_Disable+0x318>
 80045a8:	4a2c      	ldr	r2, [pc, #176]	; (800465c <LPTIM_Disable+0x394>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d833      	bhi.n	8004616 <LPTIM_Disable+0x34e>
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <LPTIM_Disable+0x398>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <LPTIM_Disable+0x2f4>
 80045b4:	4a2b      	ldr	r2, [pc, #172]	; (8004664 <LPTIM_Disable+0x39c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80045ba:	e02c      	b.n	8004616 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045c4:	4928      	ldr	r1, [pc, #160]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	4313      	orrs	r3, r2
 80045ca:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 80045cc:	e024      	b.n	8004618 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80045ce:	4b26      	ldr	r3, [pc, #152]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045d6:	4924      	ldr	r1, [pc, #144]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	4313      	orrs	r3, r2
 80045dc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80045de:	e01b      	b.n	8004618 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e8:	491f      	ldr	r1, [pc, #124]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	4313      	orrs	r3, r2
 80045ee:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80045f0:	e012      	b.n	8004618 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fa:	491b      	ldr	r1, [pc, #108]	; (8004668 <LPTIM_Disable+0x3a0>)
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fe:	4313      	orrs	r3, r2
 8004600:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004602:	e009      	b.n	8004618 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <LPTIM_Disable+0x3a0>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <LPTIM_Disable+0x3a0>)
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	4313      	orrs	r3, r2
 8004612:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8004614:	e000      	b.n	8004618 <LPTIM_Disable+0x350>
        break;
 8004616:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f383 8810 	msr	PRIMASK, r3
}
 800464a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800464c:	bf00      	nop
 800464e:	3730      	adds	r7, #48	; 0x30
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	58003000 	.word	0x58003000
 8004658:	58002c00 	.word	0x58002c00
 800465c:	58002800 	.word	0x58002800
 8004660:	40002400 	.word	0x40002400
 8004664:	58002400 	.word	0x58002400
 8004668:	58024400 	.word	0x58024400

0800466c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_PWREx_ConfigSupply+0x70>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d00a      	beq.n	8004696 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_PWREx_ConfigSupply+0x70>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e01f      	b.n	80046d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e01d      	b.n	80046d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004696:	4b11      	ldr	r3, [pc, #68]	; (80046dc <HAL_PWREx_ConfigSupply+0x70>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f023 0207 	bic.w	r2, r3, #7
 800469e:	490f      	ldr	r1, [pc, #60]	; (80046dc <HAL_PWREx_ConfigSupply+0x70>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046a6:	f7fe f941 	bl	800292c <HAL_GetTick>
 80046aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ac:	e009      	b.n	80046c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ae:	f7fe f93d 	bl	800292c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046bc:	d901      	bls.n	80046c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e007      	b.n	80046d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_PWREx_ConfigSupply+0x70>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	d1ee      	bne.n	80046ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	58024800 	.word	0x58024800

080046e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08c      	sub	sp, #48	; 0x30
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f000 bc48 	b.w	8004f84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8088 	beq.w	8004812 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004702:	4b99      	ldr	r3, [pc, #612]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800470c:	4b96      	ldr	r3, [pc, #600]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004714:	2b10      	cmp	r3, #16
 8004716:	d007      	beq.n	8004728 <HAL_RCC_OscConfig+0x48>
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	2b18      	cmp	r3, #24
 800471c:	d111      	bne.n	8004742 <HAL_RCC_OscConfig+0x62>
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d10c      	bne.n	8004742 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d06d      	beq.n	8004810 <HAL_RCC_OscConfig+0x130>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d169      	bne.n	8004810 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f000 bc21 	b.w	8004f84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d106      	bne.n	800475a <HAL_RCC_OscConfig+0x7a>
 800474c:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a85      	ldr	r2, [pc, #532]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e02e      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <HAL_RCC_OscConfig+0x9c>
 8004762:	4b81      	ldr	r3, [pc, #516]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a80      	ldr	r2, [pc, #512]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7d      	ldr	r2, [pc, #500]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0xc0>
 8004786:	4b78      	ldr	r3, [pc, #480]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a77      	ldr	r2, [pc, #476]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b75      	ldr	r3, [pc, #468]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a74      	ldr	r2, [pc, #464]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0xd8>
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a70      	ldr	r2, [pc, #448]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b6e      	ldr	r3, [pc, #440]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6d      	ldr	r2, [pc, #436]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe f8b4 	bl	800292c <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe f8b0 	bl	800292c <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e3d4      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0xe8>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e8:	f7fe f8a0 	bl	800292c <HAL_GetTick>
 80047ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f0:	f7fe f89c 	bl	800292c <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e3c0      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004802:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x110>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80ca 	beq.w	80049b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004820:	4b51      	ldr	r3, [pc, #324]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004828:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800482a:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_RCC_OscConfig+0x166>
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2b18      	cmp	r3, #24
 800483a:	d156      	bne.n	80048ea <HAL_RCC_OscConfig+0x20a>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d151      	bne.n	80048ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004846:	4b48      	ldr	r3, [pc, #288]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_OscConfig+0x17e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e392      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800485e:	4b42      	ldr	r3, [pc, #264]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0219 	bic.w	r2, r3, #25
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	493f      	ldr	r1, [pc, #252]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe f85c 	bl	800292c <HAL_GetTick>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7fe f858 	bl	800292c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e37c      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004896:	f7fe f855 	bl	8002944 <HAL_GetREVID>
 800489a:	4603      	mov	r3, r0
 800489c:	f241 0203 	movw	r2, #4099	; 0x1003
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d817      	bhi.n	80048d4 <HAL_RCC_OscConfig+0x1f4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d108      	bne.n	80048be <HAL_RCC_OscConfig+0x1de>
 80048ac:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80048b4:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048bc:	e07a      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	031b      	lsls	r3, r3, #12
 80048cc:	4926      	ldr	r1, [pc, #152]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d2:	e06f      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	4921      	ldr	r1, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	e064      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d047      	beq.n	8004982 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 0219 	bic.w	r2, r3, #25
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	491a      	ldr	r1, [pc, #104]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fe f812 	bl	800292c <HAL_GetTick>
 8004908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490c:	f7fe f80e 	bl	800292c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e332      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492a:	f7fe f80b 	bl	8002944 <HAL_GetREVID>
 800492e:	4603      	mov	r3, r0
 8004930:	f241 0203 	movw	r2, #4099	; 0x1003
 8004934:	4293      	cmp	r3, r2
 8004936:	d819      	bhi.n	800496c <HAL_RCC_OscConfig+0x28c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d108      	bne.n	8004952 <HAL_RCC_OscConfig+0x272>
 8004940:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004948:	4a07      	ldr	r2, [pc, #28]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494e:	6053      	str	r3, [r2, #4]
 8004950:	e030      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	031b      	lsls	r3, r3, #12
 8004960:	4901      	ldr	r1, [pc, #4]	; (8004968 <HAL_RCC_OscConfig+0x288>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e025      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
 8004968:	58024400 	.word	0x58024400
 800496c:	4b9a      	ldr	r3, [pc, #616]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	4997      	ldr	r1, [pc, #604]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
 8004980:	e018      	b.n	80049b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b95      	ldr	r3, [pc, #596]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a94      	ldr	r2, [pc, #592]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fd ffcd 	bl	800292c <HAL_GetTick>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7fd ffc9 	bl	800292c <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e2ed      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049a8:	4b8b      	ldr	r3, [pc, #556]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a9 	beq.w	8004b14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c2:	4b85      	ldr	r3, [pc, #532]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049cc:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d007      	beq.n	80049e8 <HAL_RCC_OscConfig+0x308>
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b18      	cmp	r3, #24
 80049dc:	d13a      	bne.n	8004a54 <HAL_RCC_OscConfig+0x374>
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d135      	bne.n	8004a54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049e8:	4b7b      	ldr	r3, [pc, #492]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_OscConfig+0x320>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e2c1      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a00:	f7fd ffa0 	bl	8002944 <HAL_GetREVID>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d817      	bhi.n	8004a3e <HAL_RCC_OscConfig+0x35e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d108      	bne.n	8004a28 <HAL_RCC_OscConfig+0x348>
 8004a16:	4b70      	ldr	r3, [pc, #448]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004a1e:	4a6e      	ldr	r2, [pc, #440]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a26:	e075      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a28:	4b6b      	ldr	r3, [pc, #428]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	069b      	lsls	r3, r3, #26
 8004a36:	4968      	ldr	r1, [pc, #416]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a3c:	e06a      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a3e:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	4962      	ldr	r1, [pc, #392]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a52:	e05f      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d042      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5d      	ldr	r2, [pc, #372]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd ff60 	bl	800292c <HAL_GetTick>
 8004a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a70:	f7fd ff5c 	bl	800292c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e280      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a82:	4b55      	ldr	r3, [pc, #340]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a8e:	f7fd ff59 	bl	8002944 <HAL_GetREVID>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d817      	bhi.n	8004acc <HAL_RCC_OscConfig+0x3ec>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d108      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x3d6>
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004aac:	4a4a      	ldr	r2, [pc, #296]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab2:	6053      	str	r3, [r2, #4]
 8004ab4:	e02e      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
 8004ab6:	4b48      	ldr	r3, [pc, #288]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	069b      	lsls	r3, r3, #26
 8004ac4:	4944      	ldr	r1, [pc, #272]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
 8004aca:	e023      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	493f      	ldr	r1, [pc, #252]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60cb      	str	r3, [r1, #12]
 8004ae0:	e018      	b.n	8004b14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3c      	ldr	r2, [pc, #240]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fd ff1d 	bl	800292c <HAL_GetTick>
 8004af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004af6:	f7fd ff19 	bl	800292c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e23d      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b08:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d036      	beq.n	8004b8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d019      	beq.n	8004b5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd fefa 	bl	800292c <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd fef6 	bl	800292c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e21a      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b4e:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x45c>
 8004b5a:	e018      	b.n	8004b8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b60:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fee0 	bl	800292c <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7fd fedc 	bl	800292c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e200      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d039      	beq.n	8004c0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01c      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bae:	f7fd febd 	bl	800292c <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb6:	f7fd feb9 	bl	800292c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1dd      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <HAL_RCC_OscConfig+0x4f8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x4d6>
 8004bd4:	e01b      	b.n	8004c0e <HAL_RCC_OscConfig+0x52e>
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bdc:	4b9b      	ldr	r3, [pc, #620]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a9a      	ldr	r2, [pc, #616]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004be8:	f7fd fea0 	bl	800292c <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf0:	f7fd fe9c 	bl	800292c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1c0      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c02:	4b92      	ldr	r3, [pc, #584]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8081 	beq.w	8004d1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	; (8004e50 <HAL_RCC_OscConfig+0x770>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a8b      	ldr	r2, [pc, #556]	; (8004e50 <HAL_RCC_OscConfig+0x770>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c28:	f7fd fe80 	bl	800292c <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c30:	f7fd fe7c 	bl	800292c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e1a0      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c42:	4b83      	ldr	r3, [pc, #524]	; (8004e50 <HAL_RCC_OscConfig+0x770>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d106      	bne.n	8004c64 <HAL_RCC_OscConfig+0x584>
 8004c56:	4b7d      	ldr	r3, [pc, #500]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a7c      	ldr	r2, [pc, #496]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
 8004c62:	e02d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5e0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x5a6>
 8004c6c:	4b77      	ldr	r3, [pc, #476]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a76      	ldr	r2, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	4b74      	ldr	r3, [pc, #464]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a73      	ldr	r2, [pc, #460]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c7e:	f023 0304 	bic.w	r3, r3, #4
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
 8004c84:	e01c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5e0>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b05      	cmp	r3, #5
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x5c8>
 8004c8e:	4b6f      	ldr	r3, [pc, #444]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	4a6e      	ldr	r2, [pc, #440]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a6b      	ldr	r2, [pc, #428]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x5e0>
 8004ca8:	4b68      	ldr	r3, [pc, #416]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a67      	ldr	r2, [pc, #412]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb4:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a64      	ldr	r2, [pc, #400]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004cba:	f023 0304 	bic.w	r3, r3, #4
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd fe30 	bl	800292c <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fd fe2c 	bl	800292c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e14e      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce6:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ee      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x5f0>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fd fe1a 	bl	800292c <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fe16 	bl	800292c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e138      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d12:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ee      	bne.n	8004cfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 812d 	beq.w	8004f82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d28:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d30:	2b18      	cmp	r3, #24
 8004d32:	f000 80bd 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	f040 809e 	bne.w	8004e7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b42      	ldr	r3, [pc, #264]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a41      	ldr	r2, [pc, #260]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fd fdee 	bl	800292c <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fdea 	bl	800292c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e10e      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCC_OscConfig+0x774>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	430a      	orrs	r2, r1
 8004d86:	4931      	ldr	r1, [pc, #196]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	3b01      	subs	r3, #1
 8004d92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	3b01      	subs	r3, #1
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	3b01      	subs	r3, #1
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dbc:	4923      	ldr	r1, [pc, #140]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004dc2:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dce:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCC_OscConfig+0x778>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dda:	00d2      	lsls	r2, r2, #3
 8004ddc:	491b      	ldr	r1, [pc, #108]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f023 020c 	bic.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	4917      	ldr	r1, [pc, #92]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004df4:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f023 0202 	bic.w	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	4912      	ldr	r1, [pc, #72]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a0d      	ldr	r2, [pc, #52]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_RCC_OscConfig+0x76c>)
 8004e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fd fd73 	bl	800292c <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e48:	e011      	b.n	8004e6e <HAL_RCC_OscConfig+0x78e>
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	58024800 	.word	0x58024800
 8004e54:	fffffc0c 	.word	0xfffffc0c
 8004e58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fd66 	bl	800292c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e08a      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x77c>
 8004e7a:	e082      	b.n	8004f82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fd fd50 	bl	800292c <HAL_GetTick>
 8004e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fd fd4c 	bl	800292c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e070      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea2:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x7b0>
 8004eae:	e068      	b.n	8004f82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004eb0:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004eb6:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d031      	beq.n	8004f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d12a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d122      	bne.n	8004f28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	0a5b      	lsrs	r3, r3, #9
 8004ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d111      	bne.n	8004f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0c1b      	lsrs	r3, r3, #16
 8004f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d108      	bne.n	8004f28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02b      	b.n	8004f84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	08db      	lsrs	r3, r3, #3
 8004f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d01f      	beq.n	8004f82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f4e:	f7fd fced 	bl	800292c <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f54:	bf00      	nop
 8004f56:	f7fd fce9 	bl	800292c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d0f9      	beq.n	8004f56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCC_OscConfig+0x8b0>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f6e:	00d2      	lsls	r2, r2, #3
 8004f70:	4906      	ldr	r1, [pc, #24]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_RCC_OscConfig+0x8ac>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	; 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	ffff0007 	.word	0xffff0007

08004f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e19c      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b8a      	ldr	r3, [pc, #552]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d910      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b87      	ldr	r3, [pc, #540]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 020f 	bic.w	r2, r3, #15
 8004fbe:	4985      	ldr	r1, [pc, #532]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b83      	ldr	r3, [pc, #524]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e184      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	4b7b      	ldr	r3, [pc, #492]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d908      	bls.n	8005006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ff4:	4b78      	ldr	r3, [pc, #480]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4975      	ldr	r1, [pc, #468]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005002:	4313      	orrs	r3, r2
 8005004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d010      	beq.n	8005034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	4b70      	ldr	r3, [pc, #448]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800501e:	429a      	cmp	r2, r3
 8005020:	d908      	bls.n	8005034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005022:	4b6d      	ldr	r3, [pc, #436]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	496a      	ldr	r1, [pc, #424]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005030:	4313      	orrs	r3, r2
 8005032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	4b64      	ldr	r3, [pc, #400]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800504c:	429a      	cmp	r2, r3
 800504e:	d908      	bls.n	8005062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005050:	4b61      	ldr	r3, [pc, #388]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	495e      	ldr	r1, [pc, #376]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 800505e:	4313      	orrs	r3, r2
 8005060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800507a:	429a      	cmp	r2, r3
 800507c:	d908      	bls.n	8005090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4953      	ldr	r1, [pc, #332]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 800508c:	4313      	orrs	r3, r2
 800508e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	4b4d      	ldr	r3, [pc, #308]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d908      	bls.n	80050be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b4a      	ldr	r3, [pc, #296]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f023 020f 	bic.w	r2, r3, #15
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4947      	ldr	r1, [pc, #284]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d055      	beq.n	8005176 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050ca:	4b43      	ldr	r3, [pc, #268]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4940      	ldr	r1, [pc, #256]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050e4:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d121      	bne.n	8005134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0f6      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d107      	bne.n	800510c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050fc:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d115      	bne.n	8005134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0ea      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d107      	bne.n	8005124 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005114:	4b30      	ldr	r3, [pc, #192]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e0de      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005124:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0d6      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005134:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f023 0207 	bic.w	r2, r3, #7
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4925      	ldr	r1, [pc, #148]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005146:	f7fd fbf1 	bl	800292c <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514c:	e00a      	b.n	8005164 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514e:	f7fd fbed 	bl	800292c <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	; 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0be      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005164:	4b1c      	ldr	r3, [pc, #112]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	429a      	cmp	r2, r3
 8005174:	d1eb      	bne.n	800514e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d010      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	429a      	cmp	r2, r3
 8005190:	d208      	bcs.n	80051a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f023 020f 	bic.w	r2, r3, #15
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	490e      	ldr	r1, [pc, #56]	; (80051d8 <HAL_RCC_ClockConfig+0x244>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d214      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 020f 	bic.w	r2, r3, #15
 80051ba:	4906      	ldr	r1, [pc, #24]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <HAL_RCC_ClockConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e086      	b.n	80052e2 <HAL_RCC_ClockConfig+0x34e>
 80051d4:	52002000 	.word	0x52002000
 80051d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d208      	bcs.n	800520a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051f8:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	4939      	ldr	r1, [pc, #228]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005206:	4313      	orrs	r3, r2
 8005208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d010      	beq.n	8005238 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005222:	429a      	cmp	r2, r3
 8005224:	d208      	bcs.n	8005238 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005226:	4b31      	ldr	r3, [pc, #196]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	492e      	ldr	r1, [pc, #184]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005234:	4313      	orrs	r3, r2
 8005236:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	4b28      	ldr	r3, [pc, #160]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005250:	429a      	cmp	r2, r3
 8005252:	d208      	bcs.n	8005266 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	4922      	ldr	r1, [pc, #136]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005262:	4313      	orrs	r3, r2
 8005264:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d010      	beq.n	8005294 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800527e:	429a      	cmp	r2, r3
 8005280:	d208      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005282:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4917      	ldr	r1, [pc, #92]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 8005290:	4313      	orrs	r3, r2
 8005292:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005294:	f000 f834 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	4912      	ldr	r1, [pc, #72]	; (80052f0 <HAL_RCC_ClockConfig+0x35c>)
 80052a6:	5ccb      	ldrb	r3, [r1, r3]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <HAL_RCC_ClockConfig+0x358>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <HAL_RCC_ClockConfig+0x35c>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <HAL_RCC_ClockConfig+0x360>)
 80052ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <HAL_RCC_ClockConfig+0x364>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCC_ClockConfig+0x368>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fd fade 	bl	8002898 <HAL_InitTick>
 80052dc:	4603      	mov	r3, r0
 80052de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	58024400 	.word	0x58024400
 80052f0:	08008ee8 	.word	0x08008ee8
 80052f4:	24000008 	.word	0x24000008
 80052f8:	24000004 	.word	0x24000004
 80052fc:	2400000c 	.word	0x2400000c

08005300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005306:	4bb3      	ldr	r3, [pc, #716]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530e:	2b18      	cmp	r3, #24
 8005310:	f200 8155 	bhi.w	80055be <HAL_RCC_GetSysClockFreq+0x2be>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005381 	.word	0x08005381
 8005320:	080055bf 	.word	0x080055bf
 8005324:	080055bf 	.word	0x080055bf
 8005328:	080055bf 	.word	0x080055bf
 800532c:	080055bf 	.word	0x080055bf
 8005330:	080055bf 	.word	0x080055bf
 8005334:	080055bf 	.word	0x080055bf
 8005338:	080055bf 	.word	0x080055bf
 800533c:	080053a7 	.word	0x080053a7
 8005340:	080055bf 	.word	0x080055bf
 8005344:	080055bf 	.word	0x080055bf
 8005348:	080055bf 	.word	0x080055bf
 800534c:	080055bf 	.word	0x080055bf
 8005350:	080055bf 	.word	0x080055bf
 8005354:	080055bf 	.word	0x080055bf
 8005358:	080055bf 	.word	0x080055bf
 800535c:	080053ad 	.word	0x080053ad
 8005360:	080055bf 	.word	0x080055bf
 8005364:	080055bf 	.word	0x080055bf
 8005368:	080055bf 	.word	0x080055bf
 800536c:	080055bf 	.word	0x080055bf
 8005370:	080055bf 	.word	0x080055bf
 8005374:	080055bf 	.word	0x080055bf
 8005378:	080055bf 	.word	0x080055bf
 800537c:	080053b3 	.word	0x080053b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005380:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800538c:	4b91      	ldr	r3, [pc, #580]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	08db      	lsrs	r3, r3, #3
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	4a90      	ldr	r2, [pc, #576]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800539e:	e111      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053a0:	4b8d      	ldr	r3, [pc, #564]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a2:	61bb      	str	r3, [r7, #24]
      break;
 80053a4:	e10e      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053a6:	4b8d      	ldr	r3, [pc, #564]	; (80055dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053a8:	61bb      	str	r3, [r7, #24]
      break;
 80053aa:	e10b      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053ac:	4b8c      	ldr	r3, [pc, #560]	; (80055e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053ae:	61bb      	str	r3, [r7, #24]
      break;
 80053b0:	e108      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053bc:	4b85      	ldr	r3, [pc, #532]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053c8:	4b82      	ldr	r3, [pc, #520]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053d2:	4b80      	ldr	r3, [pc, #512]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	fb02 f303 	mul.w	r3, r2, r3
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80e1 	beq.w	80055b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	f000 8083 	beq.w	8005504 <HAL_RCC_GetSysClockFreq+0x204>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b02      	cmp	r3, #2
 8005402:	f200 80a1 	bhi.w	8005548 <HAL_RCC_GetSysClockFreq+0x248>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x114>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d056      	beq.n	80054c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005412:	e099      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005414:	4b6f      	ldr	r3, [pc, #444]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02d      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005420:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	4a6b      	ldr	r2, [pc, #428]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
 8005430:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b62      	ldr	r3, [pc, #392]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a02 	vldr	s12, [r7, #8]
 800545e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80055e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800547a:	e087      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005486:	eddf 6a58 	vldr	s13, [pc, #352]	; 80055e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548e:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	ed97 6a02 	vldr	s12, [r7, #8]
 80054a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80055e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054be:	e065      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80055ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80054ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d2:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005502:	e043      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80055f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005526:	ed97 6a02 	vldr	s12, [r7, #8]
 800552a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80055e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005546:	e021      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005552:	eddf 6a26 	vldr	s13, [pc, #152]	; 80055ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8005556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556a:	ed97 6a02 	vldr	s12, [r7, #8]
 800556e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80055e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005586:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800558a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	0a5b      	lsrs	r3, r3, #9
 8005592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005596:	3301      	adds	r3, #1
 8005598:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b0:	ee17 3a90 	vmov	r3, s15
 80055b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055b6:	e005      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
      break;
 80055bc:	e002      	b.n	80055c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055be:	4b07      	ldr	r3, [pc, #28]	; (80055dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055c0:	61bb      	str	r3, [r7, #24]
      break;
 80055c2:	bf00      	nop
  }

  return sysclockfreq;
 80055c4:	69bb      	ldr	r3, [r7, #24]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3724      	adds	r7, #36	; 0x24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	03d09000 	.word	0x03d09000
 80055dc:	003d0900 	.word	0x003d0900
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	46000000 	.word	0x46000000
 80055e8:	4c742400 	.word	0x4c742400
 80055ec:	4a742400 	.word	0x4a742400
 80055f0:	4bb71b00 	.word	0x4bb71b00

080055f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f8:	b0ca      	sub	sp, #296	; 0x128
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005618:	2500      	movs	r5, #0
 800561a:	ea54 0305 	orrs.w	r3, r4, r5
 800561e:	d049      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800562a:	d02f      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800562c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005630:	d828      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005636:	d01a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563c:	d822      	bhi.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005646:	d007      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005648:	e01c      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564a:	4bb8      	ldr	r3, [pc, #736]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4ab7      	ldr	r2, [pc, #732]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005656:	e01a      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565c:	3308      	adds	r3, #8
 800565e:	2102      	movs	r1, #2
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f9d1 	bl	8006a08 <RCCEx_PLL2_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800566c:	e00f      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005672:	3328      	adds	r3, #40	; 0x28
 8005674:	2102      	movs	r1, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fa78 	bl	8006b6c <RCCEx_PLL3_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005682:	e004      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800568a:	e000      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800568c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005696:	4ba5      	ldr	r3, [pc, #660]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a4:	4aa1      	ldr	r2, [pc, #644]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	6513      	str	r3, [r2, #80]	; 0x50
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80056c0:	f04f 0900 	mov.w	r9, #0
 80056c4:	ea58 0309 	orrs.w	r3, r8, r9
 80056c8:	d047      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d82a      	bhi.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056f1 	.word	0x080056f1
 80056e0:	080056ff 	.word	0x080056ff
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005733 	.word	0x08005733
 80056ec:	08005733 	.word	0x08005733
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b8e      	ldr	r3, [pc, #568]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a8d      	ldr	r2, [pc, #564]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056fc:	e01a      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005702:	3308      	adds	r3, #8
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 f97e 	bl	8006a08 <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005712:	e00f      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005718:	3328      	adds	r3, #40	; 0x28
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fa25 	bl	8006b6c <RCCEx_PLL3_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005728:	e004      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005730:	e000      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800573c:	4b7b      	ldr	r3, [pc, #492]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	f023 0107 	bic.w	r1, r3, #7
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	4a78      	ldr	r2, [pc, #480]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800574c:	430b      	orrs	r3, r1
 800574e:	6513      	str	r3, [r2, #80]	; 0x50
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005766:	f04f 0b00 	mov.w	fp, #0
 800576a:	ea5a 030b 	orrs.w	r3, sl, fp
 800576e:	d04c      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577a:	d030      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800577c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005780:	d829      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005782:	2bc0      	cmp	r3, #192	; 0xc0
 8005784:	d02d      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005786:	2bc0      	cmp	r3, #192	; 0xc0
 8005788:	d825      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d018      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d821      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d007      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800579a:	e01c      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579c:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a62      	ldr	r2, [pc, #392]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057a8:	e01c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ae:	3308      	adds	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 f928 	bl	8006a08 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c4:	3328      	adds	r3, #40	; 0x28
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f9cf 	bl	8006b6c <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057ec:	4b4f      	ldr	r3, [pc, #316]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	4a4c      	ldr	r2, [pc, #304]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005816:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005820:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005824:	460b      	mov	r3, r1
 8005826:	4313      	orrs	r3, r2
 8005828:	d053      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005836:	d035      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800583c:	d82e      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800583e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005842:	d031      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005844:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005848:	d828      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800584a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800584e:	d01a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005854:	d822      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800585a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585e:	d007      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005860:	e01c      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	4a31      	ldr	r2, [pc, #196]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800586e:	e01c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005874:	3308      	adds	r3, #8
 8005876:	2100      	movs	r1, #0
 8005878:	4618      	mov	r0, r3
 800587a:	f001 f8c5 	bl	8006a08 <RCCEx_PLL2_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005884:	e011      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588a:	3328      	adds	r3, #40	; 0x28
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f001 f96c 	bl	8006b6c <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800589a:	e006      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058b2:	4b1e      	ldr	r3, [pc, #120]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6593      	str	r3, [r2, #88]	; 0x58
 80058c8:	e003      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80058de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80058ec:	460b      	mov	r3, r1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	d056      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058fe:	d038      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005904:	d831      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005906:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800590a:	d034      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800590c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005910:	d82b      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005916:	d01d      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800591c:	d825      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005922:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005928:	e01f      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800592a:	bf00      	nop
 800592c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4ba2      	ldr	r3, [pc, #648]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4aa1      	ldr	r2, [pc, #644]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800593c:	e01c      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005942:	3308      	adds	r3, #8
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f85e 	bl	8006a08 <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005952:	e011      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005958:	3328      	adds	r3, #40	; 0x28
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 f905 	bl	8006b6c <RCCEx_PLL3_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005980:	4b8e      	ldr	r3, [pc, #568]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005990:	4a8a      	ldr	r2, [pc, #552]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005992:	430b      	orrs	r3, r1
 8005994:	6593      	str	r3, [r2, #88]	; 0x58
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d03a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	d01f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d819      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d00c      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d815      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d111      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059de:	4b77      	ldr	r3, [pc, #476]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	4a76      	ldr	r2, [pc, #472]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059ea:	e011      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f0:	3308      	adds	r3, #8
 80059f2:	2102      	movs	r1, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f807 	bl	8006a08 <RCCEx_PLL2_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a08:	e002      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e000      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a18:	4b68      	ldr	r3, [pc, #416]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a26:	4a65      	ldr	r2, [pc, #404]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a46:	2300      	movs	r3, #0
 8005a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d051      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a60:	d035      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a66:	d82e      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a6c:	d031      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a72:	d828      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	d01a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	d822      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a8a:	e01c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a4a      	ldr	r2, [pc, #296]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a98:	e01c      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 ffb0 	bl	8006a08 <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab4:	3328      	adds	r3, #40	; 0x28
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f857 	bl	8006b6c <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005acc:	e002      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aea:	4a34      	ldr	r2, [pc, #208]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6513      	str	r3, [r2, #80]	; 0x50
 8005af0:	e003      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005af6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d056      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b24:	d033      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b2a:	d82c      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b30:	d02f      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b36:	d826      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b3c:	d02b      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b42:	d820      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b48:	d012      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b4e:	d81a      	bhi.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d022      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b58:	d115      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5e:	3308      	adds	r3, #8
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 ff50 	bl	8006a08 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e015      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b74:	3328      	adds	r3, #40	; 0x28
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fff7 	bl	8006b6c <RCCEx_PLL3_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b84:	e00a      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b8e:	bf00      	nop
 8005b90:	e004      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb2:	4a02      	ldr	r2, [pc, #8]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	6513      	str	r3, [r2, #80]	; 0x50
 8005bb8:	e006      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d055      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bf4:	d033      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bfa:	d82c      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d02f      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c06:	d826      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c0c:	d02b      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c12:	d820      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c18:	d012      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c1e:	d81a      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d022      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c28:	d115      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2101      	movs	r1, #1
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fee8 	bl	8006a08 <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c3e:	e015      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c44:	3328      	adds	r3, #40	; 0x28
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 ff8f 	bl	8006b6c <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c54:	e00a      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c5c:	e006      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c74:	4ba3      	ldr	r3, [pc, #652]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c78:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c84:	4a9f      	ldr	r2, [pc, #636]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6593      	str	r3, [r2, #88]	; 0x58
 8005c8a:	e003      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005caa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d037      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cbe:	d00e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc4:	d816      	bhi.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cce:	d111      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd0:	4b8c      	ldr	r3, [pc, #560]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	4a8b      	ldr	r2, [pc, #556]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cdc:	e00f      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fe8e 	bl	8006a08 <RCCEx_PLL2_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cf2:	e004      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d06:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a7b      	ldr	r2, [pc, #492]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	6513      	str	r3, [r2, #80]	; 0x50
 8005d1a:	e003      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4313      	orrs	r3, r2
 8005d42:	d039      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d81c      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d65 	.word	0x08005d65
 8005d5c:	08005d73 	.word	0x08005d73
 8005d60:	08005d91 	.word	0x08005d91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d64:	4b67      	ldr	r3, [pc, #412]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	4a66      	ldr	r2, [pc, #408]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d70:	e00f      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	3308      	adds	r3, #8
 8005d78:	2102      	movs	r1, #2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fe44 	bl	8006a08 <RCCEx_PLL2_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10a      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d9a:	4b5a      	ldr	r3, [pc, #360]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	f023 0103 	bic.w	r1, r3, #3
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	4a56      	ldr	r2, [pc, #344]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005daa:	430b      	orrs	r3, r1
 8005dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f000 809f 	beq.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dda:	4b4b      	ldr	r3, [pc, #300]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a4a      	ldr	r2, [pc, #296]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005de6:	f7fc fda1 	bl	800292c <HAL_GetTick>
 8005dea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dee:	e00b      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df0:	f7fc fd9c 	bl	800292c <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	; 0x64
 8005dfe:	d903      	bls.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e06:	e005      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ed      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d179      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e1c:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e28:	4053      	eors	r3, r2
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e32:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a30      	ldr	r2, [pc, #192]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a2d      	ldr	r2, [pc, #180]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e56:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d118      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fc fd5e 	bl	800292c <HAL_GetTick>
 8005e70:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e74:	e00d      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fc fd59 	bl	800292c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d903      	bls.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005e90:	e005      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0eb      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d129      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ec8:	091a      	lsrs	r2, r3, #4
 8005eca:	4b10      	ldr	r3, [pc, #64]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6113      	str	r3, [r2, #16]
 8005ed4:	e005      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	4a0a      	ldr	r2, [pc, #40]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005ee0:	6113      	str	r3, [r2, #16]
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	e00e      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005f02:	e009      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f04:	58024400 	.word	0x58024400
 8005f08:	58024800 	.word	0x58024800
 8005f0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 0301 	and.w	r3, r2, #1
 8005f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f000 8089 	beq.w	800604c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f40:	2b28      	cmp	r3, #40	; 0x28
 8005f42:	d86b      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08006025 	.word	0x08006025
 8005f50:	0800601d 	.word	0x0800601d
 8005f54:	0800601d 	.word	0x0800601d
 8005f58:	0800601d 	.word	0x0800601d
 8005f5c:	0800601d 	.word	0x0800601d
 8005f60:	0800601d 	.word	0x0800601d
 8005f64:	0800601d 	.word	0x0800601d
 8005f68:	0800601d 	.word	0x0800601d
 8005f6c:	08005ff1 	.word	0x08005ff1
 8005f70:	0800601d 	.word	0x0800601d
 8005f74:	0800601d 	.word	0x0800601d
 8005f78:	0800601d 	.word	0x0800601d
 8005f7c:	0800601d 	.word	0x0800601d
 8005f80:	0800601d 	.word	0x0800601d
 8005f84:	0800601d 	.word	0x0800601d
 8005f88:	0800601d 	.word	0x0800601d
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	0800601d 	.word	0x0800601d
 8005f94:	0800601d 	.word	0x0800601d
 8005f98:	0800601d 	.word	0x0800601d
 8005f9c:	0800601d 	.word	0x0800601d
 8005fa0:	0800601d 	.word	0x0800601d
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	0800601d 	.word	0x0800601d
 8005fac:	08006025 	.word	0x08006025
 8005fb0:	0800601d 	.word	0x0800601d
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	0800601d 	.word	0x0800601d
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	0800601d 	.word	0x0800601d
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	0800601d 	.word	0x0800601d
 8005fdc:	0800601d 	.word	0x0800601d
 8005fe0:	0800601d 	.word	0x0800601d
 8005fe4:	0800601d 	.word	0x0800601d
 8005fe8:	0800601d 	.word	0x0800601d
 8005fec:	08006025 	.word	0x08006025
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd05 	bl	8006a08 <RCCEx_PLL2_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006004:	e00f      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600a:	3328      	adds	r3, #40	; 0x28
 800600c:	2101      	movs	r1, #1
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fdac 	bl	8006b6c <RCCEx_PLL3_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800601a:	e004      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006022:	e000      	b.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800602e:	4bbf      	ldr	r3, [pc, #764]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603c:	4abb      	ldr	r2, [pc, #748]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800603e:	430b      	orrs	r3, r1
 8006040:	6553      	str	r3, [r2, #84]	; 0x54
 8006042:	e003      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006048:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	f002 0302 	and.w	r3, r2, #2
 8006058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800605c:	2300      	movs	r3, #0
 800605e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006062:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006066:	460b      	mov	r3, r1
 8006068:	4313      	orrs	r3, r2
 800606a:	d041      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006072:	2b05      	cmp	r3, #5
 8006074:	d824      	bhi.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060c9 	.word	0x080060c9
 8006080:	08006095 	.word	0x08006095
 8006084:	080060ab 	.word	0x080060ab
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006098:	3308      	adds	r3, #8
 800609a:	2101      	movs	r1, #1
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fcb3 	bl	8006a08 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060a8:	e00f      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ae:	3328      	adds	r3, #40	; 0x28
 80060b0:	2101      	movs	r1, #1
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fd5a 	bl	8006b6c <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060d2:	4b96      	ldr	r3, [pc, #600]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f023 0107 	bic.w	r1, r3, #7
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e0:	4a92      	ldr	r2, [pc, #584]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6553      	str	r3, [r2, #84]	; 0x54
 80060e6:	e003      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f002 0304 	and.w	r3, r2, #4
 80060fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006106:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d044      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006118:	2b05      	cmp	r3, #5
 800611a:	d825      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006171 	.word	0x08006171
 8006128:	0800613d 	.word	0x0800613d
 800612c:	08006153 	.word	0x08006153
 8006130:	08006171 	.word	0x08006171
 8006134:	08006171 	.word	0x08006171
 8006138:	08006171 	.word	0x08006171
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006140:	3308      	adds	r3, #8
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fc5f 	bl	8006a08 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006150:	e00f      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006156:	3328      	adds	r3, #40	; 0x28
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fd06 	bl	8006b6c <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800617a:	4b6c      	ldr	r3, [pc, #432]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f023 0107 	bic.w	r1, r3, #7
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800618a:	4a68      	ldr	r2, [pc, #416]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800618c:	430b      	orrs	r3, r1
 800618e:	6593      	str	r3, [r2, #88]	; 0x58
 8006190:	e003      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006196:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f002 0320 	and.w	r3, r2, #32
 80061a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061aa:	2300      	movs	r3, #0
 80061ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061b4:	460b      	mov	r3, r1
 80061b6:	4313      	orrs	r3, r2
 80061b8:	d055      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061c6:	d033      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061cc:	d82c      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d02f      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d826      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061de:	d02b      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061e4:	d820      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d012      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f0:	d81a      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d022      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061fa:	d115      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	3308      	adds	r3, #8
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fbff 	bl	8006a08 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006210:	e015      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006216:	3328      	adds	r3, #40	; 0x28
 8006218:	2102      	movs	r1, #2
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fca6 	bl	8006b6c <RCCEx_PLL3_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006226:	e00a      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800622e:	e006      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006230:	bf00      	nop
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006234:	bf00      	nop
 8006236:	e002      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006238:	bf00      	nop
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006246:	4b39      	ldr	r3, [pc, #228]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	4a35      	ldr	r2, [pc, #212]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6553      	str	r3, [r2, #84]	; 0x54
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006276:	2300      	movs	r3, #0
 8006278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800627c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006280:	460b      	mov	r3, r1
 8006282:	4313      	orrs	r3, r2
 8006284:	d058      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800628e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006292:	d033      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006294:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006298:	d82c      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	d02f      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a4:	d826      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062aa:	d02b      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b0:	d820      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b6:	d012      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062bc:	d81a      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d022      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d115      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062cc:	3308      	adds	r3, #8
 80062ce:	2100      	movs	r1, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fb99 	bl	8006a08 <RCCEx_PLL2_Config>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062dc:	e015      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e2:	3328      	adds	r3, #40	; 0x28
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fc40 	bl	8006b6c <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062f2:	e00a      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062fa:	e006      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062fc:	bf00      	nop
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10e      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006316:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006322:	4a02      	ldr	r2, [pc, #8]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006324:	430b      	orrs	r3, r1
 8006326:	6593      	str	r3, [r2, #88]	; 0x58
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800632a:	bf00      	nop
 800632c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006334:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800634e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d055      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006360:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006364:	d033      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006366:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800636a:	d82c      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d02f      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006376:	d826      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006378:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800637c:	d02b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800637e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006382:	d820      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006388:	d012      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d81a      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d022      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006398:	d115      	bne.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	3308      	adds	r3, #8
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fb30 	bl	8006a08 <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063ae:	e015      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b4:	3328      	adds	r3, #40	; 0x28
 80063b6:	2102      	movs	r1, #2
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fbd7 	bl	8006b6c <RCCEx_PLL3_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063c4:	e00a      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063cc:	e006      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ce:	bf00      	nop
 80063d0:	e004      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063d2:	bf00      	nop
 80063d4:	e002      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063e4:	4ba1      	ldr	r3, [pc, #644]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063f4:	4a9d      	ldr	r2, [pc, #628]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	6593      	str	r3, [r2, #88]	; 0x58
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f002 0308 	and.w	r3, r2, #8
 8006410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800641a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800641e:	460b      	mov	r3, r1
 8006420:	4313      	orrs	r3, r2
 8006422:	d01e      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006430:	d10c      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	3328      	adds	r3, #40	; 0x28
 8006438:	2102      	movs	r1, #2
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fb96 	bl	8006b6c <RCCEx_PLL3_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800644c:	4b87      	ldr	r3, [pc, #540]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645c:	4a83      	ldr	r2, [pc, #524]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645e:	430b      	orrs	r3, r1
 8006460:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f002 0310 	and.w	r3, r2, #16
 800646e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006478:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800647c:	460b      	mov	r3, r1
 800647e:	4313      	orrs	r3, r2
 8006480:	d01e      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800648a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648e:	d10c      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006494:	3328      	adds	r3, #40	; 0x28
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fb67 	bl	8006b6c <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064aa:	4b70      	ldr	r3, [pc, #448]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064ba:	4a6c      	ldr	r2, [pc, #432]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064bc:	430b      	orrs	r3, r1
 80064be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80064cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d03e      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ec:	d022      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f2:	d81b      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fc:	d00b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064fe:	e015      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006504:	3308      	adds	r3, #8
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fa7d 	bl	8006a08 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	3328      	adds	r3, #40	; 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fb24 	bl	8006b6c <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800653e:	4b4b      	ldr	r3, [pc, #300]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006542:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800654e:	4a47      	ldr	r2, [pc, #284]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006550:	430b      	orrs	r3, r1
 8006552:	6593      	str	r3, [r2, #88]	; 0x58
 8006554:	e003      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800655a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800656a:	67bb      	str	r3, [r7, #120]	; 0x78
 800656c:	2300      	movs	r3, #0
 800656e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006570:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800657a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006586:	d01f      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006588:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800658c:	d818      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006592:	d003      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006598:	d007      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800659a:	e011      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	4a32      	ldr	r2, [pc, #200]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065a8:	e00f      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ae:	3328      	adds	r3, #40	; 0x28
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fada 	bl	8006b6c <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065be:	e004      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	4a22      	ldr	r2, [pc, #136]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6553      	str	r3, [r2, #84]	; 0x54
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80065fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006600:	2300      	movs	r3, #0
 8006602:	677b      	str	r3, [r7, #116]	; 0x74
 8006604:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d034      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661c:	d007      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800661e:	e011      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a11      	ldr	r2, [pc, #68]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800662c:	e00e      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006632:	3308      	adds	r3, #8
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f9e6 	bl	8006a08 <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006642:	e003      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800664a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10d      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	4a02      	ldr	r2, [pc, #8]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006664:	430b      	orrs	r3, r1
 8006666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006668:	e006      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006684:	66bb      	str	r3, [r7, #104]	; 0x68
 8006686:	2300      	movs	r3, #0
 8006688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800668a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d00c      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006698:	3328      	adds	r3, #40	; 0x28
 800669a:	2102      	movs	r1, #2
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fa65 	bl	8006b6c <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80066ba:	663b      	str	r3, [r7, #96]	; 0x60
 80066bc:	2300      	movs	r3, #0
 80066be:	667b      	str	r3, [r7, #100]	; 0x64
 80066c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d038      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d6:	d018      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066dc:	d811      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d014      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e8:	d80b      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d011      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f2:	d106      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4bc3      	ldr	r3, [pc, #780]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4ac2      	ldr	r2, [pc, #776]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006700:	e008      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006708:	e004      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800671c:	4bb9      	ldr	r3, [pc, #740]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672c:	4ab5      	ldr	r2, [pc, #724]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800672e:	430b      	orrs	r3, r1
 8006730:	6553      	str	r3, [r2, #84]	; 0x54
 8006732:	e003      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006744:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006748:	65bb      	str	r3, [r7, #88]	; 0x58
 800674a:	2300      	movs	r3, #0
 800674c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006752:	460b      	mov	r3, r1
 8006754:	4313      	orrs	r3, r2
 8006756:	d009      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006758:	4baa      	ldr	r3, [pc, #680]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800675a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006766:	4aa7      	ldr	r2, [pc, #668]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006778:	653b      	str	r3, [r7, #80]	; 0x50
 800677a:	2300      	movs	r3, #0
 800677c:	657b      	str	r3, [r7, #84]	; 0x54
 800677e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006788:	4b9e      	ldr	r3, [pc, #632]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006794:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006798:	4a9a      	ldr	r2, [pc, #616]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800679a:	430b      	orrs	r3, r1
 800679c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ac:	2300      	movs	r3, #0
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ba:	4b92      	ldr	r3, [pc, #584]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067c8:	4a8e      	ldr	r2, [pc, #568]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80067da:	643b      	str	r3, [r7, #64]	; 0x40
 80067dc:	2300      	movs	r3, #0
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
 80067e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067ea:	4b86      	ldr	r3, [pc, #536]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	4a85      	ldr	r2, [pc, #532]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f4:	6113      	str	r3, [r2, #16]
 80067f6:	4b83      	ldr	r3, [pc, #524]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f8:	6919      	ldr	r1, [r3, #16]
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006802:	4a80      	ldr	r2, [pc, #512]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006804:	430b      	orrs	r3, r1
 8006806:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006824:	4b77      	ldr	r3, [pc, #476]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006828:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006832:	4a74      	ldr	r2, [pc, #464]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006834:	430b      	orrs	r3, r1
 8006836:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006844:	633b      	str	r3, [r7, #48]	; 0x30
 8006846:	2300      	movs	r3, #0
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
 800684a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006854:	4b6b      	ldr	r3, [pc, #428]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006858:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800685c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006864:	4a67      	ldr	r2, [pc, #412]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006866:	430b      	orrs	r3, r1
 8006868:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	2100      	movs	r1, #0
 8006874:	62b9      	str	r1, [r7, #40]	; 0x28
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800687c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d011      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688a:	3308      	adds	r3, #8
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f8ba 	bl	8006a08 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	2100      	movs	r1, #0
 80068b4:	6239      	str	r1, [r7, #32]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d011      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f89a 	bl	8006a08 <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	2100      	movs	r1, #0
 80068f4:	61b9      	str	r1, [r7, #24]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d011      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800690a:	3308      	adds	r3, #8
 800690c:	2102      	movs	r1, #2
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f87a 	bl	8006a08 <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	2100      	movs	r1, #0
 8006934:	6139      	str	r1, [r7, #16]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d011      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694a:	3328      	adds	r3, #40	; 0x28
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f90c 	bl	8006b6c <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	2100      	movs	r1, #0
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d011      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698a:	3328      	adds	r3, #40	; 0x28
 800698c:	2101      	movs	r1, #1
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f8ec 	bl	8006b6c <RCCEx_PLL3_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800699a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	2100      	movs	r1, #0
 80069b4:	6039      	str	r1, [r7, #0]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069c0:	460b      	mov	r3, r1
 80069c2:	4313      	orrs	r3, r2
 80069c4:	d011      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ca:	3328      	adds	r3, #40	; 0x28
 80069cc:	2102      	movs	r1, #2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f8cc 	bl	8006b6c <RCCEx_PLL3_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80069ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a04:	58024400 	.word	0x58024400

08006a08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a16:	4b53      	ldr	r3, [pc, #332]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d101      	bne.n	8006a26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e099      	b.n	8006b5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a26:	4b4f      	ldr	r3, [pc, #316]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a4e      	ldr	r2, [pc, #312]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a32:	f7fb ff7b 	bl	800292c <HAL_GetTick>
 8006a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a38:	e008      	b.n	8006a4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a3a:	f7fb ff77 	bl	800292c <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e086      	b.n	8006b5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a4c:	4b45      	ldr	r3, [pc, #276]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a58:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	031b      	lsls	r3, r3, #12
 8006a66:	493f      	ldr	r1, [pc, #252]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	025b      	lsls	r3, r3, #9
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	041b      	lsls	r3, r3, #16
 8006a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	061b      	lsls	r3, r3, #24
 8006a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a9c:	4931      	ldr	r1, [pc, #196]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006aa2:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	492d      	ldr	r1, [pc, #180]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ab4:	4b2b      	ldr	r3, [pc, #172]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	f023 0220 	bic.w	r2, r3, #32
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	4928      	ldr	r1, [pc, #160]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ac6:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ad2:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ad6:	4b24      	ldr	r3, [pc, #144]	; (8006b68 <RCCEx_PLL2_Config+0x160>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	69d2      	ldr	r2, [r2, #28]
 8006ade:	00d2      	lsls	r2, r2, #3
 8006ae0:	4920      	ldr	r1, [pc, #128]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ae6:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	4a1e      	ldr	r2, [pc, #120]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006aec:	f043 0310 	orr.w	r3, r3, #16
 8006af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006af8:	4b1a      	ldr	r3, [pc, #104]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b04:	e00f      	b.n	8006b26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d106      	bne.n	8006b1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b0c:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b18:	e005      	b.n	8006b26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	4a11      	ldr	r2, [pc, #68]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b26:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a0e      	ldr	r2, [pc, #56]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b32:	f7fb fefb 	bl	800292c <HAL_GetTick>
 8006b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b38:	e008      	b.n	8006b4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b3a:	f7fb fef7 	bl	800292c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e006      	b.n	8006b5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <RCCEx_PLL2_Config+0x15c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58024400 	.word	0x58024400
 8006b68:	ffff0007 	.word	0xffff0007

08006b6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b7a:	4b53      	ldr	r3, [pc, #332]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d101      	bne.n	8006b8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e099      	b.n	8006cbe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b8a:	4b4f      	ldr	r3, [pc, #316]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a4e      	ldr	r2, [pc, #312]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b96:	f7fb fec9 	bl	800292c <HAL_GetTick>
 8006b9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b9c:	e008      	b.n	8006bb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b9e:	f7fb fec5 	bl	800292c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e086      	b.n	8006cbe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bb0:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f0      	bne.n	8006b9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006bbc:	4b42      	ldr	r3, [pc, #264]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	051b      	lsls	r3, r3, #20
 8006bca:	493f      	ldr	r1, [pc, #252]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	628b      	str	r3, [r1, #40]	; 0x28
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	025b      	lsls	r3, r3, #9
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	041b      	lsls	r3, r3, #16
 8006bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c00:	4931      	ldr	r1, [pc, #196]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c06:	4b30      	ldr	r3, [pc, #192]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	492d      	ldr	r1, [pc, #180]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c18:	4b2b      	ldr	r3, [pc, #172]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	4928      	ldr	r1, [pc, #160]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	4a26      	ldr	r2, [pc, #152]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <RCCEx_PLL3_Config+0x160>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	69d2      	ldr	r2, [r2, #28]
 8006c42:	00d2      	lsls	r2, r2, #3
 8006c44:	4920      	ldr	r1, [pc, #128]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c4a:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c68:	e00f      	b.n	8006c8a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d106      	bne.n	8006c7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c70:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c7c:	e005      	b.n	8006c8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	4a11      	ldr	r2, [pc, #68]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a0e      	ldr	r2, [pc, #56]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c96:	f7fb fe49 	bl	800292c <HAL_GetTick>
 8006c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c9c:	e008      	b.n	8006cb0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c9e:	f7fb fe45 	bl	800292c <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e006      	b.n	8006cbe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <RCCEx_PLL3_Config+0x15c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	ffff0007 	.word	0xffff0007

08006cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e049      	b.n	8006d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb f92e 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fd5a 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e054      	b.n	8006e42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d022      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d01d      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d018      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1f      	ldr	r2, [pc, #124]	; (8006e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00e      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_TIM_Base_Start_IT+0xe0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d009      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <HAL_TIM_Base_Start_IT+0xe4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d004      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_TIM_Base_Start_IT+0xe8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d115      	bne.n	8006e2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_TIM_Base_Start_IT+0xec>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d015      	beq.n	8006e3e <HAL_TIM_Base_Start_IT+0xbe>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d011      	beq.n	8006e3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	e008      	b.n	8006e3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e000      	b.n	8006e40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00
 8006e60:	40010400 	.word	0x40010400
 8006e64:	40001800 	.word	0x40001800
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	00010007 	.word	0x00010007

08006e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e049      	b.n	8006f16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f841 	bl	8006f1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f000 fc8a 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_TIM_PWM_Start+0x24>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	e03c      	b.n	8006fd2 <HAL_TIM_PWM_Start+0x9e>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d109      	bne.n	8006f72 <HAL_TIM_PWM_Start+0x3e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	bf14      	ite	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	2300      	moveq	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e02f      	b.n	8006fd2 <HAL_TIM_PWM_Start+0x9e>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d109      	bne.n	8006f8c <HAL_TIM_PWM_Start+0x58>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	bf14      	ite	ne
 8006f84:	2301      	movne	r3, #1
 8006f86:	2300      	moveq	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e022      	b.n	8006fd2 <HAL_TIM_PWM_Start+0x9e>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b0c      	cmp	r3, #12
 8006f90:	d109      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0x72>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	bf14      	ite	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	2300      	moveq	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e015      	b.n	8006fd2 <HAL_TIM_PWM_Start+0x9e>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b10      	cmp	r3, #16
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIM_PWM_Start+0x8c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e008      	b.n	8006fd2 <HAL_TIM_PWM_Start+0x9e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0a1      	b.n	800711e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_PWM_Start+0xb6>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe8:	e023      	b.n	8007032 <HAL_TIM_PWM_Start+0xfe>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start+0xc6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff8:	e01b      	b.n	8007032 <HAL_TIM_PWM_Start+0xfe>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0xd6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007008:	e013      	b.n	8007032 <HAL_TIM_PWM_Start+0xfe>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0xe6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007018:	e00b      	b.n	8007032 <HAL_TIM_PWM_Start+0xfe>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b10      	cmp	r3, #16
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xf6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007028:	e003      	b.n	8007032 <HAL_TIM_PWM_Start+0xfe>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ffde 	bl	8007ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a38      	ldr	r2, [pc, #224]	; (8007128 <HAL_TIM_PWM_Start+0x1f4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <HAL_TIM_PWM_Start+0x13e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a37      	ldr	r2, [pc, #220]	; (800712c <HAL_TIM_PWM_Start+0x1f8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_TIM_PWM_Start+0x13e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a35      	ldr	r2, [pc, #212]	; (8007130 <HAL_TIM_PWM_Start+0x1fc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_TIM_PWM_Start+0x13e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a34      	ldr	r2, [pc, #208]	; (8007134 <HAL_TIM_PWM_Start+0x200>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIM_PWM_Start+0x13e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a32      	ldr	r2, [pc, #200]	; (8007138 <HAL_TIM_PWM_Start+0x204>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d101      	bne.n	8007076 <HAL_TIM_PWM_Start+0x142>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <HAL_TIM_PWM_Start+0x144>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800708a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a25      	ldr	r2, [pc, #148]	; (8007128 <HAL_TIM_PWM_Start+0x1f4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d01d      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a25      	ldr	r2, [pc, #148]	; (800713c <HAL_TIM_PWM_Start+0x208>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a24      	ldr	r2, [pc, #144]	; (8007140 <HAL_TIM_PWM_Start+0x20c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a22      	ldr	r2, [pc, #136]	; (8007144 <HAL_TIM_PWM_Start+0x210>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1a      	ldr	r2, [pc, #104]	; (800712c <HAL_TIM_PWM_Start+0x1f8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <HAL_TIM_PWM_Start+0x214>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_TIM_PWM_Start+0x1a8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIM_PWM_Start+0x1fc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d115      	bne.n	8007108 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	4b1a      	ldr	r3, [pc, #104]	; (800714c <HAL_TIM_PWM_Start+0x218>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d015      	beq.n	800711a <HAL_TIM_PWM_Start+0x1e6>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f4:	d011      	beq.n	800711a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007106:	e008      	b.n	800711a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0201 	orr.w	r2, r2, #1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e000      	b.n	800711c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40010000 	.word	0x40010000
 800712c:	40010400 	.word	0x40010400
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40001800 	.word	0x40001800
 800714c:	00010007 	.word	0x00010007

08007150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d020      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01b      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0202 	mvn.w	r2, #2
 8007184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d003      	beq.n	80071a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 faf6 	bl	800778c <HAL_TIM_IC_CaptureCallback>
 80071a0:	e005      	b.n	80071ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fae8 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 faf9 	bl	80077a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d020      	beq.n	8007200 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01b      	beq.n	8007200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0204 	mvn.w	r2, #4
 80071d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fad0 	bl	800778c <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fac2 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fad3 	bl	80077a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d020      	beq.n	800724c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0208 	mvn.w	r2, #8
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2204      	movs	r2, #4
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 faaa 	bl	800778c <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa9c 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 faad 	bl	80077a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	d020      	beq.n	8007298 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0210 	mvn.w	r2, #16
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2208      	movs	r2, #8
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa84 	bl	800778c <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa76 	bl	8007778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa87 	bl	80077a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0201 	mvn.w	r2, #1
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fa fa7a 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00c      	beq.n	80072ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80072e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ffc5 	bl	8008274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00c      	beq.n	800730e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ffbd 	bl	8008288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800732a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa41 	bl	80077b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00c      	beq.n	8007356 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f06f 0220 	mvn.w	r2, #32
 800734e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 ff85 	bl	8008260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800737a:	2302      	movs	r3, #2
 800737c:	e0ff      	b.n	800757e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b14      	cmp	r3, #20
 800738a:	f200 80f0 	bhi.w	800756e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073e9 	.word	0x080073e9
 8007398:	0800756f 	.word	0x0800756f
 800739c:	0800756f 	.word	0x0800756f
 80073a0:	0800756f 	.word	0x0800756f
 80073a4:	08007429 	.word	0x08007429
 80073a8:	0800756f 	.word	0x0800756f
 80073ac:	0800756f 	.word	0x0800756f
 80073b0:	0800756f 	.word	0x0800756f
 80073b4:	0800746b 	.word	0x0800746b
 80073b8:	0800756f 	.word	0x0800756f
 80073bc:	0800756f 	.word	0x0800756f
 80073c0:	0800756f 	.word	0x0800756f
 80073c4:	080074ab 	.word	0x080074ab
 80073c8:	0800756f 	.word	0x0800756f
 80073cc:	0800756f 	.word	0x0800756f
 80073d0:	0800756f 	.word	0x0800756f
 80073d4:	080074ed 	.word	0x080074ed
 80073d8:	0800756f 	.word	0x0800756f
 80073dc:	0800756f 	.word	0x0800756f
 80073e0:	0800756f 	.word	0x0800756f
 80073e4:	0800752d 	.word	0x0800752d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fa90 	bl	8007914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0208 	orr.w	r2, r2, #8
 8007402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0204 	bic.w	r2, r2, #4
 8007412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6999      	ldr	r1, [r3, #24]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	619a      	str	r2, [r3, #24]
      break;
 8007426:	e0a5      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fb00 	bl	8007a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6999      	ldr	r1, [r3, #24]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	021a      	lsls	r2, r3, #8
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	619a      	str	r2, [r3, #24]
      break;
 8007468:	e084      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fb69 	bl	8007b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0208 	orr.w	r2, r2, #8
 8007484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0204 	bic.w	r2, r2, #4
 8007494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69d9      	ldr	r1, [r3, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	61da      	str	r2, [r3, #28]
      break;
 80074a8:	e064      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fbd1 	bl	8007c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69d9      	ldr	r1, [r3, #28]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	021a      	lsls	r2, r3, #8
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	61da      	str	r2, [r3, #28]
      break;
 80074ea:	e043      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fc1a 	bl	8007d2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0208 	orr.w	r2, r2, #8
 8007506:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0204 	bic.w	r2, r2, #4
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800752a:	e023      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fc5e 	bl	8007df4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	021a      	lsls	r2, r3, #8
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800756c:	e002      	b.n	8007574 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
      break;
 8007572:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop

08007588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIM_ConfigClockSource+0x1c>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0dc      	b.n	800775e <HAL_TIM_ConfigClockSource+0x1d6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4b6a      	ldr	r3, [pc, #424]	; (8007768 <HAL_TIM_ConfigClockSource+0x1e0>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a64      	ldr	r2, [pc, #400]	; (800776c <HAL_TIM_ConfigClockSource+0x1e4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	f000 80a9 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 80075e0:	4a62      	ldr	r2, [pc, #392]	; (800776c <HAL_TIM_ConfigClockSource+0x1e4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	f200 80ae 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 80075e8:	4a61      	ldr	r2, [pc, #388]	; (8007770 <HAL_TIM_ConfigClockSource+0x1e8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	f000 80a1 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 80075f0:	4a5f      	ldr	r2, [pc, #380]	; (8007770 <HAL_TIM_ConfigClockSource+0x1e8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	f200 80a6 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 80075f8:	4a5e      	ldr	r2, [pc, #376]	; (8007774 <HAL_TIM_ConfigClockSource+0x1ec>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f000 8099 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007600:	4a5c      	ldr	r2, [pc, #368]	; (8007774 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007602:	4293      	cmp	r3, r2
 8007604:	f200 809e 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007608:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800760c:	f000 8091 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007610:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007614:	f200 8096 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761c:	f000 8089 	beq.w	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007624:	f200 808e 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d03e      	beq.n	80076ac <HAL_TIM_ConfigClockSource+0x124>
 800762e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007632:	f200 8087 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763a:	f000 8086 	beq.w	800774a <HAL_TIM_ConfigClockSource+0x1c2>
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d87f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007644:	2b70      	cmp	r3, #112	; 0x70
 8007646:	d01a      	beq.n	800767e <HAL_TIM_ConfigClockSource+0xf6>
 8007648:	2b70      	cmp	r3, #112	; 0x70
 800764a:	d87b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 800764c:	2b60      	cmp	r3, #96	; 0x60
 800764e:	d050      	beq.n	80076f2 <HAL_TIM_ConfigClockSource+0x16a>
 8007650:	2b60      	cmp	r3, #96	; 0x60
 8007652:	d877      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007654:	2b50      	cmp	r3, #80	; 0x50
 8007656:	d03c      	beq.n	80076d2 <HAL_TIM_ConfigClockSource+0x14a>
 8007658:	2b50      	cmp	r3, #80	; 0x50
 800765a:	d873      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d058      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0x18a>
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d86f      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007664:	2b30      	cmp	r3, #48	; 0x30
 8007666:	d064      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007668:	2b30      	cmp	r3, #48	; 0x30
 800766a:	d86b      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 800766c:	2b20      	cmp	r3, #32
 800766e:	d060      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007670:	2b20      	cmp	r3, #32
 8007672:	d867      	bhi.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05c      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 8007678:	2b10      	cmp	r3, #16
 800767a:	d05a      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x1aa>
 800767c:	e062      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800768e:	f000 fc95 	bl	8007fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	609a      	str	r2, [r3, #8]
      break;
 80076aa:	e04f      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076bc:	f000 fc7e 	bl	8007fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ce:	609a      	str	r2, [r3, #8]
      break;
 80076d0:	e03c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076de:	461a      	mov	r2, r3
 80076e0:	f000 fbee 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2150      	movs	r1, #80	; 0x50
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fc48 	bl	8007f80 <TIM_ITRx_SetConfig>
      break;
 80076f0:	e02c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076fe:	461a      	mov	r2, r3
 8007700:	f000 fc0d 	bl	8007f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2160      	movs	r1, #96	; 0x60
 800770a:	4618      	mov	r0, r3
 800770c:	f000 fc38 	bl	8007f80 <TIM_ITRx_SetConfig>
      break;
 8007710:	e01c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	461a      	mov	r2, r3
 8007720:	f000 fbce 	bl	8007ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2140      	movs	r1, #64	; 0x40
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fc28 	bl	8007f80 <TIM_ITRx_SetConfig>
      break;
 8007730:	e00c      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f000 fc1f 	bl	8007f80 <TIM_ITRx_SetConfig>
      break;
 8007742:	e003      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e000      	b.n	800774c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800774a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	ffceff88 	.word	0xffceff88
 800776c:	00100040 	.word	0x00100040
 8007770:	00100030 	.word	0x00100030
 8007774:	00100020 	.word	0x00100020

08007778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a46      	ldr	r2, [pc, #280]	; (80078f4 <TIM_Base_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e6:	d00f      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a43      	ldr	r2, [pc, #268]	; (80078f8 <TIM_Base_SetConfig+0x130>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00b      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a42      	ldr	r2, [pc, #264]	; (80078fc <TIM_Base_SetConfig+0x134>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d007      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a41      	ldr	r2, [pc, #260]	; (8007900 <TIM_Base_SetConfig+0x138>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a40      	ldr	r2, [pc, #256]	; (8007904 <TIM_Base_SetConfig+0x13c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d108      	bne.n	800781a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a35      	ldr	r2, [pc, #212]	; (80078f4 <TIM_Base_SetConfig+0x12c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01f      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007828:	d01b      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a32      	ldr	r2, [pc, #200]	; (80078f8 <TIM_Base_SetConfig+0x130>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d017      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a31      	ldr	r2, [pc, #196]	; (80078fc <TIM_Base_SetConfig+0x134>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a30      	ldr	r2, [pc, #192]	; (8007900 <TIM_Base_SetConfig+0x138>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00f      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <TIM_Base_SetConfig+0x13c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00b      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a2e      	ldr	r2, [pc, #184]	; (8007908 <TIM_Base_SetConfig+0x140>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d007      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2d      	ldr	r2, [pc, #180]	; (800790c <TIM_Base_SetConfig+0x144>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d003      	beq.n	8007862 <TIM_Base_SetConfig+0x9a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2c      	ldr	r2, [pc, #176]	; (8007910 <TIM_Base_SetConfig+0x148>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d108      	bne.n	8007874 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <TIM_Base_SetConfig+0x12c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00f      	beq.n	80078c0 <TIM_Base_SetConfig+0xf8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a18      	ldr	r2, [pc, #96]	; (8007904 <TIM_Base_SetConfig+0x13c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_Base_SetConfig+0xf8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <TIM_Base_SetConfig+0x140>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0xf8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a16      	ldr	r2, [pc, #88]	; (800790c <TIM_Base_SetConfig+0x144>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0xf8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a15      	ldr	r2, [pc, #84]	; (8007910 <TIM_Base_SetConfig+0x148>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d105      	bne.n	80078e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]
  }
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f023 0201 	bic.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <TIM_OC1_SetConfig+0x108>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 0302 	bic.w	r3, r3, #2
 800795c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a2d      	ldr	r2, [pc, #180]	; (8007a20 <TIM_OC1_SetConfig+0x10c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <TIM_OC1_SetConfig+0x7c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a2c      	ldr	r2, [pc, #176]	; (8007a24 <TIM_OC1_SetConfig+0x110>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00b      	beq.n	8007990 <TIM_OC1_SetConfig+0x7c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a2b      	ldr	r2, [pc, #172]	; (8007a28 <TIM_OC1_SetConfig+0x114>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <TIM_OC1_SetConfig+0x7c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <TIM_OC1_SetConfig+0x118>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC1_SetConfig+0x7c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a29      	ldr	r2, [pc, #164]	; (8007a30 <TIM_OC1_SetConfig+0x11c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10c      	bne.n	80079aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0308 	bic.w	r3, r3, #8
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f023 0304 	bic.w	r3, r3, #4
 80079a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1c      	ldr	r2, [pc, #112]	; (8007a20 <TIM_OC1_SetConfig+0x10c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00f      	beq.n	80079d2 <TIM_OC1_SetConfig+0xbe>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1b      	ldr	r2, [pc, #108]	; (8007a24 <TIM_OC1_SetConfig+0x110>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00b      	beq.n	80079d2 <TIM_OC1_SetConfig+0xbe>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <TIM_OC1_SetConfig+0x114>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d007      	beq.n	80079d2 <TIM_OC1_SetConfig+0xbe>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a19      	ldr	r2, [pc, #100]	; (8007a2c <TIM_OC1_SetConfig+0x118>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d003      	beq.n	80079d2 <TIM_OC1_SetConfig+0xbe>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a18      	ldr	r2, [pc, #96]	; (8007a30 <TIM_OC1_SetConfig+0x11c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d111      	bne.n	80079f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	621a      	str	r2, [r3, #32]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	fffeff8f 	.word	0xfffeff8f
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400
 8007a28:	40014000 	.word	0x40014000
 8007a2c:	40014400 	.word	0x40014400
 8007a30:	40014800 	.word	0x40014800

08007a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	f023 0210 	bic.w	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <TIM_OC2_SetConfig+0xfc>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 0320 	bic.w	r3, r3, #32
 8007a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <TIM_OC2_SetConfig+0x100>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC2_SetConfig+0x68>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <TIM_OC2_SetConfig+0x104>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10d      	bne.n	8007ab8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <TIM_OC2_SetConfig+0x100>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00f      	beq.n	8007ae0 <TIM_OC2_SetConfig+0xac>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <TIM_OC2_SetConfig+0x104>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00b      	beq.n	8007ae0 <TIM_OC2_SetConfig+0xac>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a1c      	ldr	r2, [pc, #112]	; (8007b3c <TIM_OC2_SetConfig+0x108>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d007      	beq.n	8007ae0 <TIM_OC2_SetConfig+0xac>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <TIM_OC2_SetConfig+0x10c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d003      	beq.n	8007ae0 <TIM_OC2_SetConfig+0xac>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <TIM_OC2_SetConfig+0x110>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d113      	bne.n	8007b08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	feff8fff 	.word	0xfeff8fff
 8007b34:	40010000 	.word	0x40010000
 8007b38:	40010400 	.word	0x40010400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4b33      	ldr	r3, [pc, #204]	; (8007c40 <TIM_OC3_SetConfig+0xf8>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a28      	ldr	r2, [pc, #160]	; (8007c44 <TIM_OC3_SetConfig+0xfc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC3_SetConfig+0x66>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a27      	ldr	r2, [pc, #156]	; (8007c48 <TIM_OC3_SetConfig+0x100>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10d      	bne.n	8007bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <TIM_OC3_SetConfig+0xfc>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00f      	beq.n	8007bf2 <TIM_OC3_SetConfig+0xaa>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1c      	ldr	r2, [pc, #112]	; (8007c48 <TIM_OC3_SetConfig+0x100>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00b      	beq.n	8007bf2 <TIM_OC3_SetConfig+0xaa>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <TIM_OC3_SetConfig+0x104>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <TIM_OC3_SetConfig+0xaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1a      	ldr	r2, [pc, #104]	; (8007c50 <TIM_OC3_SetConfig+0x108>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_OC3_SetConfig+0xaa>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <TIM_OC3_SetConfig+0x10c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d113      	bne.n	8007c1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	621a      	str	r2, [r3, #32]
}
 8007c34:	bf00      	nop
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	fffeff8f 	.word	0xfffeff8f
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	40014400 	.word	0x40014400
 8007c54:	40014800 	.word	0x40014800

08007c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <TIM_OC4_SetConfig+0xbc>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	031b      	lsls	r3, r3, #12
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <TIM_OC4_SetConfig+0xc0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00f      	beq.n	8007cd8 <TIM_OC4_SetConfig+0x80>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <TIM_OC4_SetConfig+0xc4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00b      	beq.n	8007cd8 <TIM_OC4_SetConfig+0x80>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <TIM_OC4_SetConfig+0xc8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d007      	beq.n	8007cd8 <TIM_OC4_SetConfig+0x80>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a16      	ldr	r2, [pc, #88]	; (8007d24 <TIM_OC4_SetConfig+0xcc>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_OC4_SetConfig+0x80>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <TIM_OC4_SetConfig+0xd0>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d109      	bne.n	8007cec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	019b      	lsls	r3, r3, #6
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	621a      	str	r2, [r3, #32]
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	feff8fff 	.word	0xfeff8fff
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40010400 	.word	0x40010400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40014400 	.word	0x40014400
 8007d28:	40014800 	.word	0x40014800

08007d2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4b21      	ldr	r3, [pc, #132]	; (8007ddc <TIM_OC5_SetConfig+0xb0>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <TIM_OC5_SetConfig+0xb4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00f      	beq.n	8007da2 <TIM_OC5_SetConfig+0x76>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <TIM_OC5_SetConfig+0xb8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00b      	beq.n	8007da2 <TIM_OC5_SetConfig+0x76>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a16      	ldr	r2, [pc, #88]	; (8007de8 <TIM_OC5_SetConfig+0xbc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d007      	beq.n	8007da2 <TIM_OC5_SetConfig+0x76>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a15      	ldr	r2, [pc, #84]	; (8007dec <TIM_OC5_SetConfig+0xc0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <TIM_OC5_SetConfig+0x76>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a14      	ldr	r2, [pc, #80]	; (8007df0 <TIM_OC5_SetConfig+0xc4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d109      	bne.n	8007db6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	fffeff8f 	.word	0xfffeff8f
 8007de0:	40010000 	.word	0x40010000
 8007de4:	40010400 	.word	0x40010400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40014400 	.word	0x40014400
 8007df0:	40014800 	.word	0x40014800

08007df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <TIM_OC6_SetConfig+0xb4>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	051b      	lsls	r3, r3, #20
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a19      	ldr	r2, [pc, #100]	; (8007eac <TIM_OC6_SetConfig+0xb8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00f      	beq.n	8007e6c <TIM_OC6_SetConfig+0x78>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <TIM_OC6_SetConfig+0xbc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00b      	beq.n	8007e6c <TIM_OC6_SetConfig+0x78>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <TIM_OC6_SetConfig+0xc0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d007      	beq.n	8007e6c <TIM_OC6_SetConfig+0x78>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <TIM_OC6_SetConfig+0xc4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_OC6_SetConfig+0x78>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <TIM_OC6_SetConfig+0xc8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d109      	bne.n	8007e80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	feff8fff 	.word	0xfeff8fff
 8007eac:	40010000 	.word	0x40010000
 8007eb0:	40010400 	.word	0x40010400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800

08007ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f023 030a 	bic.w	r3, r3, #10
 8007efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b087      	sub	sp, #28
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	031b      	lsls	r3, r3, #12
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	621a      	str	r2, [r3, #32]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <TIM_ITRx_SetConfig+0x38>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f043 0307 	orr.w	r3, r3, #7
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	609a      	str	r2, [r3, #8]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	ffcfff8f 	.word	0xffcfff8f

08007fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	021a      	lsls	r2, r3, #8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 031f 	and.w	r3, r3, #31
 800800e:	2201      	movs	r2, #1
 8008010:	fa02 f303 	lsl.w	r3, r2, r3
 8008014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1a      	ldr	r2, [r3, #32]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	43db      	mvns	r3, r3
 800801e:	401a      	ands	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1a      	ldr	r2, [r3, #32]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 031f 	and.w	r3, r3, #31
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	fa01 f303 	lsl.w	r3, r1, r3
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	bf00      	nop
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
	...

08008048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800805c:	2302      	movs	r3, #2
 800805e:	e06d      	b.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a30      	ldr	r2, [pc, #192]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a2f      	ldr	r2, [pc, #188]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d108      	bne.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800809a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a20      	ldr	r2, [pc, #128]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d2:	d01d      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1d      	ldr	r2, [pc, #116]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1c      	ldr	r2, [pc, #112]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1a      	ldr	r2, [pc, #104]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a15      	ldr	r2, [pc, #84]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a16      	ldr	r2, [pc, #88]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a15      	ldr	r2, [pc, #84]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10c      	bne.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	4313      	orrs	r3, r2
 8008120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	40010000 	.word	0x40010000
 800814c:	40010400 	.word	0x40010400
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40001800 	.word	0x40001800
 8008160:	40014000 	.word	0x40014000

08008164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800817c:	2302      	movs	r3, #2
 800817e:	e065      	b.n	800824c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	041b      	lsls	r3, r3, #16
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a16      	ldr	r2, [pc, #88]	; (8008258 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a14      	ldr	r2, [pc, #80]	; (800825c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d115      	bne.n	800823a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	051b      	lsls	r3, r3, #20
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40010000 	.word	0x40010000
 800825c:	40010400 	.word	0x40010400

08008260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <memset>:
 800829c:	4402      	add	r2, r0
 800829e:	4603      	mov	r3, r0
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d100      	bne.n	80082a6 <memset+0xa>
 80082a4:	4770      	bx	lr
 80082a6:	f803 1b01 	strb.w	r1, [r3], #1
 80082aa:	e7f9      	b.n	80082a0 <memset+0x4>

080082ac <__libc_init_array>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	4d0d      	ldr	r5, [pc, #52]	; (80082e4 <__libc_init_array+0x38>)
 80082b0:	4c0d      	ldr	r4, [pc, #52]	; (80082e8 <__libc_init_array+0x3c>)
 80082b2:	1b64      	subs	r4, r4, r5
 80082b4:	10a4      	asrs	r4, r4, #2
 80082b6:	2600      	movs	r6, #0
 80082b8:	42a6      	cmp	r6, r4
 80082ba:	d109      	bne.n	80082d0 <__libc_init_array+0x24>
 80082bc:	4d0b      	ldr	r5, [pc, #44]	; (80082ec <__libc_init_array+0x40>)
 80082be:	4c0c      	ldr	r4, [pc, #48]	; (80082f0 <__libc_init_array+0x44>)
 80082c0:	f000 fe06 	bl	8008ed0 <_init>
 80082c4:	1b64      	subs	r4, r4, r5
 80082c6:	10a4      	asrs	r4, r4, #2
 80082c8:	2600      	movs	r6, #0
 80082ca:	42a6      	cmp	r6, r4
 80082cc:	d105      	bne.n	80082da <__libc_init_array+0x2e>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d4:	4798      	blx	r3
 80082d6:	3601      	adds	r6, #1
 80082d8:	e7ee      	b.n	80082b8 <__libc_init_array+0xc>
 80082da:	f855 3b04 	ldr.w	r3, [r5], #4
 80082de:	4798      	blx	r3
 80082e0:	3601      	adds	r6, #1
 80082e2:	e7f2      	b.n	80082ca <__libc_init_array+0x1e>
 80082e4:	080090d0 	.word	0x080090d0
 80082e8:	080090d0 	.word	0x080090d0
 80082ec:	080090d0 	.word	0x080090d0
 80082f0:	080090d4 	.word	0x080090d4
 80082f4:	00000000 	.word	0x00000000

080082f8 <sin>:
 80082f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082fa:	eeb0 7b40 	vmov.f64	d7, d0
 80082fe:	ee17 3a90 	vmov	r3, s15
 8008302:	4a21      	ldr	r2, [pc, #132]	; (8008388 <sin+0x90>)
 8008304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008308:	4293      	cmp	r3, r2
 800830a:	dc07      	bgt.n	800831c <sin+0x24>
 800830c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008380 <sin+0x88>
 8008310:	2000      	movs	r0, #0
 8008312:	b005      	add	sp, #20
 8008314:	f85d eb04 	ldr.w	lr, [sp], #4
 8008318:	f000 bc7e 	b.w	8008c18 <__kernel_sin>
 800831c:	4a1b      	ldr	r2, [pc, #108]	; (800838c <sin+0x94>)
 800831e:	4293      	cmp	r3, r2
 8008320:	dd04      	ble.n	800832c <sin+0x34>
 8008322:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008326:	b005      	add	sp, #20
 8008328:	f85d fb04 	ldr.w	pc, [sp], #4
 800832c:	4668      	mov	r0, sp
 800832e:	f000 f82f 	bl	8008390 <__ieee754_rem_pio2>
 8008332:	f000 0003 	and.w	r0, r0, #3
 8008336:	2801      	cmp	r0, #1
 8008338:	d00a      	beq.n	8008350 <sin+0x58>
 800833a:	2802      	cmp	r0, #2
 800833c:	d00f      	beq.n	800835e <sin+0x66>
 800833e:	b9c0      	cbnz	r0, 8008372 <sin+0x7a>
 8008340:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008344:	ed9d 0b00 	vldr	d0, [sp]
 8008348:	2001      	movs	r0, #1
 800834a:	f000 fc65 	bl	8008c18 <__kernel_sin>
 800834e:	e7ea      	b.n	8008326 <sin+0x2e>
 8008350:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008354:	ed9d 0b00 	vldr	d0, [sp]
 8008358:	f000 fbf2 	bl	8008b40 <__kernel_cos>
 800835c:	e7e3      	b.n	8008326 <sin+0x2e>
 800835e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008362:	ed9d 0b00 	vldr	d0, [sp]
 8008366:	2001      	movs	r0, #1
 8008368:	f000 fc56 	bl	8008c18 <__kernel_sin>
 800836c:	eeb1 0b40 	vneg.f64	d0, d0
 8008370:	e7d9      	b.n	8008326 <sin+0x2e>
 8008372:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008376:	ed9d 0b00 	vldr	d0, [sp]
 800837a:	f000 fbe1 	bl	8008b40 <__kernel_cos>
 800837e:	e7f5      	b.n	800836c <sin+0x74>
	...
 8008388:	3fe921fb 	.word	0x3fe921fb
 800838c:	7fefffff 	.word	0x7fefffff

08008390 <__ieee754_rem_pio2>:
 8008390:	b570      	push	{r4, r5, r6, lr}
 8008392:	eeb0 7b40 	vmov.f64	d7, d0
 8008396:	ee17 5a90 	vmov	r5, s15
 800839a:	4b99      	ldr	r3, [pc, #612]	; (8008600 <__ieee754_rem_pio2+0x270>)
 800839c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80083a0:	429e      	cmp	r6, r3
 80083a2:	b088      	sub	sp, #32
 80083a4:	4604      	mov	r4, r0
 80083a6:	dc07      	bgt.n	80083b8 <__ieee754_rem_pio2+0x28>
 80083a8:	2200      	movs	r2, #0
 80083aa:	2300      	movs	r3, #0
 80083ac:	ed84 0b00 	vstr	d0, [r4]
 80083b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80083b4:	2000      	movs	r0, #0
 80083b6:	e01b      	b.n	80083f0 <__ieee754_rem_pio2+0x60>
 80083b8:	4b92      	ldr	r3, [pc, #584]	; (8008604 <__ieee754_rem_pio2+0x274>)
 80083ba:	429e      	cmp	r6, r3
 80083bc:	dc3b      	bgt.n	8008436 <__ieee754_rem_pio2+0xa6>
 80083be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80085c0 <__ieee754_rem_pio2+0x230>
 80083c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80083cc:	dd19      	ble.n	8008402 <__ieee754_rem_pio2+0x72>
 80083ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80083d2:	429e      	cmp	r6, r3
 80083d4:	d00e      	beq.n	80083f4 <__ieee754_rem_pio2+0x64>
 80083d6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80085c8 <__ieee754_rem_pio2+0x238>
 80083da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80083de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80083e2:	ed84 5b00 	vstr	d5, [r4]
 80083e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80083ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80083ee:	2001      	movs	r0, #1
 80083f0:	b008      	add	sp, #32
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80085d0 <__ieee754_rem_pio2+0x240>
 80083f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80083fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80085d8 <__ieee754_rem_pio2+0x248>
 8008400:	e7eb      	b.n	80083da <__ieee754_rem_pio2+0x4a>
 8008402:	429e      	cmp	r6, r3
 8008404:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008408:	d00e      	beq.n	8008428 <__ieee754_rem_pio2+0x98>
 800840a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80085c8 <__ieee754_rem_pio2+0x238>
 800840e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008412:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008416:	ed84 5b00 	vstr	d5, [r4]
 800841a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800841e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008422:	ed84 7b02 	vstr	d7, [r4, #8]
 8008426:	e7e3      	b.n	80083f0 <__ieee754_rem_pio2+0x60>
 8008428:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80085d0 <__ieee754_rem_pio2+0x240>
 800842c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008430:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80085d8 <__ieee754_rem_pio2+0x248>
 8008434:	e7eb      	b.n	800840e <__ieee754_rem_pio2+0x7e>
 8008436:	4b74      	ldr	r3, [pc, #464]	; (8008608 <__ieee754_rem_pio2+0x278>)
 8008438:	429e      	cmp	r6, r3
 800843a:	dc70      	bgt.n	800851e <__ieee754_rem_pio2+0x18e>
 800843c:	f000 fc44 	bl	8008cc8 <fabs>
 8008440:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008444:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80085e0 <__ieee754_rem_pio2+0x250>
 8008448:	eea0 7b06 	vfma.f64	d7, d0, d6
 800844c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008450:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008454:	ee17 0a90 	vmov	r0, s15
 8008458:	eeb1 4b45 	vneg.f64	d4, d5
 800845c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80085c0 <__ieee754_rem_pio2+0x230>
 8008460:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008464:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80085c8 <__ieee754_rem_pio2+0x238>
 8008468:	281f      	cmp	r0, #31
 800846a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800846e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008472:	dc08      	bgt.n	8008486 <__ieee754_rem_pio2+0xf6>
 8008474:	4b65      	ldr	r3, [pc, #404]	; (800860c <__ieee754_rem_pio2+0x27c>)
 8008476:	1e42      	subs	r2, r0, #1
 8008478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847c:	42b3      	cmp	r3, r6
 800847e:	d002      	beq.n	8008486 <__ieee754_rem_pio2+0xf6>
 8008480:	ed84 6b00 	vstr	d6, [r4]
 8008484:	e024      	b.n	80084d0 <__ieee754_rem_pio2+0x140>
 8008486:	ee16 3a90 	vmov	r3, s13
 800848a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800848e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008492:	2b10      	cmp	r3, #16
 8008494:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008498:	ddf2      	ble.n	8008480 <__ieee754_rem_pio2+0xf0>
 800849a:	eeb0 6b40 	vmov.f64	d6, d0
 800849e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80085d0 <__ieee754_rem_pio2+0x240>
 80084a2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80084a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80084aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80084ae:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80085d8 <__ieee754_rem_pio2+0x248>
 80084b2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80084b6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80084ba:	ee13 3a90 	vmov	r3, s7
 80084be:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	2b31      	cmp	r3, #49	; 0x31
 80084c6:	dc17      	bgt.n	80084f8 <__ieee754_rem_pio2+0x168>
 80084c8:	eeb0 0b46 	vmov.f64	d0, d6
 80084cc:	ed84 3b00 	vstr	d3, [r4]
 80084d0:	ed94 6b00 	vldr	d6, [r4]
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80084da:	ee30 0b47 	vsub.f64	d0, d0, d7
 80084de:	ed84 0b02 	vstr	d0, [r4, #8]
 80084e2:	da85      	bge.n	80083f0 <__ieee754_rem_pio2+0x60>
 80084e4:	eeb1 6b46 	vneg.f64	d6, d6
 80084e8:	eeb1 0b40 	vneg.f64	d0, d0
 80084ec:	ed84 6b00 	vstr	d6, [r4]
 80084f0:	ed84 0b02 	vstr	d0, [r4, #8]
 80084f4:	4240      	negs	r0, r0
 80084f6:	e77b      	b.n	80083f0 <__ieee754_rem_pio2+0x60>
 80084f8:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80085e8 <__ieee754_rem_pio2+0x258>
 80084fc:	eeb0 0b46 	vmov.f64	d0, d6
 8008500:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008504:	ee36 6b40 	vsub.f64	d6, d6, d0
 8008508:	eea4 6b07 	vfma.f64	d6, d4, d7
 800850c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80085f0 <__ieee754_rem_pio2+0x260>
 8008510:	eeb0 7b46 	vmov.f64	d7, d6
 8008514:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8008518:	ee30 6b47 	vsub.f64	d6, d0, d7
 800851c:	e7b0      	b.n	8008480 <__ieee754_rem_pio2+0xf0>
 800851e:	4b3c      	ldr	r3, [pc, #240]	; (8008610 <__ieee754_rem_pio2+0x280>)
 8008520:	429e      	cmp	r6, r3
 8008522:	dd06      	ble.n	8008532 <__ieee754_rem_pio2+0x1a2>
 8008524:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008528:	ed80 7b02 	vstr	d7, [r0, #8]
 800852c:	ed80 7b00 	vstr	d7, [r0]
 8008530:	e740      	b.n	80083b4 <__ieee754_rem_pio2+0x24>
 8008532:	1532      	asrs	r2, r6, #20
 8008534:	ee10 0a10 	vmov	r0, s0
 8008538:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800853c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008540:	ec41 0b17 	vmov	d7, r0, r1
 8008544:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008548:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80085f8 <__ieee754_rem_pio2+0x268>
 800854c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008550:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008554:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008558:	ee27 7b05 	vmul.f64	d7, d7, d5
 800855c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008560:	a808      	add	r0, sp, #32
 8008562:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008566:	ee37 7b46 	vsub.f64	d7, d7, d6
 800856a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800856e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008572:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008576:	2103      	movs	r1, #3
 8008578:	ed30 7b02 	vldmdb	r0!, {d7}
 800857c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	460b      	mov	r3, r1
 8008586:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800858a:	d0f5      	beq.n	8008578 <__ieee754_rem_pio2+0x1e8>
 800858c:	4921      	ldr	r1, [pc, #132]	; (8008614 <__ieee754_rem_pio2+0x284>)
 800858e:	9101      	str	r1, [sp, #4]
 8008590:	2102      	movs	r1, #2
 8008592:	9100      	str	r1, [sp, #0]
 8008594:	a802      	add	r0, sp, #8
 8008596:	4621      	mov	r1, r4
 8008598:	f000 f83e 	bl	8008618 <__kernel_rem_pio2>
 800859c:	2d00      	cmp	r5, #0
 800859e:	f6bf af27 	bge.w	80083f0 <__ieee754_rem_pio2+0x60>
 80085a2:	ed94 7b00 	vldr	d7, [r4]
 80085a6:	eeb1 7b47 	vneg.f64	d7, d7
 80085aa:	ed84 7b00 	vstr	d7, [r4]
 80085ae:	ed94 7b02 	vldr	d7, [r4, #8]
 80085b2:	eeb1 7b47 	vneg.f64	d7, d7
 80085b6:	ed84 7b02 	vstr	d7, [r4, #8]
 80085ba:	e79b      	b.n	80084f4 <__ieee754_rem_pio2+0x164>
 80085bc:	f3af 8000 	nop.w
 80085c0:	54400000 	.word	0x54400000
 80085c4:	3ff921fb 	.word	0x3ff921fb
 80085c8:	1a626331 	.word	0x1a626331
 80085cc:	3dd0b461 	.word	0x3dd0b461
 80085d0:	1a600000 	.word	0x1a600000
 80085d4:	3dd0b461 	.word	0x3dd0b461
 80085d8:	2e037073 	.word	0x2e037073
 80085dc:	3ba3198a 	.word	0x3ba3198a
 80085e0:	6dc9c883 	.word	0x6dc9c883
 80085e4:	3fe45f30 	.word	0x3fe45f30
 80085e8:	2e000000 	.word	0x2e000000
 80085ec:	3ba3198a 	.word	0x3ba3198a
 80085f0:	252049c1 	.word	0x252049c1
 80085f4:	397b839a 	.word	0x397b839a
 80085f8:	00000000 	.word	0x00000000
 80085fc:	41700000 	.word	0x41700000
 8008600:	3fe921fb 	.word	0x3fe921fb
 8008604:	4002d97b 	.word	0x4002d97b
 8008608:	413921fb 	.word	0x413921fb
 800860c:	08008ef8 	.word	0x08008ef8
 8008610:	7fefffff 	.word	0x7fefffff
 8008614:	08008f78 	.word	0x08008f78

08008618 <__kernel_rem_pio2>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	ed2d 8b06 	vpush	{d8-d10}
 8008620:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008624:	460f      	mov	r7, r1
 8008626:	9002      	str	r0, [sp, #8]
 8008628:	49c3      	ldr	r1, [pc, #780]	; (8008938 <__kernel_rem_pio2+0x320>)
 800862a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008632:	9901      	ldr	r1, [sp, #4]
 8008634:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008636:	f112 0f14 	cmn.w	r2, #20
 800863a:	bfa8      	it	ge
 800863c:	1ed0      	subge	r0, r2, #3
 800863e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8008642:	bfaa      	itet	ge
 8008644:	2418      	movge	r4, #24
 8008646:	2000      	movlt	r0, #0
 8008648:	fb90 f0f4 	sdivge	r0, r0, r4
 800864c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8008920 <__kernel_rem_pio2+0x308>
 8008650:	f06f 0417 	mvn.w	r4, #23
 8008654:	fb00 4404 	mla	r4, r0, r4, r4
 8008658:	eba0 060a 	sub.w	r6, r0, sl
 800865c:	4414      	add	r4, r2
 800865e:	eb09 0c0a 	add.w	ip, r9, sl
 8008662:	ad1a      	add	r5, sp, #104	; 0x68
 8008664:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008668:	2200      	movs	r2, #0
 800866a:	4562      	cmp	r2, ip
 800866c:	dd10      	ble.n	8008690 <__kernel_rem_pio2+0x78>
 800866e:	9a01      	ldr	r2, [sp, #4]
 8008670:	a91a      	add	r1, sp, #104	; 0x68
 8008672:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008676:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800867a:	f04f 0c00 	mov.w	ip, #0
 800867e:	45cc      	cmp	ip, r9
 8008680:	dc26      	bgt.n	80086d0 <__kernel_rem_pio2+0xb8>
 8008682:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8008920 <__kernel_rem_pio2+0x308>
 8008686:	f8dd e008 	ldr.w	lr, [sp, #8]
 800868a:	4616      	mov	r6, r2
 800868c:	2500      	movs	r5, #0
 800868e:	e015      	b.n	80086bc <__kernel_rem_pio2+0xa4>
 8008690:	42d6      	cmn	r6, r2
 8008692:	d409      	bmi.n	80086a8 <__kernel_rem_pio2+0x90>
 8008694:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8008698:	ee07 1a90 	vmov	s15, r1
 800869c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086a0:	eca5 7b02 	vstmia	r5!, {d7}
 80086a4:	3201      	adds	r2, #1
 80086a6:	e7e0      	b.n	800866a <__kernel_rem_pio2+0x52>
 80086a8:	eeb0 7b46 	vmov.f64	d7, d6
 80086ac:	e7f8      	b.n	80086a0 <__kernel_rem_pio2+0x88>
 80086ae:	ecbe 5b02 	vldmia	lr!, {d5}
 80086b2:	ed96 6b00 	vldr	d6, [r6]
 80086b6:	3501      	adds	r5, #1
 80086b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80086bc:	4555      	cmp	r5, sl
 80086be:	f1a6 0608 	sub.w	r6, r6, #8
 80086c2:	ddf4      	ble.n	80086ae <__kernel_rem_pio2+0x96>
 80086c4:	eca8 7b02 	vstmia	r8!, {d7}
 80086c8:	f10c 0c01 	add.w	ip, ip, #1
 80086cc:	3208      	adds	r2, #8
 80086ce:	e7d6      	b.n	800867e <__kernel_rem_pio2+0x66>
 80086d0:	aa06      	add	r2, sp, #24
 80086d2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008928 <__kernel_rem_pio2+0x310>
 80086d6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008930 <__kernel_rem_pio2+0x318>
 80086da:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80086de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80086e2:	9204      	str	r2, [sp, #16]
 80086e4:	9303      	str	r3, [sp, #12]
 80086e6:	464d      	mov	r5, r9
 80086e8:	00eb      	lsls	r3, r5, #3
 80086ea:	9305      	str	r3, [sp, #20]
 80086ec:	ab92      	add	r3, sp, #584	; 0x248
 80086ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80086f2:	f10d 0b18 	add.w	fp, sp, #24
 80086f6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80086f8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80086fc:	465e      	mov	r6, fp
 80086fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008702:	4628      	mov	r0, r5
 8008704:	2800      	cmp	r0, #0
 8008706:	f1a2 0208 	sub.w	r2, r2, #8
 800870a:	dc48      	bgt.n	800879e <__kernel_rem_pio2+0x186>
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fae7 	bl	8008ce0 <scalbn>
 8008712:	eeb0 8b40 	vmov.f64	d8, d0
 8008716:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800871a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800871e:	f000 fb5f 	bl	8008de0 <floor>
 8008722:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008726:	eea0 8b47 	vfms.f64	d8, d0, d7
 800872a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800872e:	2c00      	cmp	r4, #0
 8008730:	ee17 8a90 	vmov	r8, s15
 8008734:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008738:	ee38 8b47 	vsub.f64	d8, d8, d7
 800873c:	dd41      	ble.n	80087c2 <__kernel_rem_pio2+0x1aa>
 800873e:	1e68      	subs	r0, r5, #1
 8008740:	ab06      	add	r3, sp, #24
 8008742:	f1c4 0c18 	rsb	ip, r4, #24
 8008746:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800874a:	fa46 f20c 	asr.w	r2, r6, ip
 800874e:	4490      	add	r8, r2
 8008750:	fa02 f20c 	lsl.w	r2, r2, ip
 8008754:	1ab6      	subs	r6, r6, r2
 8008756:	f1c4 0217 	rsb	r2, r4, #23
 800875a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800875e:	4116      	asrs	r6, r2
 8008760:	2e00      	cmp	r6, #0
 8008762:	dd3d      	ble.n	80087e0 <__kernel_rem_pio2+0x1c8>
 8008764:	f04f 0c00 	mov.w	ip, #0
 8008768:	f108 0801 	add.w	r8, r8, #1
 800876c:	4660      	mov	r0, ip
 800876e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008772:	4565      	cmp	r5, ip
 8008774:	dc6a      	bgt.n	800884c <__kernel_rem_pio2+0x234>
 8008776:	2c00      	cmp	r4, #0
 8008778:	dd04      	ble.n	8008784 <__kernel_rem_pio2+0x16c>
 800877a:	2c01      	cmp	r4, #1
 800877c:	d07b      	beq.n	8008876 <__kernel_rem_pio2+0x25e>
 800877e:	2c02      	cmp	r4, #2
 8008780:	f000 8083 	beq.w	800888a <__kernel_rem_pio2+0x272>
 8008784:	2e02      	cmp	r6, #2
 8008786:	d12b      	bne.n	80087e0 <__kernel_rem_pio2+0x1c8>
 8008788:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800878c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008790:	b330      	cbz	r0, 80087e0 <__kernel_rem_pio2+0x1c8>
 8008792:	4620      	mov	r0, r4
 8008794:	f000 faa4 	bl	8008ce0 <scalbn>
 8008798:	ee38 8b40 	vsub.f64	d8, d8, d0
 800879c:	e020      	b.n	80087e0 <__kernel_rem_pio2+0x1c8>
 800879e:	ee20 7b09 	vmul.f64	d7, d0, d9
 80087a2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80087a6:	3801      	subs	r0, #1
 80087a8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80087ac:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80087b0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80087b4:	eca6 0a01 	vstmia	r6!, {s0}
 80087b8:	ed92 0b00 	vldr	d0, [r2]
 80087bc:	ee37 0b00 	vadd.f64	d0, d7, d0
 80087c0:	e7a0      	b.n	8008704 <__kernel_rem_pio2+0xec>
 80087c2:	d105      	bne.n	80087d0 <__kernel_rem_pio2+0x1b8>
 80087c4:	1e6a      	subs	r2, r5, #1
 80087c6:	ab06      	add	r3, sp, #24
 80087c8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80087cc:	15f6      	asrs	r6, r6, #23
 80087ce:	e7c7      	b.n	8008760 <__kernel_rem_pio2+0x148>
 80087d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80087d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80087d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087dc:	da34      	bge.n	8008848 <__kernel_rem_pio2+0x230>
 80087de:	2600      	movs	r6, #0
 80087e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e8:	f040 80aa 	bne.w	8008940 <__kernel_rem_pio2+0x328>
 80087ec:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80087f0:	4658      	mov	r0, fp
 80087f2:	2200      	movs	r2, #0
 80087f4:	4548      	cmp	r0, r9
 80087f6:	da50      	bge.n	800889a <__kernel_rem_pio2+0x282>
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	d06b      	beq.n	80088d4 <__kernel_rem_pio2+0x2bc>
 80087fc:	ab06      	add	r3, sp, #24
 80087fe:	3c18      	subs	r4, #24
 8008800:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8087 	beq.w	8008918 <__kernel_rem_pio2+0x300>
 800880a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fa66 	bl	8008ce0 <scalbn>
 8008814:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8008928 <__kernel_rem_pio2+0x310>
 8008818:	f10b 0201 	add.w	r2, fp, #1
 800881c:	a96a      	add	r1, sp, #424	; 0x1a8
 800881e:	00d3      	lsls	r3, r2, #3
 8008820:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008824:	465a      	mov	r2, fp
 8008826:	2a00      	cmp	r2, #0
 8008828:	f280 80b8 	bge.w	800899c <__kernel_rem_pio2+0x384>
 800882c:	465a      	mov	r2, fp
 800882e:	2a00      	cmp	r2, #0
 8008830:	f2c0 80d6 	blt.w	80089e0 <__kernel_rem_pio2+0x3c8>
 8008834:	a96a      	add	r1, sp, #424	; 0x1a8
 8008836:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800883a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8008920 <__kernel_rem_pio2+0x308>
 800883e:	4d3f      	ldr	r5, [pc, #252]	; (800893c <__kernel_rem_pio2+0x324>)
 8008840:	2000      	movs	r0, #0
 8008842:	ebab 0102 	sub.w	r1, fp, r2
 8008846:	e0c0      	b.n	80089ca <__kernel_rem_pio2+0x3b2>
 8008848:	2602      	movs	r6, #2
 800884a:	e78b      	b.n	8008764 <__kernel_rem_pio2+0x14c>
 800884c:	f8db 2000 	ldr.w	r2, [fp]
 8008850:	b958      	cbnz	r0, 800886a <__kernel_rem_pio2+0x252>
 8008852:	b122      	cbz	r2, 800885e <__kernel_rem_pio2+0x246>
 8008854:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008858:	f8cb 2000 	str.w	r2, [fp]
 800885c:	2201      	movs	r2, #1
 800885e:	f10c 0c01 	add.w	ip, ip, #1
 8008862:	f10b 0b04 	add.w	fp, fp, #4
 8008866:	4610      	mov	r0, r2
 8008868:	e783      	b.n	8008772 <__kernel_rem_pio2+0x15a>
 800886a:	ebae 0202 	sub.w	r2, lr, r2
 800886e:	f8cb 2000 	str.w	r2, [fp]
 8008872:	4602      	mov	r2, r0
 8008874:	e7f3      	b.n	800885e <__kernel_rem_pio2+0x246>
 8008876:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800887a:	ab06      	add	r3, sp, #24
 800887c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008880:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008884:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8008888:	e77c      	b.n	8008784 <__kernel_rem_pio2+0x16c>
 800888a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800888e:	ab06      	add	r3, sp, #24
 8008890:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008894:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008898:	e7f4      	b.n	8008884 <__kernel_rem_pio2+0x26c>
 800889a:	ab06      	add	r3, sp, #24
 800889c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088a0:	3801      	subs	r0, #1
 80088a2:	431a      	orrs	r2, r3
 80088a4:	e7a6      	b.n	80087f4 <__kernel_rem_pio2+0x1dc>
 80088a6:	3201      	adds	r2, #1
 80088a8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d0fa      	beq.n	80088a6 <__kernel_rem_pio2+0x28e>
 80088b0:	9b05      	ldr	r3, [sp, #20]
 80088b2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80088b6:	eb0d 0003 	add.w	r0, sp, r3
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	18ee      	adds	r6, r5, r3
 80088be:	ab1a      	add	r3, sp, #104	; 0x68
 80088c0:	f105 0c01 	add.w	ip, r5, #1
 80088c4:	3898      	subs	r0, #152	; 0x98
 80088c6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80088ca:	442a      	add	r2, r5
 80088cc:	4562      	cmp	r2, ip
 80088ce:	da04      	bge.n	80088da <__kernel_rem_pio2+0x2c2>
 80088d0:	4615      	mov	r5, r2
 80088d2:	e709      	b.n	80086e8 <__kernel_rem_pio2+0xd0>
 80088d4:	9804      	ldr	r0, [sp, #16]
 80088d6:	2201      	movs	r2, #1
 80088d8:	e7e6      	b.n	80088a8 <__kernel_rem_pio2+0x290>
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80088e0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80088ee:	2500      	movs	r5, #0
 80088f0:	eca6 7b02 	vstmia	r6!, {d7}
 80088f4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8008920 <__kernel_rem_pio2+0x308>
 80088f8:	46b0      	mov	r8, r6
 80088fa:	4555      	cmp	r5, sl
 80088fc:	dd04      	ble.n	8008908 <__kernel_rem_pio2+0x2f0>
 80088fe:	eca0 7b02 	vstmia	r0!, {d7}
 8008902:	f10c 0c01 	add.w	ip, ip, #1
 8008906:	e7e1      	b.n	80088cc <__kernel_rem_pio2+0x2b4>
 8008908:	ecbe 5b02 	vldmia	lr!, {d5}
 800890c:	ed38 6b02 	vldmdb	r8!, {d6}
 8008910:	3501      	adds	r5, #1
 8008912:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008916:	e7f0      	b.n	80088fa <__kernel_rem_pio2+0x2e2>
 8008918:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800891c:	e76e      	b.n	80087fc <__kernel_rem_pio2+0x1e4>
 800891e:	bf00      	nop
	...
 800892c:	3e700000 	.word	0x3e700000
 8008930:	00000000 	.word	0x00000000
 8008934:	41700000 	.word	0x41700000
 8008938:	080090c0 	.word	0x080090c0
 800893c:	08009080 	.word	0x08009080
 8008940:	4260      	negs	r0, r4
 8008942:	eeb0 0b48 	vmov.f64	d0, d8
 8008946:	f000 f9cb 	bl	8008ce0 <scalbn>
 800894a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008b28 <__kernel_rem_pio2+0x510>
 800894e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008956:	db18      	blt.n	800898a <__kernel_rem_pio2+0x372>
 8008958:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8008b30 <__kernel_rem_pio2+0x518>
 800895c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008960:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008964:	aa06      	add	r2, sp, #24
 8008966:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800896a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800896e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008972:	f105 0b01 	add.w	fp, r5, #1
 8008976:	ee10 3a10 	vmov	r3, s0
 800897a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800897e:	ee17 3a10 	vmov	r3, s14
 8008982:	3418      	adds	r4, #24
 8008984:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8008988:	e73f      	b.n	800880a <__kernel_rem_pio2+0x1f2>
 800898a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800898e:	aa06      	add	r2, sp, #24
 8008990:	ee10 3a10 	vmov	r3, s0
 8008994:	46ab      	mov	fp, r5
 8008996:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800899a:	e736      	b.n	800880a <__kernel_rem_pio2+0x1f2>
 800899c:	a806      	add	r0, sp, #24
 800899e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80089a2:	9001      	str	r0, [sp, #4]
 80089a4:	ee07 0a90 	vmov	s15, r0
 80089a8:	3a01      	subs	r2, #1
 80089aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 80089b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80089b6:	ed21 7b02 	vstmdb	r1!, {d7}
 80089ba:	e734      	b.n	8008826 <__kernel_rem_pio2+0x20e>
 80089bc:	ecb5 5b02 	vldmia	r5!, {d5}
 80089c0:	ecb4 6b02 	vldmia	r4!, {d6}
 80089c4:	3001      	adds	r0, #1
 80089c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089ca:	4548      	cmp	r0, r9
 80089cc:	dc01      	bgt.n	80089d2 <__kernel_rem_pio2+0x3ba>
 80089ce:	4288      	cmp	r0, r1
 80089d0:	ddf4      	ble.n	80089bc <__kernel_rem_pio2+0x3a4>
 80089d2:	a842      	add	r0, sp, #264	; 0x108
 80089d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80089d8:	ed81 7b00 	vstr	d7, [r1]
 80089dc:	3a01      	subs	r2, #1
 80089de:	e726      	b.n	800882e <__kernel_rem_pio2+0x216>
 80089e0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80089e2:	2a02      	cmp	r2, #2
 80089e4:	dc0a      	bgt.n	80089fc <__kernel_rem_pio2+0x3e4>
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	dc2e      	bgt.n	8008a48 <__kernel_rem_pio2+0x430>
 80089ea:	d047      	beq.n	8008a7c <__kernel_rem_pio2+0x464>
 80089ec:	f008 0007 	and.w	r0, r8, #7
 80089f0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80089f4:	ecbd 8b06 	vpop	{d8-d10}
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80089fe:	2a03      	cmp	r2, #3
 8008a00:	d1f4      	bne.n	80089ec <__kernel_rem_pio2+0x3d4>
 8008a02:	a942      	add	r1, sp, #264	; 0x108
 8008a04:	f1a3 0208 	sub.w	r2, r3, #8
 8008a08:	440a      	add	r2, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f1a1 0108 	sub.w	r1, r1, #8
 8008a14:	dc55      	bgt.n	8008ac2 <__kernel_rem_pio2+0x4aa>
 8008a16:	4659      	mov	r1, fp
 8008a18:	2901      	cmp	r1, #1
 8008a1a:	f1a2 0208 	sub.w	r2, r2, #8
 8008a1e:	dc60      	bgt.n	8008ae2 <__kernel_rem_pio2+0x4ca>
 8008a20:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8008b38 <__kernel_rem_pio2+0x520>
 8008a24:	aa42      	add	r2, sp, #264	; 0x108
 8008a26:	4413      	add	r3, r2
 8008a28:	f1bb 0f01 	cmp.w	fp, #1
 8008a2c:	dc69      	bgt.n	8008b02 <__kernel_rem_pio2+0x4ea>
 8008a2e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8008a32:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d16a      	bne.n	8008b10 <__kernel_rem_pio2+0x4f8>
 8008a3a:	ed87 5b00 	vstr	d5, [r7]
 8008a3e:	ed87 6b02 	vstr	d6, [r7, #8]
 8008a42:	ed87 7b04 	vstr	d7, [r7, #16]
 8008a46:	e7d1      	b.n	80089ec <__kernel_rem_pio2+0x3d4>
 8008a48:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8008b38 <__kernel_rem_pio2+0x520>
 8008a4c:	aa42      	add	r2, sp, #264	; 0x108
 8008a4e:	4413      	add	r3, r2
 8008a50:	465a      	mov	r2, fp
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	da26      	bge.n	8008aa4 <__kernel_rem_pio2+0x48c>
 8008a56:	b35e      	cbz	r6, 8008ab0 <__kernel_rem_pio2+0x498>
 8008a58:	eeb1 7b46 	vneg.f64	d7, d6
 8008a5c:	ed87 7b00 	vstr	d7, [r7]
 8008a60:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008a64:	aa44      	add	r2, sp, #272	; 0x110
 8008a66:	2301      	movs	r3, #1
 8008a68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008a6c:	459b      	cmp	fp, r3
 8008a6e:	da22      	bge.n	8008ab6 <__kernel_rem_pio2+0x49e>
 8008a70:	b10e      	cbz	r6, 8008a76 <__kernel_rem_pio2+0x45e>
 8008a72:	eeb1 7b47 	vneg.f64	d7, d7
 8008a76:	ed87 7b02 	vstr	d7, [r7, #8]
 8008a7a:	e7b7      	b.n	80089ec <__kernel_rem_pio2+0x3d4>
 8008a7c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008b38 <__kernel_rem_pio2+0x520>
 8008a80:	aa42      	add	r2, sp, #264	; 0x108
 8008a82:	4413      	add	r3, r2
 8008a84:	f1bb 0f00 	cmp.w	fp, #0
 8008a88:	da05      	bge.n	8008a96 <__kernel_rem_pio2+0x47e>
 8008a8a:	b10e      	cbz	r6, 8008a90 <__kernel_rem_pio2+0x478>
 8008a8c:	eeb1 7b47 	vneg.f64	d7, d7
 8008a90:	ed87 7b00 	vstr	d7, [r7]
 8008a94:	e7aa      	b.n	80089ec <__kernel_rem_pio2+0x3d4>
 8008a96:	ed33 6b02 	vldmdb	r3!, {d6}
 8008a9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008a9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008aa2:	e7ef      	b.n	8008a84 <__kernel_rem_pio2+0x46c>
 8008aa4:	ed33 7b02 	vldmdb	r3!, {d7}
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008aae:	e7d0      	b.n	8008a52 <__kernel_rem_pio2+0x43a>
 8008ab0:	eeb0 7b46 	vmov.f64	d7, d6
 8008ab4:	e7d2      	b.n	8008a5c <__kernel_rem_pio2+0x444>
 8008ab6:	ecb2 6b02 	vldmia	r2!, {d6}
 8008aba:	3301      	adds	r3, #1
 8008abc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008ac0:	e7d4      	b.n	8008a6c <__kernel_rem_pio2+0x454>
 8008ac2:	ed91 7b00 	vldr	d7, [r1]
 8008ac6:	ed91 5b02 	vldr	d5, [r1, #8]
 8008aca:	3801      	subs	r0, #1
 8008acc:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008ad0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ad4:	ed81 6b00 	vstr	d6, [r1]
 8008ad8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008adc:	ed81 7b02 	vstr	d7, [r1, #8]
 8008ae0:	e795      	b.n	8008a0e <__kernel_rem_pio2+0x3f6>
 8008ae2:	ed92 7b00 	vldr	d7, [r2]
 8008ae6:	ed92 5b02 	vldr	d5, [r2, #8]
 8008aea:	3901      	subs	r1, #1
 8008aec:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008af0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008af4:	ed82 6b00 	vstr	d6, [r2]
 8008af8:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008afc:	ed82 7b02 	vstr	d7, [r2, #8]
 8008b00:	e78a      	b.n	8008a18 <__kernel_rem_pio2+0x400>
 8008b02:	ed33 6b02 	vldmdb	r3!, {d6}
 8008b06:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008b0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008b0e:	e78b      	b.n	8008a28 <__kernel_rem_pio2+0x410>
 8008b10:	eeb1 5b45 	vneg.f64	d5, d5
 8008b14:	eeb1 6b46 	vneg.f64	d6, d6
 8008b18:	ed87 5b00 	vstr	d5, [r7]
 8008b1c:	eeb1 7b47 	vneg.f64	d7, d7
 8008b20:	ed87 6b02 	vstr	d6, [r7, #8]
 8008b24:	e78d      	b.n	8008a42 <__kernel_rem_pio2+0x42a>
 8008b26:	bf00      	nop
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	41700000 	.word	0x41700000
 8008b30:	00000000 	.word	0x00000000
 8008b34:	3e700000 	.word	0x3e700000
	...

08008b40 <__kernel_cos>:
 8008b40:	ee10 1a90 	vmov	r1, s1
 8008b44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008b48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008b4c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008b50:	da05      	bge.n	8008b5e <__kernel_cos+0x1e>
 8008b52:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008b56:	ee17 3a90 	vmov	r3, s15
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d03d      	beq.n	8008bda <__kernel_cos+0x9a>
 8008b5e:	ee20 5b00 	vmul.f64	d5, d0, d0
 8008b62:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8008b66:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8008be0 <__kernel_cos+0xa0>
 8008b6a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8008be8 <__kernel_cos+0xa8>
 8008b6e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8008b72:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008bf0 <__kernel_cos+0xb0>
 8008b76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008b7a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8008bf8 <__kernel_cos+0xb8>
 8008b7e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8008b82:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008c00 <__kernel_cos+0xc0>
 8008b86:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <__kernel_cos+0xd0>)
 8008b88:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008b8c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8008c08 <__kernel_cos+0xc8>
 8008b90:	4299      	cmp	r1, r3
 8008b92:	eea7 4b05 	vfma.f64	d4, d7, d5
 8008b96:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008b9a:	ee24 4b05 	vmul.f64	d4, d4, d5
 8008b9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008ba2:	eea5 1b04 	vfma.f64	d1, d5, d4
 8008ba6:	dc04      	bgt.n	8008bb2 <__kernel_cos+0x72>
 8008ba8:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008bac:	ee36 0b47 	vsub.f64	d0, d6, d7
 8008bb0:	4770      	bx	lr
 8008bb2:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <__kernel_cos+0xd4>)
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	dc0d      	bgt.n	8008bd4 <__kernel_cos+0x94>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008bbe:	ec43 2b15 	vmov	d5, r2, r3
 8008bc2:	ee36 0b45 	vsub.f64	d0, d6, d5
 8008bc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008bca:	ee37 7b41 	vsub.f64	d7, d7, d1
 8008bce:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008bd2:	4770      	bx	lr
 8008bd4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008bd8:	e7f3      	b.n	8008bc2 <__kernel_cos+0x82>
 8008bda:	eeb0 0b46 	vmov.f64	d0, d6
 8008bde:	4770      	bx	lr
 8008be0:	be8838d4 	.word	0xbe8838d4
 8008be4:	bda8fae9 	.word	0xbda8fae9
 8008be8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008bec:	3e21ee9e 	.word	0x3e21ee9e
 8008bf0:	809c52ad 	.word	0x809c52ad
 8008bf4:	be927e4f 	.word	0xbe927e4f
 8008bf8:	19cb1590 	.word	0x19cb1590
 8008bfc:	3efa01a0 	.word	0x3efa01a0
 8008c00:	16c15177 	.word	0x16c15177
 8008c04:	bf56c16c 	.word	0xbf56c16c
 8008c08:	5555554c 	.word	0x5555554c
 8008c0c:	3fa55555 	.word	0x3fa55555
 8008c10:	3fd33332 	.word	0x3fd33332
 8008c14:	3fe90000 	.word	0x3fe90000

08008c18 <__kernel_sin>:
 8008c18:	ee10 3a90 	vmov	r3, s1
 8008c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c20:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008c24:	da04      	bge.n	8008c30 <__kernel_sin+0x18>
 8008c26:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008c2a:	ee17 3a90 	vmov	r3, s15
 8008c2e:	b35b      	cbz	r3, 8008c88 <__kernel_sin+0x70>
 8008c30:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008c34:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008c38:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008c90 <__kernel_sin+0x78>
 8008c3c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008c98 <__kernel_sin+0x80>
 8008c40:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008c44:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008ca0 <__kernel_sin+0x88>
 8008c48:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008c4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008ca8 <__kernel_sin+0x90>
 8008c50:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008c54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008cb0 <__kernel_sin+0x98>
 8008c58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008c5c:	b930      	cbnz	r0, 8008c6c <__kernel_sin+0x54>
 8008c5e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008cb8 <__kernel_sin+0xa0>
 8008c62:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008c66:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008c6a:	4770      	bx	lr
 8008c6c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008c70:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008c74:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008c78:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008c7c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008cc0 <__kernel_sin+0xa8>
 8008c80:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008c84:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w
 8008c90:	5acfd57c 	.word	0x5acfd57c
 8008c94:	3de5d93a 	.word	0x3de5d93a
 8008c98:	8a2b9ceb 	.word	0x8a2b9ceb
 8008c9c:	be5ae5e6 	.word	0xbe5ae5e6
 8008ca0:	57b1fe7d 	.word	0x57b1fe7d
 8008ca4:	3ec71de3 	.word	0x3ec71de3
 8008ca8:	19c161d5 	.word	0x19c161d5
 8008cac:	bf2a01a0 	.word	0xbf2a01a0
 8008cb0:	1110f8a6 	.word	0x1110f8a6
 8008cb4:	3f811111 	.word	0x3f811111
 8008cb8:	55555549 	.word	0x55555549
 8008cbc:	bfc55555 	.word	0xbfc55555
 8008cc0:	55555549 	.word	0x55555549
 8008cc4:	3fc55555 	.word	0x3fc55555

08008cc8 <fabs>:
 8008cc8:	ec51 0b10 	vmov	r0, r1, d0
 8008ccc:	ee10 2a10 	vmov	r2, s0
 8008cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cd4:	ec43 2b10 	vmov	d0, r2, r3
 8008cd8:	4770      	bx	lr
 8008cda:	0000      	movs	r0, r0
 8008cdc:	0000      	movs	r0, r0
	...

08008ce0 <scalbn>:
 8008ce0:	ee10 1a90 	vmov	r1, s1
 8008ce4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ce8:	b98b      	cbnz	r3, 8008d0e <scalbn+0x2e>
 8008cea:	ee10 3a10 	vmov	r3, s0
 8008cee:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008cf2:	4319      	orrs	r1, r3
 8008cf4:	d00a      	beq.n	8008d0c <scalbn+0x2c>
 8008cf6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8008da8 <scalbn+0xc8>
 8008cfa:	4b37      	ldr	r3, [pc, #220]	; (8008dd8 <scalbn+0xf8>)
 8008cfc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008d00:	4298      	cmp	r0, r3
 8008d02:	da0b      	bge.n	8008d1c <scalbn+0x3c>
 8008d04:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8008db0 <scalbn+0xd0>
 8008d08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008d0c:	4770      	bx	lr
 8008d0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d107      	bne.n	8008d26 <scalbn+0x46>
 8008d16:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008d1a:	4770      	bx	lr
 8008d1c:	ee10 1a90 	vmov	r1, s1
 8008d20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d24:	3b36      	subs	r3, #54	; 0x36
 8008d26:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008d2a:	4290      	cmp	r0, r2
 8008d2c:	dd0d      	ble.n	8008d4a <scalbn+0x6a>
 8008d2e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8008db8 <scalbn+0xd8>
 8008d32:	ee10 3a90 	vmov	r3, s1
 8008d36:	eeb0 6b47 	vmov.f64	d6, d7
 8008d3a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8008dc0 <scalbn+0xe0>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	fe27 7b05 	vselge.f64	d7, d7, d5
 8008d44:	ee27 0b06 	vmul.f64	d0, d7, d6
 8008d48:	4770      	bx	lr
 8008d4a:	4418      	add	r0, r3
 8008d4c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8008d50:	4298      	cmp	r0, r3
 8008d52:	dcec      	bgt.n	8008d2e <scalbn+0x4e>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	dd0a      	ble.n	8008d6e <scalbn+0x8e>
 8008d58:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8008d5c:	ec53 2b10 	vmov	r2, r3, d0
 8008d60:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8008d64:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8008d68:	ec43 2b10 	vmov	d0, r2, r3
 8008d6c:	4770      	bx	lr
 8008d6e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8008d72:	da09      	bge.n	8008d88 <scalbn+0xa8>
 8008d74:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008db0 <scalbn+0xd0>
 8008d78:	ee10 3a90 	vmov	r3, s1
 8008d7c:	eeb0 6b47 	vmov.f64	d6, d7
 8008d80:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8008dc8 <scalbn+0xe8>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	e7db      	b.n	8008d40 <scalbn+0x60>
 8008d88:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8008d8c:	ec53 2b10 	vmov	r2, r3, d0
 8008d90:	3036      	adds	r0, #54	; 0x36
 8008d92:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8008d96:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8008d9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8008dd0 <scalbn+0xf0>
 8008d9e:	ec43 2b10 	vmov	d0, r2, r3
 8008da2:	e7b1      	b.n	8008d08 <scalbn+0x28>
 8008da4:	f3af 8000 	nop.w
 8008da8:	00000000 	.word	0x00000000
 8008dac:	43500000 	.word	0x43500000
 8008db0:	c2f8f359 	.word	0xc2f8f359
 8008db4:	01a56e1f 	.word	0x01a56e1f
 8008db8:	8800759c 	.word	0x8800759c
 8008dbc:	7e37e43c 	.word	0x7e37e43c
 8008dc0:	8800759c 	.word	0x8800759c
 8008dc4:	fe37e43c 	.word	0xfe37e43c
 8008dc8:	c2f8f359 	.word	0xc2f8f359
 8008dcc:	81a56e1f 	.word	0x81a56e1f
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	3c900000 	.word	0x3c900000
 8008dd8:	ffff3cb0 	.word	0xffff3cb0
 8008ddc:	00000000 	.word	0x00000000

08008de0 <floor>:
 8008de0:	ee10 1a90 	vmov	r1, s1
 8008de4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008de8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008dec:	2b13      	cmp	r3, #19
 8008dee:	b530      	push	{r4, r5, lr}
 8008df0:	ee10 0a10 	vmov	r0, s0
 8008df4:	ee10 5a10 	vmov	r5, s0
 8008df8:	dc31      	bgt.n	8008e5e <floor+0x7e>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da15      	bge.n	8008e2a <floor+0x4a>
 8008dfe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8008ec0 <floor+0xe0>
 8008e02:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0e:	dd07      	ble.n	8008e20 <floor+0x40>
 8008e10:	2900      	cmp	r1, #0
 8008e12:	da4e      	bge.n	8008eb2 <floor+0xd2>
 8008e14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008e18:	4308      	orrs	r0, r1
 8008e1a:	d04d      	beq.n	8008eb8 <floor+0xd8>
 8008e1c:	492a      	ldr	r1, [pc, #168]	; (8008ec8 <floor+0xe8>)
 8008e1e:	2000      	movs	r0, #0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4602      	mov	r2, r0
 8008e24:	ec43 2b10 	vmov	d0, r2, r3
 8008e28:	e020      	b.n	8008e6c <floor+0x8c>
 8008e2a:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <floor+0xec>)
 8008e2c:	411a      	asrs	r2, r3
 8008e2e:	ea01 0402 	and.w	r4, r1, r2
 8008e32:	4304      	orrs	r4, r0
 8008e34:	d01a      	beq.n	8008e6c <floor+0x8c>
 8008e36:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8008ec0 <floor+0xe0>
 8008e3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e46:	ddeb      	ble.n	8008e20 <floor+0x40>
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	bfbe      	ittt	lt
 8008e4c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008e50:	fa40 f303 	asrlt.w	r3, r0, r3
 8008e54:	18c9      	addlt	r1, r1, r3
 8008e56:	ea21 0102 	bic.w	r1, r1, r2
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	e7e0      	b.n	8008e20 <floor+0x40>
 8008e5e:	2b33      	cmp	r3, #51	; 0x33
 8008e60:	dd05      	ble.n	8008e6e <floor+0x8e>
 8008e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e66:	d101      	bne.n	8008e6c <floor+0x8c>
 8008e68:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008e6c:	bd30      	pop	{r4, r5, pc}
 8008e6e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e76:	40e2      	lsrs	r2, r4
 8008e78:	4210      	tst	r0, r2
 8008e7a:	d0f7      	beq.n	8008e6c <floor+0x8c>
 8008e7c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008ec0 <floor+0xe0>
 8008e80:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008e84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8c:	ddc8      	ble.n	8008e20 <floor+0x40>
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	da02      	bge.n	8008e98 <floor+0xb8>
 8008e92:	2b14      	cmp	r3, #20
 8008e94:	d103      	bne.n	8008e9e <floor+0xbe>
 8008e96:	3101      	adds	r1, #1
 8008e98:	ea20 0002 	bic.w	r0, r0, r2
 8008e9c:	e7c0      	b.n	8008e20 <floor+0x40>
 8008e9e:	2401      	movs	r4, #1
 8008ea0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008ea4:	fa04 f303 	lsl.w	r3, r4, r3
 8008ea8:	4418      	add	r0, r3
 8008eaa:	4285      	cmp	r5, r0
 8008eac:	bf88      	it	hi
 8008eae:	1909      	addhi	r1, r1, r4
 8008eb0:	e7f2      	b.n	8008e98 <floor+0xb8>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	4601      	mov	r1, r0
 8008eb6:	e7b3      	b.n	8008e20 <floor+0x40>
 8008eb8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008ebc:	e7b0      	b.n	8008e20 <floor+0x40>
 8008ebe:	bf00      	nop
 8008ec0:	8800759c 	.word	0x8800759c
 8008ec4:	7e37e43c 	.word	0x7e37e43c
 8008ec8:	bff00000 	.word	0xbff00000
 8008ecc:	000fffff 	.word	0x000fffff

08008ed0 <_init>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	bf00      	nop
 8008ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed6:	bc08      	pop	{r3}
 8008ed8:	469e      	mov	lr, r3
 8008eda:	4770      	bx	lr

08008edc <_fini>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	bf00      	nop
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr
