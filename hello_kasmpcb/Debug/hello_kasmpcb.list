
hello_kasmpcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007788  08007788  00017788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  080079a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002058  24000018  080079bc  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24002070  080079bc  00022070  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014adc  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002339  00000000  00000000  00034b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000fb8  00000000  00000000  00036ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000c59  00000000  00000000  00037e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036e7f  00000000  00000000  00038ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013d23  00000000  00000000  0006f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001637ba  00000000  00000000  00083653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000044b4  00000000  00000000  001e6e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001eb2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007770 	.word	0x08007770

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08007770 	.word	0x08007770

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fd2a 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f832 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9e2 	bl	80009a8 <MX_GPIO_Init>
  MX_UART4_Init();
 80005e4:	f000 f994 	bl	8000910 <MX_UART4_Init>
  MX_TIM1_Init();
 80005e8:	f000 f8da 	bl	80007a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <main+0x60>)
 80005ee:	f003 ff3b 	bl	8004468 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM generation on timer 1, channel 1
 80005f2:	2100      	movs	r1, #0
 80005f4:	480f      	ldr	r0, [pc, #60]	; (8000634 <main+0x60>)
 80005f6:	f004 f811 	bl	800461c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005fa:	2104      	movs	r1, #4
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <main+0x60>)
 80005fe:	f004 f80d 	bl	800461c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TMR_1_1_PH_GPIO_Port, TMR_1_1_PH_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2101      	movs	r1, #1
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x64>)
 8000608:	f001 f870 	bl	80016ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TMR_1_2_PH_GPIO_Port, TMR_1_2_PH_Pin, GPIO_PIN_SET); //Initializes the channel 2 Pins
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <main+0x64>)
 8000612:	f001 f86b 	bl	80016ec <HAL_GPIO_WritePin>
  gen_sine();
 8000616:	f000 fb03 	bl	8000c20 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x68>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d1fb      	bne.n	800061a <main+0x46>
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <main+0x6c>)
 8000624:	ed93 7b00 	vldr	d7, [r3]
 8000628:	eeb0 0b47 	vmov.f64	d0, d7
 800062c:	f000 fa74 	bl	8000b18 <control_update>
 8000630:	e7f3      	b.n	800061a <main+0x46>
 8000632:	bf00      	nop
 8000634:	24000034 	.word	0x24000034
 8000638:	58021000 	.word	0x58021000
 800063c:	24000114 	.word	0x24000114
 8000640:	24000118 	.word	0x24000118

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b09e      	sub	sp, #120	; 0x78
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064e:	224c      	movs	r2, #76	; 0x4c
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fa72 	bl	8006b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f006 fa6b 	bl	8006b3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000666:	2002      	movs	r0, #2
 8000668:	f001 f85a 	bl	8001720 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <SystemClock_Config+0x150>)
 8000672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000674:	4a47      	ldr	r2, [pc, #284]	; (8000794 <SystemClock_Config+0x150>)
 8000676:	f023 0301 	bic.w	r3, r3, #1
 800067a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067c:	4b45      	ldr	r3, [pc, #276]	; (8000794 <SystemClock_Config+0x150>)
 800067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b44      	ldr	r3, [pc, #272]	; (8000798 <SystemClock_Config+0x154>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a43      	ldr	r2, [pc, #268]	; (8000798 <SystemClock_Config+0x154>)
 800068c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b41      	ldr	r3, [pc, #260]	; (8000798 <SystemClock_Config+0x154>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069e:	bf00      	nop
 80006a0:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <SystemClock_Config+0x154>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ac:	d1f8      	bne.n	80006a0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b3b      	ldr	r3, [pc, #236]	; (800079c <SystemClock_Config+0x158>)
 80006b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b4:	4a39      	ldr	r2, [pc, #228]	; (800079c <SystemClock_Config+0x158>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <SystemClock_Config+0x158>)
 80006c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemClock_Config+0x154>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemClock_Config+0x154>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemClock_Config+0x154>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <SystemClock_Config+0x150>)
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	4a2a      	ldr	r2, [pc, #168]	; (8000794 <SystemClock_Config+0x150>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0x150>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006fe:	bf00      	nop
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <SystemClock_Config+0x154>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800070c:	d1f8      	bne.n	8000700 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070e:	2301      	movs	r3, #1
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071c:	2302      	movs	r3, #2
 800071e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000724:	2350      	movs	r3, #80	; 0x50
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000734:	230c      	movs	r3, #12
 8000736:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000738:	2300      	movs	r3, #0
 800073a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f825 	bl	8001794 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000750:	f000 fa9c 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	233f      	movs	r3, #63	; 0x3f
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2303      	movs	r3, #3
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000760:	2308      	movs	r3, #8
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000764:	2340      	movs	r3, #64	; 0x40
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000772:	2340      	movs	r3, #64	; 0x40
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2104      	movs	r1, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fc63 	bl	8002048 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000788:	f000 fa80 	bl	8000c8c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3778      	adds	r7, #120	; 0x78
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	58000400 	.word	0x58000400
 8000798:	58024800 	.word	0x58024800
 800079c:	58024400 	.word	0x58024400

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09a      	sub	sp, #104	; 0x68
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	222c      	movs	r2, #44	; 0x2c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 f9ae 	bl	8006b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e0:	4b49      	ldr	r3, [pc, #292]	; (8000908 <MX_TIM1_Init+0x168>)
 80007e2:	4a4a      	ldr	r2, [pc, #296]	; (800090c <MX_TIM1_Init+0x16c>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <MX_TIM1_Init+0x168>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <MX_TIM1_Init+0x168>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <MX_TIM1_Init+0x168>)
 80007f4:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80007f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b43      	ldr	r3, [pc, #268]	; (8000908 <MX_TIM1_Init+0x168>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000800:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_TIM1_Init+0x168>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <MX_TIM1_Init+0x168>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080c:	483e      	ldr	r0, [pc, #248]	; (8000908 <MX_TIM1_Init+0x168>)
 800080e:	f003 fdd3 	bl	80043b8 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 fa38 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000826:	4619      	mov	r1, r3
 8000828:	4837      	ldr	r0, [pc, #220]	; (8000908 <MX_TIM1_Init+0x168>)
 800082a:	f004 fa21 	bl	8004c70 <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fa2a 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000838:	4833      	ldr	r0, [pc, #204]	; (8000908 <MX_TIM1_Init+0x168>)
 800083a:	f003 fe8d 	bl	8004558 <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000844:	f000 fa22 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	482b      	ldr	r0, [pc, #172]	; (8000908 <MX_TIM1_Init+0x168>)
 800085c:	f004 ff68 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000866:	f000 fa11 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <MX_TIM1_Init+0x168>)
 8000890:	f004 f8da 	bl	8004a48 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800089a:	f000 f9f7 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a2:	2204      	movs	r2, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4818      	ldr	r0, [pc, #96]	; (8000908 <MX_TIM1_Init+0x168>)
 80008a8:	f004 f8ce 	bl	8004a48 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008b2:	f000 f9eb 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <MX_TIM1_Init+0x168>)
 80008ec:	f004 ffae 	bl	800584c <HAL_TIMEx_ConfigBreakDeadTime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80008f6:	f000 f9c9 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <MX_TIM1_Init+0x168>)
 80008fc:	f000 fa0e 	bl	8000d1c <HAL_TIM_MspPostInit>

}
 8000900:	bf00      	nop
 8000902:	3768      	adds	r7, #104	; 0x68
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000034 	.word	0x24000034
 800090c:	40010000 	.word	0x40010000

08000910 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_UART4_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_UART4_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_UART4_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_UART4_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_UART4_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_UART4_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_UART4_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_UART4_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_UART4_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_UART4_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_UART4_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_UART4_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_UART4_Init+0x90>)
 800095a:	f005 f813 	bl	8005984 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f992 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_UART4_Init+0x90>)
 800096c:	f006 f81b 	bl	80069a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f989 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_UART4_Init+0x90>)
 800097e:	f006 f850 	bl	8006a22 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f980 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_UART4_Init+0x90>)
 800098e:	f005 ffd1 	bl	8006934 <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 f978 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000080 	.word	0x24000080
 80009a4:	40004c00 	.word	0x40004c00

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xbc>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xbc>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_GPIO_Init+0xbc>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xbc>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <MX_GPIO_Init+0xbc>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_GPIO_Init+0xbc>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TMR_1_1_PH_Pin|TMR_1_2_PH_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2103      	movs	r1, #3
 8000a3a:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0xc0>)
 8000a3c:	f000 fe56 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TMR_1_1_PH_Pin TMR_1_2_PH_Pin */
  GPIO_InitStruct.Pin = TMR_1_1_PH_Pin|TMR_1_2_PH_Pin;
 8000a40:	2303      	movs	r3, #3
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0xc0>)
 8000a58:	f000 fc98 	bl	800138c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024400 	.word	0x58024400
 8000a68:	58021000 	.word	0x58021000
 8000a6c:	00000000 	.word	0x00000000

08000a70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8000a78:	230a      	movs	r3, #10
 8000a7a:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8000a7c:	a324      	add	r3, pc, #144	; (adr r3, 8000b10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a82:	e9c7 2302 	strd	r2, r3, [r7, #8]


    if (htim==&htim1){
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12d      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a96:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000aa2:	6979      	ldr	r1, [r7, #20]
 8000aa4:	fb01 f202 	mul.w	r2, r1, r2
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d11d      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ab6:	db02      	blt.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	ed93 6b00 	vldr	d6, [r3]
 8000acc:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ad0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000ad6:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ae2:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8000aea:	bf00      	nop
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	24000034 	.word	0x24000034
 8000afc:	24002060 	.word	0x24002060
 8000b00:	24002064 	.word	0x24002064
 8000b04:	24000120 	.word	0x24000120
 8000b08:	24000118 	.word	0x24000118
 8000b0c:	24000114 	.word	0x24000114
 8000b10:	33333333 	.word	0x33333333
 8000b14:	3fd33333 	.word	0x3fd33333

08000b18 <control_update>:

static void control_update(double ref)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	int new_phase = {0};
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8000b32:	ed97 7b00 	vldr	d7, [r7]
 8000b36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3e:	d503      	bpl.n	8000b48 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <control_update+0x98>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e002      	b.n	8000b4e <control_update+0x36>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <control_update+0x98>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){
		HAL_GPIO_WritePin(TMR_1_1_PH_GPIO_Port, TMR_1_1_PH_Pin, phase);
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <control_update+0x98>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	2101      	movs	r1, #1
 8000b58:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <control_update+0x9c>)
 8000b5a:	f000 fdc7 	bl	80016ec <HAL_GPIO_WritePin>
//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8000b5e:	ed97 7b00 	vldr	d7, [r7]
 8000b62:	eeb0 7bc7 	vabs.f64	d7, d7
 8000b66:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8000b6a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000ba8 <control_update+0x90>
 8000b6e:	eeb0 1b47 	vmov.f64	d1, d7
 8000b72:	ed97 0b04 	vldr	d0, [r7, #16]
 8000b76:	f000 f827 	bl	8000bc8 <calc_dutycycle>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <control_update+0xa0>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	89fa      	ldrh	r2, [r7, #14]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d006      	beq.n	8000b96 <control_update+0x7e>
		// then save new dutycycle
		dutycycle = new_dc;
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <control_update+0xa0>)
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		TIM1->CCR1 = dutycycle;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <control_update+0xa0>)
 8000b90:	881a      	ldrh	r2, [r3, #0]
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <control_update+0xa4>)
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <control_update+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	3ffccccc 	.word	0x3ffccccc
 8000bb0:	24000000 	.word	0x24000000
 8000bb4:	58021000 	.word	0x58021000
 8000bb8:	24002068 	.word	0x24002068
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	24000114 	.word	0x24000114
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	ed87 0b02 	vstr	d0, [r7, #8]
 8000bd2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8000bda:	ed97 5b02 	vldr	d5, [r7, #8]
 8000bde:	ed97 6b00 	vldr	d6, [r7]
 8000be2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000be6:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000c18 <calc_dutycycle+0x50>
 8000bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf2:	ee17 3a90 	vmov	r3, s15
 8000bf6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8000bf8:	8afb      	ldrh	r3, [r7, #22]
 8000bfa:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d902      	bls.n	8000c08 <calc_dutycycle+0x40>
 8000c02:	f645 53bf 	movw	r3, #23999	; 0x5dbf
 8000c06:	82fb      	strh	r3, [r7, #22]

	return dc;
 8000c08:	8afb      	ldrh	r3, [r7, #22]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	371c      	adds	r7, #28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40d76fc0 	.word	0x40d76fc0

08000c20 <gen_sine>:

static void gen_sine(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
	int i = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8000c2a:	a316      	add	r3, pc, #88	; (adr r3, 8000c84 <gen_sine+0x64>)
 8000c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c30:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e017      	b.n	8000c6a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c44:	ed97 7b00 	vldr	d7, [r7]
 8000c48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c4c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c50:	f005 ffa2 	bl	8006b98 <sin>
 8000c54:	eeb0 7b40 	vmov.f64	d7, d0
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <gen_sine+0x60>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c70:	dbe3      	blt.n	8000c3a <gen_sine+0x1a>
	}
}
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	f3af 8000 	nop.w
 8000c80:	24000120 	.word	0x24000120
 8000c84:	b68b71c3 	.word	0xb68b71c3
 8000c88:	3f79bc65 	.word	0x3f79bc65

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca4:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x30>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x30>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d116      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2019      	movs	r0, #25
 8000d02:	f000 fb0e 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 fb25 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40010000 	.word	0x40010000
 8000d18:	58024400 	.word	0x58024400

08000d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_TIM_MspPostInit+0x6c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d11f      	bne.n	8000d7e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_TIM_MspPostInit+0x70>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d44:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_TIM_MspPostInit+0x70>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_TIM_MspPostInit+0x70>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000d5c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_TIM_MspPostInit+0x74>)
 8000d7a:	f000 fb07 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3720      	adds	r7, #32
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	58021000 	.word	0x58021000

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ba      	sub	sp, #232	; 0xe8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	22c0      	movs	r2, #192	; 0xc0
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 fec1 	bl	8006b3c <memset>
  if(huart->Instance==UART4)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <HAL_UART_MspInit+0xc4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d145      	bne.n	8000e50 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000dc4:	f04f 0202 	mov.w	r2, #2
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fcc0 	bl	8002760 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000de6:	f7ff ff51 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df0:	4a1a      	ldr	r2, [pc, #104]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_UART_MspInit+0xc8>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <HAL_UART_MspInit+0xcc>)
 8000e4c:	f000 fa9e 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	37e8      	adds	r7, #232	; 0xe8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40004c00 	.word	0x40004c00
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020000 	.word	0x58020000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 f930 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM1_UP_IRQHandler+0x10>)
 8000ebe:	f003 fcbb 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	24000034 	.word	0x24000034

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <SystemInit+0xe4>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <SystemInit+0xe4>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ee0:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <SystemInit+0xe8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d807      	bhi.n	8000efc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <SystemInit+0xe8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 030f 	bic.w	r3, r3, #15
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <SystemInit+0xe8>)
 8000ef6:	f043 0307 	orr.w	r3, r3, #7
 8000efa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <SystemInit+0xec>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <SystemInit+0xec>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <SystemInit+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <SystemInit+0xec>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4929      	ldr	r1, [pc, #164]	; (8000fb8 <SystemInit+0xec>)
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <SystemInit+0xf0>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <SystemInit+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <SystemInit+0xe8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 030f 	bic.w	r3, r3, #15
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <SystemInit+0xe8>)
 8000f30:	f043 0307 	orr.w	r3, r3, #7
 8000f34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <SystemInit+0xec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <SystemInit+0xec>)
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <SystemInit+0xf4>)
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <SystemInit+0xec>)
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <SystemInit+0xf8>)
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <SystemInit+0xec>)
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <SystemInit+0xfc>)
 8000f58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <SystemInit+0xec>)
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <SystemInit+0xfc>)
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <SystemInit+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <SystemInit+0xec>)
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <SystemInit+0xfc>)
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <SystemInit+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <SystemInit+0xec>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <SystemInit+0xec>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <SystemInit+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <SystemInit+0x100>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <SystemInit+0x104>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f96:	d202      	bcs.n	8000f9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <SystemInit+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <SystemInit+0x10c>)
 8000fa0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fa4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00
 8000fb4:	52002000 	.word	0x52002000
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fc0:	02020200 	.word	0x02020200
 8000fc4:	01ff0000 	.word	0x01ff0000
 8000fc8:	01010280 	.word	0x01010280
 8000fcc:	5c001000 	.word	0x5c001000
 8000fd0:	ffff0000 	.word	0xffff0000
 8000fd4:	51008108 	.word	0x51008108
 8000fd8:	52004000 	.word	0x52004000

08000fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001014 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff ff74 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f005 fd9f 	bl	8006b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100e:	f7ff fae1 	bl	80005d4 <main>
  bx  lr
 8001012:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001014:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001018:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800101c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001020:	080079a8 	.word	0x080079a8
  ldr r2, =_sbss
 8001024:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001028:	24002070 	.word	0x24002070

0800102c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC3_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001036:	2003      	movs	r0, #3
 8001038:	f000 f968 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800103c:	f001 f9ba 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_Init+0x68>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <HAL_Init+0x6c>)
 800104e:	5ccb      	ldrb	r3, [r1, r3]
 8001050:	f003 031f 	and.w	r3, r3, #31
 8001054:	fa22 f303 	lsr.w	r3, r2, r3
 8001058:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_Init+0x68>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_Init+0x6c>)
 8001064:	5cd3      	ldrb	r3, [r2, r3]
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_Init+0x70>)
 8001072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_Init+0x74>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f814 	bl	80010a8 <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e002      	b.n	8001090 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800108a:	f7ff fe05 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58024400 	.word	0x58024400
 800109c:	08007788 	.word	0x08007788
 80010a0:	24000008 	.word	0x24000008
 80010a4:	24000004 	.word	0x24000004

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_InitTick+0x60>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e021      	b.n	8001100 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_InitTick+0x64>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f94d 	bl	8001372 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 f917 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x68>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	24000010 	.word	0x24000010
 800110c:	24000004 	.word	0x24000004
 8001110:	2400000c 	.word	0x2400000c

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	24000010 	.word	0x24000010
 8001138:	2400206c 	.word	0x2400206c

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2400206c 	.word	0x2400206c

08001154 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetREVID+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0c1b      	lsrs	r3, r3, #16
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	5c001000 	.word	0x5c001000

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	4313      	orrs	r3, r2
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x40>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00
 80011b0:	05fa0000 	.word	0x05fa0000

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff40 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff33 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa4 	bl	80012c8 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800139a:	4b89      	ldr	r3, [pc, #548]	; (80015c0 <HAL_GPIO_Init+0x234>)
 800139c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800139e:	e194      	b.n	80016ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2101      	movs	r1, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8186 	beq.w	80016c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d005      	beq.n	80013d0 <HAL_GPIO_Init+0x44>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d130      	bne.n	8001432 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001406:	2201      	movs	r2, #1
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 0201 	and.w	r2, r3, #1
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	2b03      	cmp	r3, #3
 800143c:	d017      	beq.n	800146e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d123      	bne.n	80014c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	220f      	movs	r2, #15
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0203 	and.w	r2, r3, #3
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80e0 	beq.w	80016c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x238>)
 8001506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150a:	4a2e      	ldr	r2, [pc, #184]	; (80015c4 <HAL_GPIO_Init+0x238>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_GPIO_Init+0x238>)
 8001516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <HAL_GPIO_Init+0x23c>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <HAL_GPIO_Init+0x240>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d052      	beq.n	80015f4 <HAL_GPIO_Init+0x268>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_GPIO_Init+0x244>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d031      	beq.n	80015ba <HAL_GPIO_Init+0x22e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_GPIO_Init+0x248>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d02b      	beq.n	80015b6 <HAL_GPIO_Init+0x22a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_GPIO_Init+0x24c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_GPIO_Init+0x250>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x254>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_GPIO_Init+0x258>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_GPIO_Init+0x25c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_GPIO_Init+0x260>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <HAL_GPIO_Init+0x264>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x20e>
 8001596:	2309      	movs	r3, #9
 8001598:	e02d      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 800159a:	230a      	movs	r3, #10
 800159c:	e02b      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 800159e:	2308      	movs	r3, #8
 80015a0:	e029      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e027      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e025      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e023      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e021      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e01f      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e01d      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01b      	b.n	80015f6 <HAL_GPIO_Init+0x26a>
 80015be:	bf00      	nop
 80015c0:	58000080 	.word	0x58000080
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58000400 	.word	0x58000400
 80015cc:	58020000 	.word	0x58020000
 80015d0:	58020400 	.word	0x58020400
 80015d4:	58020800 	.word	0x58020800
 80015d8:	58020c00 	.word	0x58020c00
 80015dc:	58021000 	.word	0x58021000
 80015e0:	58021400 	.word	0x58021400
 80015e4:	58021800 	.word	0x58021800
 80015e8:	58021c00 	.word	0x58021c00
 80015ec:	58022000 	.word	0x58022000
 80015f0:	58022400 	.word	0x58022400
 80015f4:	2300      	movs	r3, #0
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001606:	4938      	ldr	r1, [pc, #224]	; (80016e8 <HAL_GPIO_Init+0x35c>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800163a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f ae63 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3724      	adds	r7, #36	; 0x24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_PWREx_ConfigSupply+0x70>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b04      	cmp	r3, #4
 8001732:	d00a      	beq.n	800174a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_PWREx_ConfigSupply+0x70>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e01f      	b.n	8001786 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e01d      	b.n	8001786 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_PWREx_ConfigSupply+0x70>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	490f      	ldr	r1, [pc, #60]	; (8001790 <HAL_PWREx_ConfigSupply+0x70>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800175a:	f7ff fcef 	bl	800113c <HAL_GetTick>
 800175e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001760:	e009      	b.n	8001776 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001762:	f7ff fceb 	bl	800113c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001770:	d901      	bls.n	8001776 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e007      	b.n	8001786 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_PWREx_ConfigSupply+0x70>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001782:	d1ee      	bne.n	8001762 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	58024800 	.word	0x58024800

08001794 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 bc48 	b.w	8002038 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8088 	beq.w	80018c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b6:	4b99      	ldr	r3, [pc, #612]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c0:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0x48>
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	2b18      	cmp	r3, #24
 80017d0:	d111      	bne.n	80017f6 <HAL_RCC_OscConfig+0x62>
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d06d      	beq.n	80018c4 <HAL_RCC_OscConfig+0x130>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d169      	bne.n	80018c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f000 bc21 	b.w	8002038 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x7a>
 8001800:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a85      	ldr	r2, [pc, #532]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e02e      	b.n	800186c <HAL_RCC_OscConfig+0xd8>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x9c>
 8001816:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a80      	ldr	r2, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800181c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7d      	ldr	r2, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xd8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xc0>
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a74      	ldr	r2, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xd8>
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a70      	ldr	r2, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6e      	ldr	r3, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6d      	ldr	r2, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fc62 	bl	800113c <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff fc5e 	bl	800113c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e3d4      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xe8>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fc4e 	bl	800113c <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fc4a 	bl	800113c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e3c0      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b6:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x110>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80ca 	beq.w	8001a68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d4:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <HAL_RCC_OscConfig+0x166>
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	2b18      	cmp	r3, #24
 80018ee:	d156      	bne.n	800199e <HAL_RCC_OscConfig+0x20a>
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d151      	bne.n	800199e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x17e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e392      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001912:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0219 	bic.w	r2, r3, #25
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	493f      	ldr	r1, [pc, #252]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fc0a 	bl	800113c <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff fc06 	bl	800113c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e37c      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	f7ff fc03 	bl	8001154 <HAL_GetREVID>
 800194e:	4603      	mov	r3, r0
 8001950:	f241 0203 	movw	r2, #4099	; 0x1003
 8001954:	4293      	cmp	r3, r2
 8001956:	d817      	bhi.n	8001988 <HAL_RCC_OscConfig+0x1f4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b40      	cmp	r3, #64	; 0x40
 800195e:	d108      	bne.n	8001972 <HAL_RCC_OscConfig+0x1de>
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	e07a      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	031b      	lsls	r3, r3, #12
 8001980:	4926      	ldr	r1, [pc, #152]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001986:	e06f      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	4921      	ldr	r1, [pc, #132]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199c:	e064      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d047      	beq.n	8001a36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0219 	bic.w	r2, r3, #25
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fbc0 	bl	800113c <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fbbc 	bl	800113c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e332      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	f7ff fbb9 	bl	8001154 <HAL_GetREVID>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d819      	bhi.n	8001a20 <HAL_RCC_OscConfig+0x28c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b40      	cmp	r3, #64	; 0x40
 80019f2:	d108      	bne.n	8001a06 <HAL_RCC_OscConfig+0x272>
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 80019fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a02:	6053      	str	r3, [r2, #4]
 8001a04:	e030      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	031b      	lsls	r3, r3, #12
 8001a14:	4901      	ldr	r1, [pc, #4]	; (8001a1c <HAL_RCC_OscConfig+0x288>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
 8001a1a:	e025      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	4b9a      	ldr	r3, [pc, #616]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4997      	ldr	r1, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b95      	ldr	r3, [pc, #596]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb7b 	bl	800113c <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb77 	bl	800113c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e2ed      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a5c:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a9 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a80:	4b82      	ldr	r3, [pc, #520]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d007      	beq.n	8001a9c <HAL_RCC_OscConfig+0x308>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b18      	cmp	r3, #24
 8001a90:	d13a      	bne.n	8001b08 <HAL_RCC_OscConfig+0x374>
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d135      	bne.n	8001b08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x320>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e2c1      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab4:	f7ff fb4e 	bl	8001154 <HAL_GetREVID>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f241 0203 	movw	r2, #4099	; 0x1003
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d817      	bhi.n	8001af2 <HAL_RCC_OscConfig+0x35e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_OscConfig+0x348>
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ad8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ada:	e075      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	069b      	lsls	r3, r3, #26
 8001aea:	4968      	ldr	r1, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af0:	e06a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	061b      	lsls	r3, r3, #24
 8001b00:	4962      	ldr	r1, [pc, #392]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b06:	e05f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d042      	beq.n	8001b96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a5d      	ldr	r2, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fb0e 	bl	800113c <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b24:	f7ff fb0a 	bl	800113c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e280      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b36:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b42:	f7ff fb07 	bl	8001154 <HAL_GetREVID>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d817      	bhi.n	8001b80 <HAL_RCC_OscConfig+0x3ec>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3d6>
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b60:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b66:	6053      	str	r3, [r2, #4]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
 8001b6a:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	069b      	lsls	r3, r3, #26
 8001b78:	4944      	ldr	r1, [pc, #272]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
 8001b7e:	e023      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	493f      	ldr	r1, [pc, #252]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e018      	b.n	8001bc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff facb 	bl	800113c <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001baa:	f7ff fac7 	bl	800113c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e23d      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d036      	beq.n	8001c42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d019      	beq.n	8001c10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff faa8 	bl	800113c <HAL_GetTick>
 8001bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff faa4 	bl	800113c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e21a      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x45c>
 8001c0e:	e018      	b.n	8001c42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fa8e 	bl	800113c <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff fa8a 	bl	800113c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e200      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d039      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fa6b 	bl	800113c <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c6a:	f7ff fa67 	bl	800113c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1dd      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4d6>
 8001c88:	e01b      	b.n	8001cc2 <HAL_RCC_OscConfig+0x52e>
 8001c8a:	bf00      	nop
 8001c8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c90:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a9a      	ldr	r2, [pc, #616]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fa4e 	bl	800113c <HAL_GetTick>
 8001ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca4:	f7ff fa4a 	bl	800113c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1c0      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cb6:	4b92      	ldr	r3, [pc, #584]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8081 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff fa2e 	bl	800113c <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7ff fa2a 	bl	800113c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1a0      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x584>
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e02d      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5a6>
 8001d20:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a76      	ldr	r2, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b74      	ldr	r3, [pc, #464]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a73      	ldr	r2, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e01c      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b05      	cmp	r3, #5
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c8>
 8001d42:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a6b      	ldr	r2, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0x5e0>
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a67      	ldr	r2, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a64      	ldr	r2, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d015      	beq.n	8001da8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f9de 	bl	800113c <HAL_GetTick>
 8001d80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d84:	f7ff f9da 	bl	800113c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e14e      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9a:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ee      	beq.n	8001d84 <HAL_RCC_OscConfig+0x5f0>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff f9c8 	bl	800113c <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7ff f9c4 	bl	800113c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e138      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ee      	bne.n	8001db0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 812d 	beq.w	8002036 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001de4:	2b18      	cmp	r3, #24
 8001de6:	f000 80bd 	beq.w	8001f64 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 809e 	bne.w	8001f30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f99c 	bl	800113c <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f998 	bl	800113c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e10e      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_RCC_OscConfig+0x774>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4931      	ldr	r1, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	3b01      	subs	r3, #1
 8001e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	025b      	lsls	r3, r3, #9
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	061b      	lsls	r3, r3, #24
 8001e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e70:	4923      	ldr	r1, [pc, #140]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e76:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x778>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e8e:	00d2      	lsls	r2, r2, #3
 8001e90:	491b      	ldr	r1, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f023 020c 	bic.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f023 0202 	bic.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	4912      	ldr	r1, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f921 	bl	800113c <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x78e>
 8001efe:	bf00      	nop
 8001f00:	58024400 	.word	0x58024400
 8001f04:	58024800 	.word	0x58024800
 8001f08:	fffffc0c 	.word	0xfffffc0c
 8001f0c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f914 	bl	800113c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e08a      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x77c>
 8001f2e:	e082      	b.n	8002036 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a42      	ldr	r2, [pc, #264]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f8fe 	bl	800113c <HAL_GetTick>
 8001f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff f8fa 	bl	800113c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e070      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x7b0>
 8001f62:	e068      	b.n	8002036 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f6a:	4b35      	ldr	r3, [pc, #212]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d031      	beq.n	8001fdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d12a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d11a      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0a5b      	lsrs	r3, r3, #9
 8001faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d111      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0e1b      	lsrs	r3, r3, #24
 8001fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e02b      	b.n	8002038 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d01f      	beq.n	8002036 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002002:	f7ff f89b 	bl	800113c <HAL_GetTick>
 8002006:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002008:	bf00      	nop
 800200a:	f7ff f897 	bl	800113c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	4293      	cmp	r3, r2
 8002014:	d0f9      	beq.n	800200a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x8b0>)
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002022:	00d2      	lsls	r2, r2, #3
 8002024:	4906      	ldr	r1, [pc, #24]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8002026:	4313      	orrs	r3, r2
 8002028:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_RCC_OscConfig+0x8ac>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3730      	adds	r7, #48	; 0x30
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58024400 	.word	0x58024400
 8002044:	ffff0007 	.word	0xffff0007

08002048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e19c      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b87      	ldr	r3, [pc, #540]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	4985      	ldr	r1, [pc, #532]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b83      	ldr	r3, [pc, #524]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e184      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d010      	beq.n	80020ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	4b7b      	ldr	r3, [pc, #492]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d908      	bls.n	80020ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4975      	ldr	r1, [pc, #468]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d908      	bls.n	80020e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	496a      	ldr	r1, [pc, #424]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	4b64      	ldr	r3, [pc, #400]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002100:	429a      	cmp	r2, r3
 8002102:	d908      	bls.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002104:	4b61      	ldr	r3, [pc, #388]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	495e      	ldr	r1, [pc, #376]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002112:	4313      	orrs	r3, r2
 8002114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d010      	beq.n	8002144 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800212e:	429a      	cmp	r2, r3
 8002130:	d908      	bls.n	8002144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4953      	ldr	r1, [pc, #332]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002140:	4313      	orrs	r3, r2
 8002142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d010      	beq.n	8002172 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b4d      	ldr	r3, [pc, #308]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	429a      	cmp	r2, r3
 800215e:	d908      	bls.n	8002172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f023 020f 	bic.w	r2, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4947      	ldr	r1, [pc, #284]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800216e:	4313      	orrs	r3, r2
 8002170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d055      	beq.n	800222a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4940      	ldr	r1, [pc, #256]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800218c:	4313      	orrs	r3, r2
 800218e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d107      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002198:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d121      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0f6      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d115      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0ea      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0de      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d6      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f023 0207 	bic.w	r2, r3, #7
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fa:	f7fe ff9f 	bl	800113c <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002200:	e00a      	b.n	8002218 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002202:	f7fe ff9b 	bl	800113c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0be      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	429a      	cmp	r2, r3
 8002228:	d1eb      	bne.n	8002202 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	429a      	cmp	r2, r3
 8002244:	d208      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <HAL_RCC_ClockConfig+0x244>)
 8002254:	4313      	orrs	r3, r2
 8002256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d214      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	4906      	ldr	r1, [pc, #24]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_RCC_ClockConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e086      	b.n	8002396 <HAL_RCC_ClockConfig+0x34e>
 8002288:	52002000 	.word	0x52002000
 800228c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d010      	beq.n	80022be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d208      	bcs.n	80022be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d010      	beq.n	80022ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d208      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	492e      	ldr	r1, [pc, #184]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002304:	429a      	cmp	r2, r3
 8002306:	d208      	bcs.n	800231a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 8002316:	4313      	orrs	r3, r2
 8002318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d208      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4917      	ldr	r1, [pc, #92]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 8002344:	4313      	orrs	r3, r2
 8002346:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002348:	f000 f834 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	4912      	ldr	r1, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x35c>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x358>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <HAL_RCC_ClockConfig+0x35c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x360>)
 800237e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x364>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x368>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe8c 	bl	80010a8 <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	08007788 	.word	0x08007788
 80023a8:	24000008 	.word	0x24000008
 80023ac:	24000004 	.word	0x24000004
 80023b0:	2400000c 	.word	0x2400000c

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ba:	4bb3      	ldr	r3, [pc, #716]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c2:	2b18      	cmp	r3, #24
 80023c4:	f200 8155 	bhi.w	8002672 <HAL_RCC_GetSysClockFreq+0x2be>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	08002435 	.word	0x08002435
 80023d4:	08002673 	.word	0x08002673
 80023d8:	08002673 	.word	0x08002673
 80023dc:	08002673 	.word	0x08002673
 80023e0:	08002673 	.word	0x08002673
 80023e4:	08002673 	.word	0x08002673
 80023e8:	08002673 	.word	0x08002673
 80023ec:	08002673 	.word	0x08002673
 80023f0:	0800245b 	.word	0x0800245b
 80023f4:	08002673 	.word	0x08002673
 80023f8:	08002673 	.word	0x08002673
 80023fc:	08002673 	.word	0x08002673
 8002400:	08002673 	.word	0x08002673
 8002404:	08002673 	.word	0x08002673
 8002408:	08002673 	.word	0x08002673
 800240c:	08002673 	.word	0x08002673
 8002410:	08002461 	.word	0x08002461
 8002414:	08002673 	.word	0x08002673
 8002418:	08002673 	.word	0x08002673
 800241c:	08002673 	.word	0x08002673
 8002420:	08002673 	.word	0x08002673
 8002424:	08002673 	.word	0x08002673
 8002428:	08002673 	.word	0x08002673
 800242c:	08002673 	.word	0x08002673
 8002430:	08002467 	.word	0x08002467
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002434:	4b94      	ldr	r3, [pc, #592]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002440:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	4a90      	ldr	r2, [pc, #576]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002452:	e111      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002454:	4b8d      	ldr	r3, [pc, #564]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002456:	61bb      	str	r3, [r7, #24]
      break;
 8002458:	e10e      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800245a:	4b8d      	ldr	r3, [pc, #564]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800245c:	61bb      	str	r3, [r7, #24]
      break;
 800245e:	e10b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002460:	4b8c      	ldr	r3, [pc, #560]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002462:	61bb      	str	r3, [r7, #24]
      break;
 8002464:	e108      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002470:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800247c:	4b82      	ldr	r3, [pc, #520]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002486:	4b80      	ldr	r3, [pc, #512]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248a:	08db      	lsrs	r3, r3, #3
 800248c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80e1 	beq.w	800266c <HAL_RCC_GetSysClockFreq+0x2b8>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f000 8083 	beq.w	80025b8 <HAL_RCC_GetSysClockFreq+0x204>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f200 80a1 	bhi.w	80025fc <HAL_RCC_GetSysClockFreq+0x248>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x114>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d056      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024c6:	e099      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02d      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024d4:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	4a6b      	ldr	r2, [pc, #428]	; (800268c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fe:	4b62      	ldr	r3, [pc, #392]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002512:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800251a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800252e:	e087      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800269c <HAL_RCC_GetSysClockFreq+0x2e8>
 800253e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002552:	ed97 6a02 	vldr	s12, [r7, #8]
 8002556:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800255a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002572:	e065      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002596:	ed97 6a02 	vldr	s12, [r7, #8]
 800259a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800259e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025b6:	e043      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ca:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025da:	ed97 6a02 	vldr	s12, [r7, #8]
 80025de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025fa:	e021      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002606:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800260a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800261e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002622:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002698 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800262a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800262e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800263e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	0a5b      	lsrs	r3, r3, #9
 8002646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800264a:	3301      	adds	r3, #1
 800264c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002658:	edd7 6a07 	vldr	s13, [r7, #28]
 800265c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002664:	ee17 3a90 	vmov	r3, s15
 8002668:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800266a:	e005      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
      break;
 8002670:	e002      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002674:	61bb      	str	r3, [r7, #24]
      break;
 8002676:	bf00      	nop
  }

  return sysclockfreq;
 8002678:	69bb      	ldr	r3, [r7, #24]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	58024400 	.word	0x58024400
 800268c:	03d09000 	.word	0x03d09000
 8002690:	003d0900 	.word	0x003d0900
 8002694:	016e3600 	.word	0x016e3600
 8002698:	46000000 	.word	0x46000000
 800269c:	4c742400 	.word	0x4c742400
 80026a0:	4a742400 	.word	0x4a742400
 80026a4:	4bb71b00 	.word	0x4bb71b00

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026ae:	f7ff fe81 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490f      	ldr	r1, [pc, #60]	; (80026fc <HAL_RCC_GetHCLKFreq+0x54>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026cc:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_RCC_GetHCLKFreq+0x54>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_RCC_GetHCLKFreq+0x58>)
 80026e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <HAL_RCC_GetHCLKFreq+0x58>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	58024400 	.word	0x58024400
 80026fc:	08007788 	.word	0x08007788
 8002700:	24000008 	.word	0x24000008
 8002704:	24000004 	.word	0x24000004

08002708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800270c:	f7ff ffcc 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58024400 	.word	0x58024400
 8002730:	08007788 	.word	0x08007788

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002738:	f7ff ffb6 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4904      	ldr	r1, [pc, #16]	; (800275c <HAL_RCC_GetPCLK2Freq+0x28>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	58024400 	.word	0x58024400
 800275c:	08007788 	.word	0x08007788

08002760 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002764:	b0ca      	sub	sp, #296	; 0x128
 8002766:	af00      	add	r7, sp, #0
 8002768:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002772:	2300      	movs	r3, #0
 8002774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002784:	2500      	movs	r5, #0
 8002786:	ea54 0305 	orrs.w	r3, r4, r5
 800278a:	d049      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800278c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002792:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002796:	d02f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800279c:	d828      	bhi.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800279e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027a2:	d01a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027a8:	d822      	bhi.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027b2:	d007      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b4:	e01c      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b6:	4bb8      	ldr	r3, [pc, #736]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	4ab7      	ldr	r2, [pc, #732]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027c2:	e01a      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c8:	3308      	adds	r3, #8
 80027ca:	2102      	movs	r1, #2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 fc8f 	bl	80040f0 <RCCEx_PLL2_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027d8:	e00f      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027de:	3328      	adds	r3, #40	; 0x28
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fd36 	bl	8004254 <RCCEx_PLL3_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ee:	e004      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027f6:	e000      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002802:	4ba5      	ldr	r3, [pc, #660]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800280a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002810:	4aa1      	ldr	r2, [pc, #644]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002812:	430b      	orrs	r3, r1
 8002814:	6513      	str	r3, [r2, #80]	; 0x50
 8002816:	e003      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800281c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800282c:	f04f 0900 	mov.w	r9, #0
 8002830:	ea58 0309 	orrs.w	r3, r8, r9
 8002834:	d047      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	2b04      	cmp	r3, #4
 800283e:	d82a      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	0800285d 	.word	0x0800285d
 800284c:	0800286b 	.word	0x0800286b
 8002850:	08002881 	.word	0x08002881
 8002854:	0800289f 	.word	0x0800289f
 8002858:	0800289f 	.word	0x0800289f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285c:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	4a8d      	ldr	r2, [pc, #564]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002868:	e01a      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800286e:	3308      	adds	r3, #8
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fc3c 	bl	80040f0 <RCCEx_PLL2_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287e:	e00f      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002884:	3328      	adds	r3, #40	; 0x28
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fce3 	bl	8004254 <RCCEx_PLL3_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002894:	e004      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800289e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a8:	4b7b      	ldr	r3, [pc, #492]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	f023 0107 	bic.w	r1, r3, #7
 80028b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a78      	ldr	r2, [pc, #480]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6513      	str	r3, [r2, #80]	; 0x50
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80028d2:	f04f 0b00 	mov.w	fp, #0
 80028d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80028da:	d04c      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d030      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ec:	d829      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028ee:	2bc0      	cmp	r3, #192	; 0xc0
 80028f0:	d02d      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028f2:	2bc0      	cmp	r3, #192	; 0xc0
 80028f4:	d825      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d018      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d821      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d007      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002906:	e01c      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	4a62      	ldr	r2, [pc, #392]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800290e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002914:	e01c      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800291a:	3308      	adds	r3, #8
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fbe6 	bl	80040f0 <RCCEx_PLL2_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800292a:	e011      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002930:	3328      	adds	r3, #40	; 0x28
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f001 fc8d 	bl	8004254 <RCCEx_PLL3_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002948:	e002      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800294e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002958:	4b4f      	ldr	r3, [pc, #316]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002968:	430b      	orrs	r3, r1
 800296a:	6513      	str	r3, [r2, #80]	; 0x50
 800296c:	e003      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002982:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800298c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002990:	460b      	mov	r3, r1
 8002992:	4313      	orrs	r3, r2
 8002994:	d053      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800299e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a2:	d035      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a8:	d82e      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029ae:	d031      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029b4:	d828      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d01a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80029bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c0:	d822      	bhi.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80029c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ca:	d007      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029da:	e01c      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029e0:	3308      	adds	r3, #8
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 fb83 	bl	80040f0 <RCCEx_PLL2_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029f0:	e011      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f6:	3328      	adds	r3, #40	; 0x28
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 fc2a 	bl	8004254 <RCCEx_PLL3_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a06:	e006      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	e003      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a54:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	d056      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6a:	d038      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a70:	d831      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a76:	d034      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a7c:	d82b      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a82:	d01d      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a88:	d825      	bhi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a94:	e01f      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a96:	bf00      	nop
 8002a98:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4ba2      	ldr	r3, [pc, #648]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4aa1      	ldr	r2, [pc, #644]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aae:	3308      	adds	r3, #8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fb1c 	bl	80040f0 <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac4:	3328      	adds	r3, #40	; 0x28
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 fbc3 	bl	8004254 <RCCEx_PLL3_Config>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002aec:	4b8e      	ldr	r3, [pc, #568]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002afc:	4a8a      	ldr	r2, [pc, #552]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002afe:	430b      	orrs	r3, r1
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
 8002b02:	e003      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002b26:	460b      	mov	r3, r1
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	d03a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b32:	2b30      	cmp	r3, #48	; 0x30
 8002b34:	d01f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b36:	2b30      	cmp	r3, #48	; 0x30
 8002b38:	d819      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d815      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d019      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d111      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4a:	4b77      	ldr	r3, [pc, #476]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	4a76      	ldr	r2, [pc, #472]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b56:	e011      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fac5 	bl	80040f0 <RCCEx_PLL2_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b6c:	e006      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002bae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	d051      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bcc:	d035      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd2:	d82e      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bd8:	d031      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bde:	d828      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be4:	d01a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d822      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf4:	d007      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c04:	e01c      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fa6e 	bl	80040f0 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c1a:	e011      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c20:	3328      	adds	r3, #40	; 0x28
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 fb15 	bl	8004254 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c38:	e002      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c5c:	e003      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c80:	460b      	mov	r3, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d056      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d033      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c96:	d82c      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9c:	d02f      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca2:	d826      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ca4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ca8:	d02b      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002caa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cae:	d820      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb4:	d012      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cba:	d81a      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cca:	3308      	adds	r3, #8
 8002ccc:	2101      	movs	r1, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fa0e 	bl	80040f0 <RCCEx_PLL2_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cda:	e015      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce0:	3328      	adds	r3, #40	; 0x28
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 fab5 	bl	8004254 <RCCEx_PLL3_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cf8:	e006      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cfa:	bf00      	nop
 8002cfc:	e004      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cfe:	bf00      	nop
 8002d00:	e002      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1e:	4a02      	ldr	r2, [pc, #8]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6513      	str	r3, [r2, #80]	; 0x50
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4313      	orrs	r3, r2
 8002d52:	d055      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d60:	d033      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d66:	d82c      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d02f      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d72:	d826      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d78:	d02b      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d7e:	d820      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d84:	d012      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8a:	d81a      	bhi.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d022      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d94:	d115      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 f9a6 	bl	80040f0 <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002daa:	e015      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db0:	3328      	adds	r3, #40	; 0x28
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fa4d 	bl	8004254 <RCCEx_PLL3_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dca:	bf00      	nop
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002de0:	4ba3      	ldr	r3, [pc, #652]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002df0:	4a9f      	ldr	r2, [pc, #636]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6593      	str	r3, [r2, #88]	; 0x58
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d037      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2a:	d00e      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e30:	d816      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a8b      	ldr	r2, [pc, #556]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e48:	e00f      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e4e:	3308      	adds	r3, #8
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 f94c 	bl	80040f0 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e5e:	e004      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e66:	e000      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a7b      	ldr	r2, [pc, #492]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e82:	430b      	orrs	r3, r1
 8002e84:	6513      	str	r3, [r2, #80]	; 0x50
 8002e86:	e003      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002ea6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4313      	orrs	r3, r2
 8002eae:	d039      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d81c      	bhi.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002ed1 	.word	0x08002ed1
 8002ec8:	08002edf 	.word	0x08002edf
 8002ecc:	08002efd 	.word	0x08002efd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed0:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002edc:	e00f      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f902 	bl	80040f0 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ef2:	e004      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f06:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	f023 0103 	bic.w	r1, r3, #3
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	4a56      	ldr	r2, [pc, #344]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1a:	e003      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f000 809f 	beq.w	8003084 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f52:	f7fe f8f3 	bl	800113c <HAL_GetTick>
 8002f56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5c:	f7fe f8ee 	bl	800113c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d903      	bls.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f74:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ed      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d179      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f94:	4053      	eors	r3, r2
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d015      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a2d      	ldr	r2, [pc, #180]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd6:	d118      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f8b0 	bl	800113c <HAL_GetTick>
 8002fdc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe0:	e00d      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe f8ab 	bl	800113c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fec:	1ad2      	subs	r2, r2, r3
 8002fee:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d903      	bls.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002ffc:	e005      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0eb      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800300a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800300e:	2b00      	cmp	r3, #0
 8003010:	d129      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003022:	d10e      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003034:	091a      	lsrs	r2, r3, #4
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003038:	4013      	ands	r3, r2
 800303a:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6113      	str	r3, [r2, #16]
 8003040:	e005      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800304c:	6113      	str	r3, [r2, #16]
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003050:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003060:	430b      	orrs	r3, r1
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
 8003064:	e00e      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800306a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800306e:	e009      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003070:	58024400 	.word	0x58024400
 8003074:	58024800 	.word	0x58024800
 8003078:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f002 0301 	and.w	r3, r2, #1
 8003090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800309a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800309e:	460b      	mov	r3, r1
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f000 8089 	beq.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ac:	2b28      	cmp	r3, #40	; 0x28
 80030ae:	d86b      	bhi.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	08003191 	.word	0x08003191
 80030bc:	08003189 	.word	0x08003189
 80030c0:	08003189 	.word	0x08003189
 80030c4:	08003189 	.word	0x08003189
 80030c8:	08003189 	.word	0x08003189
 80030cc:	08003189 	.word	0x08003189
 80030d0:	08003189 	.word	0x08003189
 80030d4:	08003189 	.word	0x08003189
 80030d8:	0800315d 	.word	0x0800315d
 80030dc:	08003189 	.word	0x08003189
 80030e0:	08003189 	.word	0x08003189
 80030e4:	08003189 	.word	0x08003189
 80030e8:	08003189 	.word	0x08003189
 80030ec:	08003189 	.word	0x08003189
 80030f0:	08003189 	.word	0x08003189
 80030f4:	08003189 	.word	0x08003189
 80030f8:	08003173 	.word	0x08003173
 80030fc:	08003189 	.word	0x08003189
 8003100:	08003189 	.word	0x08003189
 8003104:	08003189 	.word	0x08003189
 8003108:	08003189 	.word	0x08003189
 800310c:	08003189 	.word	0x08003189
 8003110:	08003189 	.word	0x08003189
 8003114:	08003189 	.word	0x08003189
 8003118:	08003191 	.word	0x08003191
 800311c:	08003189 	.word	0x08003189
 8003120:	08003189 	.word	0x08003189
 8003124:	08003189 	.word	0x08003189
 8003128:	08003189 	.word	0x08003189
 800312c:	08003189 	.word	0x08003189
 8003130:	08003189 	.word	0x08003189
 8003134:	08003189 	.word	0x08003189
 8003138:	08003191 	.word	0x08003191
 800313c:	08003189 	.word	0x08003189
 8003140:	08003189 	.word	0x08003189
 8003144:	08003189 	.word	0x08003189
 8003148:	08003189 	.word	0x08003189
 800314c:	08003189 	.word	0x08003189
 8003150:	08003189 	.word	0x08003189
 8003154:	08003189 	.word	0x08003189
 8003158:	08003191 	.word	0x08003191
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003160:	3308      	adds	r3, #8
 8003162:	2101      	movs	r1, #1
 8003164:	4618      	mov	r0, r3
 8003166:	f000 ffc3 	bl	80040f0 <RCCEx_PLL2_Config>
 800316a:	4603      	mov	r3, r0
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003170:	e00f      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	3328      	adds	r3, #40	; 0x28
 8003178:	2101      	movs	r1, #1
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f86a 	bl	8004254 <RCCEx_PLL3_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003186:	e004      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800318e:	e000      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800319a:	4bbf      	ldr	r3, [pc, #764]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80031a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a8:	4abb      	ldr	r2, [pc, #748]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031aa:	430b      	orrs	r3, r1
 80031ac:	6553      	str	r3, [r2, #84]	; 0x54
 80031ae:	e003      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 0302 	and.w	r3, r2, #2
 80031c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80031d2:	460b      	mov	r3, r1
 80031d4:	4313      	orrs	r3, r2
 80031d6:	d041      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d824      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003235 	.word	0x08003235
 80031ec:	08003201 	.word	0x08003201
 80031f0:	08003217 	.word	0x08003217
 80031f4:	08003235 	.word	0x08003235
 80031f8:	08003235 	.word	0x08003235
 80031fc:	08003235 	.word	0x08003235
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003204:	3308      	adds	r3, #8
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff71 	bl	80040f0 <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003214:	e00f      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321a:	3328      	adds	r3, #40	; 0x28
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f001 f818 	bl	8004254 <RCCEx_PLL3_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800322a:	e004      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800323e:	4b96      	ldr	r3, [pc, #600]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f023 0107 	bic.w	r1, r3, #7
 8003246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800324a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324c:	4a92      	ldr	r2, [pc, #584]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800324e:	430b      	orrs	r3, r1
 8003250:	6553      	str	r3, [r2, #84]	; 0x54
 8003252:	e003      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003258:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f002 0304 	and.w	r3, r2, #4
 8003268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003272:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003276:	460b      	mov	r3, r1
 8003278:	4313      	orrs	r3, r2
 800327a:	d044      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800327c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003284:	2b05      	cmp	r3, #5
 8003286:	d825      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032dd 	.word	0x080032dd
 8003294:	080032a9 	.word	0x080032a9
 8003298:	080032bf 	.word	0x080032bf
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	080032dd 	.word	0x080032dd
 80032a4:	080032dd 	.word	0x080032dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ac:	3308      	adds	r3, #8
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ff1d 	bl	80040f0 <RCCEx_PLL2_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032bc:	e00f      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c2:	3328      	adds	r3, #40	; 0x28
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 ffc4 	bl	8004254 <RCCEx_PLL3_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032d2:	e004      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e6:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f023 0107 	bic.w	r1, r3, #7
 80032ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
 80032fc:	e003      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f002 0320 	and.w	r3, r2, #32
 8003312:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800331c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003320:	460b      	mov	r3, r1
 8003322:	4313      	orrs	r3, r2
 8003324:	d055      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003332:	d033      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003338:	d82c      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d02f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d826      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800334a:	d02b      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800334c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003350:	d820      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003356:	d012      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335c:	d81a      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d022      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003366:	d115      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336c:	3308      	adds	r3, #8
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f000 febd 	bl	80040f0 <RCCEx_PLL2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800337c:	e015      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003382:	3328      	adds	r3, #40	; 0x28
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff64 	bl	8004254 <RCCEx_PLL3_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003392:	e00a      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800339a:	e006      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800339c:	bf00      	nop
 800339e:	e004      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033a0:	bf00      	nop
 80033a2:	e002      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10b      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a35      	ldr	r2, [pc, #212]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6553      	str	r3, [r2, #84]	; 0x54
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80033de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4313      	orrs	r3, r2
 80033f0:	d058      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033fe:	d033      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003400:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003404:	d82c      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	d02f      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d826      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003412:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003416:	d02b      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800341c:	d820      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800341e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003422:	d012      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003428:	d81a      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d022      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d115      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003438:	3308      	adds	r3, #8
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fe57 	bl	80040f0 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003448:	e015      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344e:	3328      	adds	r3, #40	; 0x28
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fefe 	bl	8004254 <RCCEx_PLL3_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800345e:	e00a      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003466:	e006      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003468:	bf00      	nop
 800346a:	e004      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800346c:	bf00      	nop
 800346e:	e002      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800348e:	4a02      	ldr	r2, [pc, #8]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6593      	str	r3, [r2, #88]	; 0x58
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003496:	bf00      	nop
 8003498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80034b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d055      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034d0:	d033      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80034d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034d6:	d82c      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d02f      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e2:	d826      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034e8:	d02b      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034ee:	d820      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f4:	d012      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80034f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fa:	d81a      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d022      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003504:	d115      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350a:	3308      	adds	r3, #8
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fdee 	bl	80040f0 <RCCEx_PLL2_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800351a:	e015      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	3328      	adds	r3, #40	; 0x28
 8003522:	2102      	movs	r1, #2
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fe95 	bl	8004254 <RCCEx_PLL3_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003530:	e00a      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003538:	e006      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800353a:	bf00      	nop
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003550:	4ba1      	ldr	r3, [pc, #644]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003560:	4a9d      	ldr	r2, [pc, #628]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003562:	430b      	orrs	r3, r1
 8003564:	6593      	str	r3, [r2, #88]	; 0x58
 8003566:	e003      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800356c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f002 0308 	and.w	r3, r2, #8
 800357c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003586:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800358a:	460b      	mov	r3, r1
 800358c:	4313      	orrs	r3, r2
 800358e:	d01e      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	3328      	adds	r3, #40	; 0x28
 80035a4:	2102      	movs	r1, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fe54 	bl	8004254 <RCCEx_PLL3_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035b8:	4b87      	ldr	r3, [pc, #540]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	4a83      	ldr	r2, [pc, #524]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ca:	430b      	orrs	r3, r1
 80035cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f002 0310 	and.w	r3, r2, #16
 80035da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d01e      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fa:	d10c      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003600:	3328      	adds	r3, #40	; 0x28
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fe25 	bl	8004254 <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003616:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003626:	4a6c      	ldr	r2, [pc, #432]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003628:	430b      	orrs	r3, r1
 800362a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003642:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003646:	460b      	mov	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	d03e      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003650:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003658:	d022      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800365a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800365e:	d81b      	bhi.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d00b      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800366a:	e015      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800366c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003670:	3308      	adds	r3, #8
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fd3b 	bl	80040f0 <RCCEx_PLL2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003680:	e00f      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003686:	3328      	adds	r3, #40	; 0x28
 8003688:	2102      	movs	r1, #2
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fde2 	bl	8004254 <RCCEx_PLL3_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003696:	e004      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80036a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036ba:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	6593      	str	r3, [r2, #88]	; 0x58
 80036c0:	e003      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80036d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80036d8:	2300      	movs	r3, #0
 80036da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f2:	d01f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80036f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f8:	d818      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80036fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003704:	d007      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003706:	e011      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4b33      	ldr	r3, [pc, #204]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a32      	ldr	r2, [pc, #200]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003714:	e00f      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371a:	3328      	adds	r3, #40	; 0x28
 800371c:	2101      	movs	r1, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fd98 	bl	8004254 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	4a22      	ldr	r2, [pc, #136]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6553      	str	r3, [r2, #84]	; 0x54
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
 800376c:	2300      	movs	r3, #0
 800376e:	677b      	str	r3, [r7, #116]	; 0x74
 8003770:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d034      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800378a:	e011      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003798:	e00e      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379e:	3308      	adds	r3, #8
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fca4 	bl	80040f0 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037ae:	e003      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	4a02      	ldr	r2, [pc, #8]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d4:	e006      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80037f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80037f2:	2300      	movs	r3, #0
 80037f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d00c      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	3328      	adds	r3, #40	; 0x28
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fd23 	bl	8004254 <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003826:	663b      	str	r3, [r7, #96]	; 0x60
 8003828:	2300      	movs	r3, #0
 800382a:	667b      	str	r3, [r7, #100]	; 0x64
 800382c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d038      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003842:	d018      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003848:	d811      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800384a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384e:	d014      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003854:	d80b      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800385a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385e:	d106      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003860:	4bc3      	ldr	r3, [pc, #780]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	4ac2      	ldr	r2, [pc, #776]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003874:	e004      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003876:	bf00      	nop
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10b      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003888:	4bb9      	ldr	r3, [pc, #740]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003898:	4ab5      	ldr	r2, [pc, #724]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800389a:	430b      	orrs	r3, r1
 800389c:	6553      	str	r3, [r2, #84]	; 0x54
 800389e:	e003      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80038b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80038b6:	2300      	movs	r3, #0
 80038b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038c4:	4baa      	ldr	r3, [pc, #680]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	4aa7      	ldr	r2, [pc, #668]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80038e4:	653b      	str	r3, [r7, #80]	; 0x50
 80038e6:	2300      	movs	r3, #0
 80038e8:	657b      	str	r3, [r7, #84]	; 0x54
 80038ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80038ee:	460b      	mov	r3, r1
 80038f0:	4313      	orrs	r3, r2
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038f4:	4b9e      	ldr	r3, [pc, #632]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003900:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003904:	4a9a      	ldr	r2, [pc, #616]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003906:	430b      	orrs	r3, r1
 8003908:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
 8003918:	2300      	movs	r3, #0
 800391a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800391c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003926:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003934:	4a8e      	ldr	r2, [pc, #568]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003946:	643b      	str	r3, [r7, #64]	; 0x40
 8003948:	2300      	movs	r3, #0
 800394a:	647b      	str	r3, [r7, #68]	; 0x44
 800394c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003956:	4b86      	ldr	r3, [pc, #536]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4a85      	ldr	r2, [pc, #532]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800395c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003960:	6113      	str	r3, [r2, #16]
 8003962:	4b83      	ldr	r3, [pc, #524]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003964:	6919      	ldr	r1, [r3, #16]
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003980:	63bb      	str	r3, [r7, #56]	; 0x38
 8003982:	2300      	movs	r3, #0
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003986:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003990:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	4a74      	ldr	r2, [pc, #464]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039a0:	430b      	orrs	r3, r1
 80039a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
 80039b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039c0:	4b6b      	ldr	r3, [pc, #428]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	2100      	movs	r1, #0
 80039e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80039ec:	460b      	mov	r3, r1
 80039ee:	4313      	orrs	r3, r2
 80039f0:	d011      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f6:	3308      	adds	r3, #8
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fb78 	bl	80040f0 <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	2100      	movs	r1, #0
 8003a20:	6239      	str	r1, [r7, #32]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d011      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	3308      	adds	r3, #8
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fb58 	bl	80040f0 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	61b9      	str	r1, [r7, #24]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d011      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a76:	3308      	adds	r3, #8
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb38 	bl	80040f0 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	6139      	str	r1, [r7, #16]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d011      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab6:	3328      	adds	r3, #40	; 0x28
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fbca 	bl	8004254 <RCCEx_PLL3_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d011      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	3328      	adds	r3, #40	; 0x28
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fbaa 	bl	8004254 <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d011      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b36:	3328      	adds	r3, #40	; 0x28
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb8a 	bl	8004254 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003b56:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b70:	58024400 	.word	0x58024400

08003b74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b78:	f7fe fd96 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	08007788 	.word	0x08007788

08003ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ba8:	4ba1      	ldr	r3, [pc, #644]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003bb2:	4b9f      	ldr	r3, [pc, #636]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	0b1b      	lsrs	r3, r3, #12
 8003bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bbe:	4b9c      	ldr	r3, [pc, #624]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003bca:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8111 	beq.w	8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	f000 8083 	beq.w	8003cfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	f200 80a1 	bhi.w	8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d056      	beq.n	8003cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c0a:	e099      	b.n	8003d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c0c:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02d      	beq.n	8003c74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c18:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	08db      	lsrs	r3, r3, #3
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	4a84      	ldr	r2, [pc, #528]	; (8003e34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
 8003c28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c42:	4b7b      	ldr	r3, [pc, #492]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c72:	e087      	b.n	8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c86:	4b6a      	ldr	r3, [pc, #424]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cb6:	e065      	b.n	8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cca:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cfa:	e043      	b.n	8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d3e:	e021      	b.n	8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d84:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	0a5b      	lsrs	r3, r3, #9
 8003d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003daa:	ee17 2a90 	vmov	r2, s15
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd8:	ee17 2a90 	vmov	r2, s15
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e06:	ee17 2a90 	vmov	r2, s15
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e0e:	e008      	b.n	8003e22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	bf00      	nop
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	03d09000 	.word	0x03d09000
 8003e38:	46000000 	.word	0x46000000
 8003e3c:	4c742400 	.word	0x4c742400
 8003e40:	4a742400 	.word	0x4a742400
 8003e44:	4bb71b00 	.word	0x4bb71b00

08003e48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e50:	4ba1      	ldr	r3, [pc, #644]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e5a:	4b9f      	ldr	r3, [pc, #636]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	0d1b      	lsrs	r3, r3, #20
 8003e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e66:	4b9c      	ldr	r3, [pc, #624]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e72:	4b99      	ldr	r3, [pc, #612]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8111 	beq.w	80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	f000 8083 	beq.w	8003fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	f200 80a1 	bhi.w	8003fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d056      	beq.n	8003f60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003eb2:	e099      	b.n	8003fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eb4:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02d      	beq.n	8003f1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ec0:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	08db      	lsrs	r3, r3, #3
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	4a84      	ldr	r2, [pc, #528]	; (80040dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eea:	4b7b      	ldr	r3, [pc, #492]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003efe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f1a:	e087      	b.n	800402c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f42:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f5e:	e065      	b.n	800402c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f86:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fa2:	e043      	b.n	800402c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fe6:	e021      	b.n	800402c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a03 	vldr	s12, [r7, #12]
 800400e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	0a5b      	lsrs	r3, r3, #9
 8004032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004046:	edd7 6a07 	vldr	s13, [r7, #28]
 800404a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004052:	ee17 2a90 	vmov	r2, s15
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004074:	edd7 6a07 	vldr	s13, [r7, #28]
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 2a90 	vmov	r2, s15
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	0e1b      	lsrs	r3, r3, #24
 800408e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800409e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ae:	ee17 2a90 	vmov	r2, s15
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
}
 80040ca:	bf00      	nop
 80040cc:	3724      	adds	r7, #36	; 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
 80040dc:	03d09000 	.word	0x03d09000
 80040e0:	46000000 	.word	0x46000000
 80040e4:	4c742400 	.word	0x4c742400
 80040e8:	4a742400 	.word	0x4a742400
 80040ec:	4bb71b00 	.word	0x4bb71b00

080040f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040fe:	4b53      	ldr	r3, [pc, #332]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b03      	cmp	r3, #3
 8004108:	d101      	bne.n	800410e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e099      	b.n	8004242 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800410e:	4b4f      	ldr	r3, [pc, #316]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a4e      	ldr	r2, [pc, #312]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004114:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411a:	f7fd f80f 	bl	800113c <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004120:	e008      	b.n	8004134 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004122:	f7fd f80b 	bl	800113c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e086      	b.n	8004242 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004134:	4b45      	ldr	r3, [pc, #276]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004140:	4b42      	ldr	r3, [pc, #264]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	493f      	ldr	r1, [pc, #252]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	628b      	str	r3, [r1, #40]	; 0x28
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	3b01      	subs	r3, #1
 800415a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	3b01      	subs	r3, #1
 8004164:	025b      	lsls	r3, r3, #9
 8004166:	b29b      	uxth	r3, r3
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	3b01      	subs	r3, #1
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	3b01      	subs	r3, #1
 800417e:	061b      	lsls	r3, r3, #24
 8004180:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004184:	4931      	ldr	r1, [pc, #196]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800418a:	4b30      	ldr	r3, [pc, #192]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	492d      	ldr	r1, [pc, #180]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f023 0220 	bic.w	r2, r3, #32
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	4928      	ldr	r1, [pc, #160]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	4a26      	ldr	r2, [pc, #152]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041b4:	f023 0310 	bic.w	r3, r3, #16
 80041b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041be:	4b24      	ldr	r3, [pc, #144]	; (8004250 <RCCEx_PLL2_Config+0x160>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	69d2      	ldr	r2, [r2, #28]
 80041c6:	00d2      	lsls	r2, r2, #3
 80041c8:	4920      	ldr	r1, [pc, #128]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041ce:	4b1f      	ldr	r3, [pc, #124]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041d4:	f043 0310 	orr.w	r3, r3, #16
 80041d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041e0:	4b1a      	ldr	r3, [pc, #104]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041ec:	e00f      	b.n	800420e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d106      	bne.n	8004202 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041f4:	4b15      	ldr	r3, [pc, #84]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004200:	e005      	b.n	800420e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	4a11      	ldr	r2, [pc, #68]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800420c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421a:	f7fc ff8f 	bl	800113c <HAL_GetTick>
 800421e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004220:	e008      	b.n	8004234 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004222:	f7fc ff8b 	bl	800113c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <RCCEx_PLL2_Config+0x15c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
 8004250:	ffff0007 	.word	0xffff0007

08004254 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004262:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d101      	bne.n	8004272 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e099      	b.n	80043a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004272:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4e      	ldr	r2, [pc, #312]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427e:	f7fc ff5d 	bl	800113c <HAL_GetTick>
 8004282:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004284:	e008      	b.n	8004298 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004286:	f7fc ff59 	bl	800113c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e086      	b.n	80043a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004298:	4b45      	ldr	r3, [pc, #276]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042a4:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	051b      	lsls	r3, r3, #20
 80042b2:	493f      	ldr	r1, [pc, #252]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	628b      	str	r3, [r1, #40]	; 0x28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	3b01      	subs	r3, #1
 80042be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042e8:	4931      	ldr	r1, [pc, #196]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042ee:	4b30      	ldr	r3, [pc, #192]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	492d      	ldr	r1, [pc, #180]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	4928      	ldr	r1, [pc, #160]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004322:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <RCCEx_PLL3_Config+0x160>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	69d2      	ldr	r2, [r2, #28]
 800432a:	00d2      	lsls	r2, r2, #3
 800432c:	4920      	ldr	r1, [pc, #128]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004332:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800434a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004350:	e00f      	b.n	8004372 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d106      	bne.n	8004366 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800435e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004364:	e005      	b.n	8004372 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	4a11      	ldr	r2, [pc, #68]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800436c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004370:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437e:	f7fc fedd 	bl	800113c <HAL_GetTick>
 8004382:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004384:	e008      	b.n	8004398 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004386:	f7fc fed9 	bl	800113c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <RCCEx_PLL3_Config+0x15c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	58024400 	.word	0x58024400
 80043b4:	ffff0007 	.word	0xffff0007

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e049      	b.n	800445e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fc74 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fd5a 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e054      	b.n	800452a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <HAL_TIM_Base_Start_IT+0xd0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d022      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d01d      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <HAL_TIM_Base_Start_IT+0xd4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d018      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a21      	ldr	r2, [pc, #132]	; (8004540 <HAL_TIM_Base_Start_IT+0xd8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <HAL_TIM_Base_Start_IT+0xdc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00e      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_TIM_Base_Start_IT+0xe0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	; (800454c <HAL_TIM_Base_Start_IT+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x80>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <HAL_TIM_Base_Start_IT+0xe8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d115      	bne.n	8004514 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_TIM_Base_Start_IT+0xec>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d015      	beq.n	8004526 <HAL_TIM_Base_Start_IT+0xbe>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004500:	d011      	beq.n	8004526 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e008      	b.n	8004526 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e000      	b.n	8004528 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40000c00 	.word	0x40000c00
 8004548:	40010400 	.word	0x40010400
 800454c:	40001800 	.word	0x40001800
 8004550:	40014000 	.word	0x40014000
 8004554:	00010007 	.word	0x00010007

08004558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e049      	b.n	80045fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f841 	bl	8004606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 fc8a 	bl	8004eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x24>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e03c      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x3e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e02f      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x58>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e022      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d109      	bne.n	800468e <HAL_TIM_PWM_Start+0x72>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf14      	ite	ne
 8004686:	2301      	movne	r3, #1
 8004688:	2300      	moveq	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	e015      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b10      	cmp	r3, #16
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_PWM_Start+0x8c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e008      	b.n	80046ba <HAL_TIM_PWM_Start+0x9e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	bf14      	ite	ne
 80046b4:	2301      	movne	r3, #1
 80046b6:	2300      	moveq	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0a1      	b.n	8004806 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_PWM_Start+0xb6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d0:	e023      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start+0xc6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e0:	e01b      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0xd6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046f0:	e013      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0xe6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004700:	e00b      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b10      	cmp	r3, #16
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0xf6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	e003      	b.n	800471a <HAL_TIM_PWM_Start+0xfe>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2202      	movs	r2, #2
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	6839      	ldr	r1, [r7, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 ffde 	bl	80056e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_TIM_PWM_Start+0x1f4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_TIM_PWM_Start+0x13e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a37      	ldr	r2, [pc, #220]	; (8004814 <HAL_TIM_PWM_Start+0x1f8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIM_PWM_Start+0x13e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a35      	ldr	r2, [pc, #212]	; (8004818 <HAL_TIM_PWM_Start+0x1fc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIM_PWM_Start+0x13e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a34      	ldr	r2, [pc, #208]	; (800481c <HAL_TIM_PWM_Start+0x200>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIM_PWM_Start+0x13e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a32      	ldr	r2, [pc, #200]	; (8004820 <HAL_TIM_PWM_Start+0x204>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_Start+0x142>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_TIM_PWM_Start+0x144>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004772:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a25      	ldr	r2, [pc, #148]	; (8004810 <HAL_TIM_PWM_Start+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d01d      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_TIM_PWM_Start+0x208>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a24      	ldr	r2, [pc, #144]	; (8004828 <HAL_TIM_PWM_Start+0x20c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_TIM_PWM_Start+0x210>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_TIM_PWM_Start+0x1f8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIM_PWM_Start+0x214>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x1a8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a16      	ldr	r2, [pc, #88]	; (8004818 <HAL_TIM_PWM_Start+0x1fc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d115      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_TIM_PWM_Start+0x218>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b06      	cmp	r3, #6
 80047d4:	d015      	beq.n	8004802 <HAL_TIM_PWM_Start+0x1e6>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d011      	beq.n	8004802 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	e008      	b.n	8004802 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	e000      	b.n	8004804 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40001800 	.word	0x40001800
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d020      	beq.n	800489c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 faf6 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fae8 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 faf9 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d020      	beq.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01b      	beq.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fad0 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fac2 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fad3 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d020      	beq.n	8004934 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0208 	mvn.w	r2, #8
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2204      	movs	r2, #4
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 faaa 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa9c 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 faad 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d020      	beq.n	8004980 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0210 	mvn.w	r2, #16
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2208      	movs	r2, #8
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa84 	bl	8004e74 <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa76 	bl	8004e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa87 	bl	8004e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0201 	mvn.w	r2, #1
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc f866 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 ffc5 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 ffbd 	bl	8005970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa41 	bl	8004e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f06f 0220 	mvn.w	r2, #32
 8004a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 ff85 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0ff      	b.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b14      	cmp	r3, #20
 8004a72:	f200 80f0 	bhi.w	8004c56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004ad1 	.word	0x08004ad1
 8004a80:	08004c57 	.word	0x08004c57
 8004a84:	08004c57 	.word	0x08004c57
 8004a88:	08004c57 	.word	0x08004c57
 8004a8c:	08004b11 	.word	0x08004b11
 8004a90:	08004c57 	.word	0x08004c57
 8004a94:	08004c57 	.word	0x08004c57
 8004a98:	08004c57 	.word	0x08004c57
 8004a9c:	08004b53 	.word	0x08004b53
 8004aa0:	08004c57 	.word	0x08004c57
 8004aa4:	08004c57 	.word	0x08004c57
 8004aa8:	08004c57 	.word	0x08004c57
 8004aac:	08004b93 	.word	0x08004b93
 8004ab0:	08004c57 	.word	0x08004c57
 8004ab4:	08004c57 	.word	0x08004c57
 8004ab8:	08004c57 	.word	0x08004c57
 8004abc:	08004bd5 	.word	0x08004bd5
 8004ac0:	08004c57 	.word	0x08004c57
 8004ac4:	08004c57 	.word	0x08004c57
 8004ac8:	08004c57 	.word	0x08004c57
 8004acc:	08004c15 	.word	0x08004c15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fa90 	bl	8004ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6999      	ldr	r1, [r3, #24]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	619a      	str	r2, [r3, #24]
      break;
 8004b0e:	e0a5      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fb00 	bl	800511c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6999      	ldr	r1, [r3, #24]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]
      break;
 8004b50:	e084      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb69 	bl	8005230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0208 	orr.w	r2, r2, #8
 8004b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0204 	bic.w	r2, r2, #4
 8004b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	61da      	str	r2, [r3, #28]
      break;
 8004b90:	e064      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fbd1 	bl	8005340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69d9      	ldr	r1, [r3, #28]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	021a      	lsls	r2, r3, #8
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	61da      	str	r2, [r3, #28]
      break;
 8004bd2:	e043      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fc1a 	bl	8005414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0204 	bic.w	r2, r2, #4
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c12:	e023      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fc5e 	bl	80054dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c54:	e002      	b.n	8004c5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	75fb      	strb	r3, [r7, #23]
      break;
 8004c5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop

08004c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIM_ConfigClockSource+0x1c>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e0dc      	b.n	8004e46 <HAL_TIM_ConfigClockSource+0x1d6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a64      	ldr	r2, [pc, #400]	; (8004e54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	f000 80a9 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004cc8:	4a62      	ldr	r2, [pc, #392]	; (8004e54 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	f200 80ae 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004cd0:	4a61      	ldr	r2, [pc, #388]	; (8004e58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f000 80a1 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004cd8:	4a5f      	ldr	r2, [pc, #380]	; (8004e58 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	f200 80a6 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f000 8099 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004ce8:	4a5c      	ldr	r2, [pc, #368]	; (8004e5c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	f200 809e 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004cf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004cf4:	f000 8091 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004cf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004cfc:	f200 8096 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d04:	f000 8089 	beq.w	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0c:	f200 808e 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d14:	d03e      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0x124>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	f200 8087 	bhi.w	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	f000 8086 	beq.w	8004e32 <HAL_TIM_ConfigClockSource+0x1c2>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	d87f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d2c:	2b70      	cmp	r3, #112	; 0x70
 8004d2e:	d01a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0xf6>
 8004d30:	2b70      	cmp	r3, #112	; 0x70
 8004d32:	d87b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d34:	2b60      	cmp	r3, #96	; 0x60
 8004d36:	d050      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x16a>
 8004d38:	2b60      	cmp	r3, #96	; 0x60
 8004d3a:	d877      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d3c:	2b50      	cmp	r3, #80	; 0x50
 8004d3e:	d03c      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x14a>
 8004d40:	2b50      	cmp	r3, #80	; 0x50
 8004d42:	d873      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d058      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x18a>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d86f      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d4c:	2b30      	cmp	r3, #48	; 0x30
 8004d4e:	d064      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004d50:	2b30      	cmp	r3, #48	; 0x30
 8004d52:	d86b      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d060      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d867      	bhi.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05c      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d05a      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x1aa>
 8004d64:	e062      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d76:	f000 fc95 	bl	80056a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
      break;
 8004d92:	e04f      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	f000 fc7e 	bl	80056a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689a      	ldr	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db6:	609a      	str	r2, [r3, #8]
      break;
 8004db8:	e03c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fbee 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2150      	movs	r1, #80	; 0x50
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fc48 	bl	8005668 <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e02c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de6:	461a      	mov	r2, r3
 8004de8:	f000 fc0d 	bl	8005606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2160      	movs	r1, #96	; 0x60
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fc38 	bl	8005668 <TIM_ITRx_SetConfig>
      break;
 8004df8:	e01c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	461a      	mov	r2, r3
 8004e08:	f000 fbce 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fc28 	bl	8005668 <TIM_ITRx_SetConfig>
      break;
 8004e18:	e00c      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f000 fc1f 	bl	8005668 <TIM_ITRx_SetConfig>
      break;
 8004e2a:	e003      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e000      	b.n	8004e34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	ffceff88 	.word	0xffceff88
 8004e54:	00100040 	.word	0x00100040
 8004e58:	00100030 	.word	0x00100030
 8004e5c:	00100020 	.word	0x00100020

08004e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d00f      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a43      	ldr	r2, [pc, #268]	; (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a42      	ldr	r2, [pc, #264]	; (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a40      	ldr	r2, [pc, #256]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d108      	bne.n	8004f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a35      	ldr	r2, [pc, #212]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01f      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d01b      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <TIM_Base_SetConfig+0x130>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d017      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a31      	ldr	r2, [pc, #196]	; (8004fe4 <TIM_Base_SetConfig+0x134>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <TIM_Base_SetConfig+0x138>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00f      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2e      	ldr	r2, [pc, #184]	; (8004ff0 <TIM_Base_SetConfig+0x140>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <TIM_Base_SetConfig+0x144>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x148>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d108      	bne.n	8004f5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <TIM_Base_SetConfig+0x12c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a18      	ldr	r2, [pc, #96]	; (8004fec <TIM_Base_SetConfig+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a17      	ldr	r2, [pc, #92]	; (8004ff0 <TIM_Base_SetConfig+0x140>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <TIM_Base_SetConfig+0x144>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0xf8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <TIM_Base_SetConfig+0x148>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d103      	bne.n	8004fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d105      	bne.n	8004fce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f023 0201 	bic.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f023 0201 	bic.w	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4b37      	ldr	r3, [pc, #220]	; (8005104 <TIM_OC1_SetConfig+0x108>)
 8005028:	4013      	ands	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0302 	bic.w	r3, r3, #2
 8005044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <TIM_OC1_SetConfig+0x10c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00f      	beq.n	8005078 <TIM_OC1_SetConfig+0x7c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <TIM_OC1_SetConfig+0x110>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00b      	beq.n	8005078 <TIM_OC1_SetConfig+0x7c>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <TIM_OC1_SetConfig+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <TIM_OC1_SetConfig+0x7c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <TIM_OC1_SetConfig+0x118>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_OC1_SetConfig+0x7c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a29      	ldr	r2, [pc, #164]	; (8005118 <TIM_OC1_SetConfig+0x11c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10c      	bne.n	8005092 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0308 	bic.w	r3, r3, #8
 800507e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	4313      	orrs	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <TIM_OC1_SetConfig+0x10c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_OC1_SetConfig+0xbe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a1b      	ldr	r2, [pc, #108]	; (800510c <TIM_OC1_SetConfig+0x110>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_OC1_SetConfig+0xbe>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1a      	ldr	r2, [pc, #104]	; (8005110 <TIM_OC1_SetConfig+0x114>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_OC1_SetConfig+0xbe>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a19      	ldr	r2, [pc, #100]	; (8005114 <TIM_OC1_SetConfig+0x118>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_OC1_SetConfig+0xbe>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a18      	ldr	r2, [pc, #96]	; (8005118 <TIM_OC1_SetConfig+0x11c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d111      	bne.n	80050de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	fffeff8f 	.word	0xfffeff8f
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40014400 	.word	0x40014400
 8005118:	40014800 	.word	0x40014800

0800511c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f023 0210 	bic.w	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4b34      	ldr	r3, [pc, #208]	; (8005218 <TIM_OC2_SetConfig+0xfc>)
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0320 	bic.w	r3, r3, #32
 8005166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a29      	ldr	r2, [pc, #164]	; (800521c <TIM_OC2_SetConfig+0x100>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC2_SetConfig+0x68>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a28      	ldr	r2, [pc, #160]	; (8005220 <TIM_OC2_SetConfig+0x104>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10d      	bne.n	80051a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1e      	ldr	r2, [pc, #120]	; (800521c <TIM_OC2_SetConfig+0x100>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00f      	beq.n	80051c8 <TIM_OC2_SetConfig+0xac>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <TIM_OC2_SetConfig+0x104>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00b      	beq.n	80051c8 <TIM_OC2_SetConfig+0xac>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <TIM_OC2_SetConfig+0x108>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d007      	beq.n	80051c8 <TIM_OC2_SetConfig+0xac>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <TIM_OC2_SetConfig+0x10c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC2_SetConfig+0xac>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <TIM_OC2_SetConfig+0x110>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d113      	bne.n	80051f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	feff8fff 	.word	0xfeff8fff
 800521c:	40010000 	.word	0x40010000
 8005220:	40010400 	.word	0x40010400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4b33      	ldr	r3, [pc, #204]	; (8005328 <TIM_OC3_SetConfig+0xf8>)
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a28      	ldr	r2, [pc, #160]	; (800532c <TIM_OC3_SetConfig+0xfc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_OC3_SetConfig+0x66>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <TIM_OC3_SetConfig+0x100>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d10d      	bne.n	80052b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <TIM_OC3_SetConfig+0xfc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_OC3_SetConfig+0xaa>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_OC3_SetConfig+0x100>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_OC3_SetConfig+0xaa>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <TIM_OC3_SetConfig+0x104>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_OC3_SetConfig+0xaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <TIM_OC3_SetConfig+0x108>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC3_SetConfig+0xaa>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <TIM_OC3_SetConfig+0x10c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d113      	bne.n	8005302 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	fffeff8f 	.word	0xfffeff8f
 800532c:	40010000 	.word	0x40010000
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4b24      	ldr	r3, [pc, #144]	; (80053fc <TIM_OC4_SetConfig+0xbc>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	021b      	lsls	r3, r3, #8
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800538a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	031b      	lsls	r3, r3, #12
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <TIM_OC4_SetConfig+0xc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00f      	beq.n	80053c0 <TIM_OC4_SetConfig+0x80>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <TIM_OC4_SetConfig+0xc4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <TIM_OC4_SetConfig+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a17      	ldr	r2, [pc, #92]	; (8005408 <TIM_OC4_SetConfig+0xc8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC4_SetConfig+0x80>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a16      	ldr	r2, [pc, #88]	; (800540c <TIM_OC4_SetConfig+0xcc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC4_SetConfig+0x80>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <TIM_OC4_SetConfig+0xd0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d109      	bne.n	80053d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	feff8fff 	.word	0xfeff8fff
 8005400:	40010000 	.word	0x40010000
 8005404:	40010400 	.word	0x40010400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <TIM_OC5_SetConfig+0xb0>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <TIM_OC5_SetConfig+0xb4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_OC5_SetConfig+0x76>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a17      	ldr	r2, [pc, #92]	; (80054cc <TIM_OC5_SetConfig+0xb8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_OC5_SetConfig+0x76>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <TIM_OC5_SetConfig+0xbc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_OC5_SetConfig+0x76>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <TIM_OC5_SetConfig+0xc0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC5_SetConfig+0x76>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <TIM_OC5_SetConfig+0xc4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d109      	bne.n	800549e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	fffeff8f 	.word	0xfffeff8f
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40010400 	.word	0x40010400
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40014400 	.word	0x40014400
 80054d8:	40014800 	.word	0x40014800

080054dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <TIM_OC6_SetConfig+0xb4>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800551e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	051b      	lsls	r3, r3, #20
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a19      	ldr	r2, [pc, #100]	; (8005594 <TIM_OC6_SetConfig+0xb8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00f      	beq.n	8005554 <TIM_OC6_SetConfig+0x78>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <TIM_OC6_SetConfig+0xbc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00b      	beq.n	8005554 <TIM_OC6_SetConfig+0x78>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a17      	ldr	r2, [pc, #92]	; (800559c <TIM_OC6_SetConfig+0xc0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d007      	beq.n	8005554 <TIM_OC6_SetConfig+0x78>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a16      	ldr	r2, [pc, #88]	; (80055a0 <TIM_OC6_SetConfig+0xc4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC6_SetConfig+0x78>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <TIM_OC6_SetConfig+0xc8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d109      	bne.n	8005568 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	029b      	lsls	r3, r3, #10
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	feff8fff 	.word	0xfeff8fff
 8005594:	40010000 	.word	0x40010000
 8005598:	40010400 	.word	0x40010400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 030a 	bic.w	r3, r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005606:	b480      	push	{r7}
 8005608:	b087      	sub	sp, #28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0210 	bic.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005642:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <TIM_ITRx_SetConfig+0x38>)
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	f043 0307 	orr.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	ffcfff8f 	.word	0xffcfff8f

080056a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	021a      	lsls	r2, r3, #8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2201      	movs	r2, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e06d      	b.n	8005824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005782:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d022      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d01d      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d018      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00e      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d004      	beq.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10c      	bne.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800
 8005840:	40000c00 	.word	0x40000c00
 8005844:	40001800 	.word	0x40001800
 8005848:	40014000 	.word	0x40014000

0800584c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005864:	2302      	movs	r3, #2
 8005866:	e065      	b.n	8005934 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d115      	bne.n	8005922 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	051b      	lsls	r3, r3, #20
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40010000 	.word	0x40010000
 8005944:	40010400 	.word	0x40010400

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e042      	b.n	8005a1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fb f9f3 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fd90 	bl	80064f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f825 	bl	8005a24 <UART_SetConfig>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e01b      	b.n	8005a1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fe0f 	bl	8006638 <UART_CheckIdleState>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a28:	b092      	sub	sp, #72	; 0x48
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4bbe      	ldr	r3, [pc, #760]	; (8005d4c <UART_SetConfig+0x328>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4ab3      	ldr	r2, [pc, #716]	; (8005d50 <UART_SetConfig+0x32c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4baf      	ldr	r3, [pc, #700]	; (8005d54 <UART_SetConfig+0x330>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	6812      	ldr	r2, [r2, #0]
 8005a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 010f 	bic.w	r1, r3, #15
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4aa6      	ldr	r2, [pc, #664]	; (8005d58 <UART_SetConfig+0x334>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d177      	bne.n	8005bb4 <UART_SetConfig+0x190>
 8005ac4:	4ba5      	ldr	r3, [pc, #660]	; (8005d5c <UART_SetConfig+0x338>)
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005acc:	2b28      	cmp	r3, #40	; 0x28
 8005ace:	d86d      	bhi.n	8005bac <UART_SetConfig+0x188>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0xb4>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b7d 	.word	0x08005b7d
 8005adc:	08005bad 	.word	0x08005bad
 8005ae0:	08005bad 	.word	0x08005bad
 8005ae4:	08005bad 	.word	0x08005bad
 8005ae8:	08005bad 	.word	0x08005bad
 8005aec:	08005bad 	.word	0x08005bad
 8005af0:	08005bad 	.word	0x08005bad
 8005af4:	08005bad 	.word	0x08005bad
 8005af8:	08005b85 	.word	0x08005b85
 8005afc:	08005bad 	.word	0x08005bad
 8005b00:	08005bad 	.word	0x08005bad
 8005b04:	08005bad 	.word	0x08005bad
 8005b08:	08005bad 	.word	0x08005bad
 8005b0c:	08005bad 	.word	0x08005bad
 8005b10:	08005bad 	.word	0x08005bad
 8005b14:	08005bad 	.word	0x08005bad
 8005b18:	08005b8d 	.word	0x08005b8d
 8005b1c:	08005bad 	.word	0x08005bad
 8005b20:	08005bad 	.word	0x08005bad
 8005b24:	08005bad 	.word	0x08005bad
 8005b28:	08005bad 	.word	0x08005bad
 8005b2c:	08005bad 	.word	0x08005bad
 8005b30:	08005bad 	.word	0x08005bad
 8005b34:	08005bad 	.word	0x08005bad
 8005b38:	08005b95 	.word	0x08005b95
 8005b3c:	08005bad 	.word	0x08005bad
 8005b40:	08005bad 	.word	0x08005bad
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005bad 	.word	0x08005bad
 8005b4c:	08005bad 	.word	0x08005bad
 8005b50:	08005bad 	.word	0x08005bad
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005b9d 	.word	0x08005b9d
 8005b5c:	08005bad 	.word	0x08005bad
 8005b60:	08005bad 	.word	0x08005bad
 8005b64:	08005bad 	.word	0x08005bad
 8005b68:	08005bad 	.word	0x08005bad
 8005b6c:	08005bad 	.word	0x08005bad
 8005b70:	08005bad 	.word	0x08005bad
 8005b74:	08005bad 	.word	0x08005bad
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e222      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005b84:	2304      	movs	r3, #4
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e21e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005b8c:	2308      	movs	r3, #8
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e21a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005b94:	2310      	movs	r3, #16
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e216      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005b9c:	2320      	movs	r3, #32
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e212      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e20e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e20a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a69      	ldr	r2, [pc, #420]	; (8005d60 <UART_SetConfig+0x33c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d130      	bne.n	8005c20 <UART_SetConfig+0x1fc>
 8005bbe:	4b67      	ldr	r3, [pc, #412]	; (8005d5c <UART_SetConfig+0x338>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d826      	bhi.n	8005c18 <UART_SetConfig+0x1f4>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x1ac>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be9 	.word	0x08005be9
 8005bd4:	08005bf1 	.word	0x08005bf1
 8005bd8:	08005bf9 	.word	0x08005bf9
 8005bdc:	08005c01 	.word	0x08005c01
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c11 	.word	0x08005c11
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e1ec      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e1e8      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e1e4      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e1e0      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e1dc      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c10:	2340      	movs	r3, #64	; 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e1d8      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e1d4      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a4f      	ldr	r2, [pc, #316]	; (8005d64 <UART_SetConfig+0x340>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d130      	bne.n	8005c8c <UART_SetConfig+0x268>
 8005c2a:	4b4c      	ldr	r3, [pc, #304]	; (8005d5c <UART_SetConfig+0x338>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d826      	bhi.n	8005c84 <UART_SetConfig+0x260>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x218>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c55 	.word	0x08005c55
 8005c40:	08005c5d 	.word	0x08005c5d
 8005c44:	08005c65 	.word	0x08005c65
 8005c48:	08005c6d 	.word	0x08005c6d
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	2300      	movs	r3, #0
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e1b6      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e1b2      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c64:	2308      	movs	r3, #8
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e1ae      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e1aa      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c74:	2320      	movs	r3, #32
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e1a6      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c7c:	2340      	movs	r3, #64	; 0x40
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c82:	e1a2      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c84:	2380      	movs	r3, #128	; 0x80
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8a:	e19e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <UART_SetConfig+0x344>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d130      	bne.n	8005cf8 <UART_SetConfig+0x2d4>
 8005c96:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <UART_SetConfig+0x338>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d826      	bhi.n	8005cf0 <UART_SetConfig+0x2cc>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x284>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cc1 	.word	0x08005cc1
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005cd1 	.word	0x08005cd1
 8005cb4:	08005cd9 	.word	0x08005cd9
 8005cb8:	08005ce1 	.word	0x08005ce1
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	e180      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cce:	e17c      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd6:	e178      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cde:	e174      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce6:	e170      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cee:	e16c      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf6:	e168      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <UART_SetConfig+0x348>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d142      	bne.n	8005d88 <UART_SetConfig+0x364>
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <UART_SetConfig+0x338>)
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d838      	bhi.n	8005d80 <UART_SetConfig+0x35c>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x2f0>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d35 	.word	0x08005d35
 8005d1c:	08005d3d 	.word	0x08005d3d
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d71 	.word	0x08005d71
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e14a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e146      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e142      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e13e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d4c:	cfff69f3 	.word	0xcfff69f3
 8005d50:	58000c00 	.word	0x58000c00
 8005d54:	11fff4ff 	.word	0x11fff4ff
 8005d58:	40011000 	.word	0x40011000
 8005d5c:	58024400 	.word	0x58024400
 8005d60:	40004400 	.word	0x40004400
 8005d64:	40004800 	.word	0x40004800
 8005d68:	40004c00 	.word	0x40004c00
 8005d6c:	40005000 	.word	0x40005000
 8005d70:	2320      	movs	r3, #32
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e128      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e124      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e120      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4acb      	ldr	r2, [pc, #812]	; (80060bc <UART_SetConfig+0x698>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d176      	bne.n	8005e80 <UART_SetConfig+0x45c>
 8005d92:	4bcb      	ldr	r3, [pc, #812]	; (80060c0 <UART_SetConfig+0x69c>)
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d9a:	2b28      	cmp	r3, #40	; 0x28
 8005d9c:	d86c      	bhi.n	8005e78 <UART_SetConfig+0x454>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <UART_SetConfig+0x380>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005e49 	.word	0x08005e49
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e79 	.word	0x08005e79
 8005dbc:	08005e79 	.word	0x08005e79
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e51 	.word	0x08005e51
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005e79 	.word	0x08005e79
 8005ddc:	08005e79 	.word	0x08005e79
 8005de0:	08005e79 	.word	0x08005e79
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e79 	.word	0x08005e79
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005e79 	.word	0x08005e79
 8005df4:	08005e79 	.word	0x08005e79
 8005df8:	08005e79 	.word	0x08005e79
 8005dfc:	08005e79 	.word	0x08005e79
 8005e00:	08005e79 	.word	0x08005e79
 8005e04:	08005e61 	.word	0x08005e61
 8005e08:	08005e79 	.word	0x08005e79
 8005e0c:	08005e79 	.word	0x08005e79
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005e79 	.word	0x08005e79
 8005e1c:	08005e79 	.word	0x08005e79
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e79 	.word	0x08005e79
 8005e2c:	08005e79 	.word	0x08005e79
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e79 	.word	0x08005e79
 8005e38:	08005e79 	.word	0x08005e79
 8005e3c:	08005e79 	.word	0x08005e79
 8005e40:	08005e79 	.word	0x08005e79
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e0bc      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e0b8      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e0b4      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e0b0      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e68:	2320      	movs	r3, #32
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e0ac      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e70:	2340      	movs	r3, #64	; 0x40
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e76:	e0a8      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e78:	2380      	movs	r3, #128	; 0x80
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7e:	e0a4      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a8f      	ldr	r2, [pc, #572]	; (80060c4 <UART_SetConfig+0x6a0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d130      	bne.n	8005eec <UART_SetConfig+0x4c8>
 8005e8a:	4b8d      	ldr	r3, [pc, #564]	; (80060c0 <UART_SetConfig+0x69c>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d826      	bhi.n	8005ee4 <UART_SetConfig+0x4c0>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <UART_SetConfig+0x478>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	08005ec5 	.word	0x08005ec5
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e086      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e082      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e07e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e07a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eda:	e076      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005edc:	2340      	movs	r3, #64	; 0x40
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee2:	e072      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eea:	e06e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a75      	ldr	r2, [pc, #468]	; (80060c8 <UART_SetConfig+0x6a4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d130      	bne.n	8005f58 <UART_SetConfig+0x534>
 8005ef6:	4b72      	ldr	r3, [pc, #456]	; (80060c0 <UART_SetConfig+0x69c>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d826      	bhi.n	8005f50 <UART_SetConfig+0x52c>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x4e4>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f21 	.word	0x08005f21
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f31 	.word	0x08005f31
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f49 	.word	0x08005f49
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e050      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e04c      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e048      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e044      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f40:	2320      	movs	r3, #32
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e040      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f48:	2340      	movs	r3, #64	; 0x40
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e03c      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e038      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a5b      	ldr	r2, [pc, #364]	; (80060cc <UART_SetConfig+0x6a8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d130      	bne.n	8005fc4 <UART_SetConfig+0x5a0>
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <UART_SetConfig+0x69c>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d826      	bhi.n	8005fbc <UART_SetConfig+0x598>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <UART_SetConfig+0x550>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f8d 	.word	0x08005f8d
 8005f78:	08005f95 	.word	0x08005f95
 8005f7c:	08005f9d 	.word	0x08005f9d
 8005f80:	08005fa5 	.word	0x08005fa5
 8005f84:	08005fad 	.word	0x08005fad
 8005f88:	08005fb5 	.word	0x08005fb5
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e01a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f94:	2304      	movs	r3, #4
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e016      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e012      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e00e      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005fac:	2320      	movs	r3, #32
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e00a      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005fb4:	2340      	movs	r3, #64	; 0x40
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e006      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e002      	b.n	8005fca <UART_SetConfig+0x5a6>
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a3f      	ldr	r2, [pc, #252]	; (80060cc <UART_SetConfig+0x6a8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	f040 80f8 	bne.w	80061c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	dc46      	bgt.n	800606c <UART_SetConfig+0x648>
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f2c0 8082 	blt.w	80060e8 <UART_SetConfig+0x6c4>
 8005fe4:	3b02      	subs	r3, #2
 8005fe6:	2b1e      	cmp	r3, #30
 8005fe8:	d87e      	bhi.n	80060e8 <UART_SetConfig+0x6c4>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x5cc>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006073 	.word	0x08006073
 8005ff4:	080060e9 	.word	0x080060e9
 8005ff8:	0800607b 	.word	0x0800607b
 8005ffc:	080060e9 	.word	0x080060e9
 8006000:	080060e9 	.word	0x080060e9
 8006004:	080060e9 	.word	0x080060e9
 8006008:	0800608b 	.word	0x0800608b
 800600c:	080060e9 	.word	0x080060e9
 8006010:	080060e9 	.word	0x080060e9
 8006014:	080060e9 	.word	0x080060e9
 8006018:	080060e9 	.word	0x080060e9
 800601c:	080060e9 	.word	0x080060e9
 8006020:	080060e9 	.word	0x080060e9
 8006024:	080060e9 	.word	0x080060e9
 8006028:	0800609b 	.word	0x0800609b
 800602c:	080060e9 	.word	0x080060e9
 8006030:	080060e9 	.word	0x080060e9
 8006034:	080060e9 	.word	0x080060e9
 8006038:	080060e9 	.word	0x080060e9
 800603c:	080060e9 	.word	0x080060e9
 8006040:	080060e9 	.word	0x080060e9
 8006044:	080060e9 	.word	0x080060e9
 8006048:	080060e9 	.word	0x080060e9
 800604c:	080060e9 	.word	0x080060e9
 8006050:	080060e9 	.word	0x080060e9
 8006054:	080060e9 	.word	0x080060e9
 8006058:	080060e9 	.word	0x080060e9
 800605c:	080060e9 	.word	0x080060e9
 8006060:	080060e9 	.word	0x080060e9
 8006064:	080060e9 	.word	0x080060e9
 8006068:	080060db 	.word	0x080060db
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d037      	beq.n	80060e0 <UART_SetConfig+0x6bc>
 8006070:	e03a      	b.n	80060e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006072:	f7fd fd7f 	bl	8003b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8006076:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006078:	e03c      	b.n	80060f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fd8e 	bl	8003ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006088:	e034      	b.n	80060f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608a:	f107 0318 	add.w	r3, r7, #24
 800608e:	4618      	mov	r0, r3
 8006090:	f7fd feda 	bl	8003e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006098:	e02c      	b.n	80060f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <UART_SetConfig+0x69c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d016      	beq.n	80060d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060a6:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <UART_SetConfig+0x69c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	08db      	lsrs	r3, r3, #3
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	4a07      	ldr	r2, [pc, #28]	; (80060d0 <UART_SetConfig+0x6ac>)
 80060b2:	fa22 f303 	lsr.w	r3, r2, r3
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060b8:	e01c      	b.n	80060f4 <UART_SetConfig+0x6d0>
 80060ba:	bf00      	nop
 80060bc:	40011400 	.word	0x40011400
 80060c0:	58024400 	.word	0x58024400
 80060c4:	40007800 	.word	0x40007800
 80060c8:	40007c00 	.word	0x40007c00
 80060cc:	58000c00 	.word	0x58000c00
 80060d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060d4:	4b9d      	ldr	r3, [pc, #628]	; (800634c <UART_SetConfig+0x928>)
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d8:	e00c      	b.n	80060f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060da:	4b9d      	ldr	r3, [pc, #628]	; (8006350 <UART_SetConfig+0x92c>)
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060de:	e009      	b.n	80060f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060e6:	e005      	b.n	80060f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 81de 	beq.w	80064b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	4a94      	ldr	r2, [pc, #592]	; (8006354 <UART_SetConfig+0x930>)
 8006102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006106:	461a      	mov	r2, r3
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	fbb3 f3f2 	udiv	r3, r3, r2
 800610e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800611c:	429a      	cmp	r2, r3
 800611e:	d305      	bcc.n	800612c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006128:	429a      	cmp	r2, r3
 800612a:	d903      	bls.n	8006134 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006132:	e1c1      	b.n	80064b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	2200      	movs	r2, #0
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	60fa      	str	r2, [r7, #12]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	4a84      	ldr	r2, [pc, #528]	; (8006354 <UART_SetConfig+0x930>)
 8006142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006146:	b29b      	uxth	r3, r3
 8006148:	2200      	movs	r2, #0
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006156:	f7fa f8bf 	bl	80002d8 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	020b      	lsls	r3, r1, #8
 800616c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006170:	0202      	lsls	r2, r0, #8
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	6849      	ldr	r1, [r1, #4]
 8006176:	0849      	lsrs	r1, r1, #1
 8006178:	2000      	movs	r0, #0
 800617a:	460c      	mov	r4, r1
 800617c:	4605      	mov	r5, r0
 800617e:	eb12 0804 	adds.w	r8, r2, r4
 8006182:	eb43 0905 	adc.w	r9, r3, r5
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	469a      	mov	sl, r3
 800618e:	4693      	mov	fp, r2
 8006190:	4652      	mov	r2, sl
 8006192:	465b      	mov	r3, fp
 8006194:	4640      	mov	r0, r8
 8006196:	4649      	mov	r1, r9
 8006198:	f7fa f89e 	bl	80002d8 <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4613      	mov	r3, r2
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d308      	bcc.n	80061be <UART_SetConfig+0x79a>
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b2:	d204      	bcs.n	80061be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	e17c      	b.n	80064b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061c4:	e178      	b.n	80064b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	f040 80c5 	bne.w	800635c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	dc48      	bgt.n	800626c <UART_SetConfig+0x848>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	db7b      	blt.n	80062d6 <UART_SetConfig+0x8b2>
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d879      	bhi.n	80062d6 <UART_SetConfig+0x8b2>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x7c4>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006273 	.word	0x08006273
 80061ec:	0800627b 	.word	0x0800627b
 80061f0:	080062d7 	.word	0x080062d7
 80061f4:	080062d7 	.word	0x080062d7
 80061f8:	08006283 	.word	0x08006283
 80061fc:	080062d7 	.word	0x080062d7
 8006200:	080062d7 	.word	0x080062d7
 8006204:	080062d7 	.word	0x080062d7
 8006208:	08006293 	.word	0x08006293
 800620c:	080062d7 	.word	0x080062d7
 8006210:	080062d7 	.word	0x080062d7
 8006214:	080062d7 	.word	0x080062d7
 8006218:	080062d7 	.word	0x080062d7
 800621c:	080062d7 	.word	0x080062d7
 8006220:	080062d7 	.word	0x080062d7
 8006224:	080062d7 	.word	0x080062d7
 8006228:	080062a3 	.word	0x080062a3
 800622c:	080062d7 	.word	0x080062d7
 8006230:	080062d7 	.word	0x080062d7
 8006234:	080062d7 	.word	0x080062d7
 8006238:	080062d7 	.word	0x080062d7
 800623c:	080062d7 	.word	0x080062d7
 8006240:	080062d7 	.word	0x080062d7
 8006244:	080062d7 	.word	0x080062d7
 8006248:	080062d7 	.word	0x080062d7
 800624c:	080062d7 	.word	0x080062d7
 8006250:	080062d7 	.word	0x080062d7
 8006254:	080062d7 	.word	0x080062d7
 8006258:	080062d7 	.word	0x080062d7
 800625c:	080062d7 	.word	0x080062d7
 8006260:	080062d7 	.word	0x080062d7
 8006264:	080062d7 	.word	0x080062d7
 8006268:	080062c9 	.word	0x080062c9
 800626c:	2b40      	cmp	r3, #64	; 0x40
 800626e:	d02e      	beq.n	80062ce <UART_SetConfig+0x8aa>
 8006270:	e031      	b.n	80062d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006272:	f7fc fa49 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8006276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006278:	e033      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627a:	f7fc fa5b 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 800627e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006280:	e02f      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006286:	4618      	mov	r0, r3
 8006288:	f7fd fc8a 	bl	8003ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006290:	e027      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006292:	f107 0318 	add.w	r3, r7, #24
 8006296:	4618      	mov	r0, r3
 8006298:	f7fd fdd6 	bl	8003e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a0:	e01f      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a2:	4b2d      	ldr	r3, [pc, #180]	; (8006358 <UART_SetConfig+0x934>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062ae:	4b2a      	ldr	r3, [pc, #168]	; (8006358 <UART_SetConfig+0x934>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	4a24      	ldr	r2, [pc, #144]	; (800634c <UART_SetConfig+0x928>)
 80062ba:	fa22 f303 	lsr.w	r3, r2, r3
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062c0:	e00f      	b.n	80062e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062c2:	4b22      	ldr	r3, [pc, #136]	; (800634c <UART_SetConfig+0x928>)
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c6:	e00c      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062c8:	4b21      	ldr	r3, [pc, #132]	; (8006350 <UART_SetConfig+0x92c>)
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062cc:	e009      	b.n	80062e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062d4:	e005      	b.n	80062e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80e7 	beq.w	80064b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	4a19      	ldr	r2, [pc, #100]	; (8006354 <UART_SetConfig+0x930>)
 80062f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	441a      	add	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d916      	bls.n	8006344 <UART_SetConfig+0x920>
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d212      	bcs.n	8006344 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	b29b      	uxth	r3, r3
 8006322:	f023 030f 	bic.w	r3, r3, #15
 8006326:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	b29a      	uxth	r2, r3
 8006334:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006336:	4313      	orrs	r3, r2
 8006338:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	e0b9      	b.n	80064b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800634a:	e0b5      	b.n	80064b8 <UART_SetConfig+0xa94>
 800634c:	03d09000 	.word	0x03d09000
 8006350:	003d0900 	.word	0x003d0900
 8006354:	08007798 	.word	0x08007798
 8006358:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800635c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006360:	2b20      	cmp	r3, #32
 8006362:	dc49      	bgt.n	80063f8 <UART_SetConfig+0x9d4>
 8006364:	2b00      	cmp	r3, #0
 8006366:	db7c      	blt.n	8006462 <UART_SetConfig+0xa3e>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d87a      	bhi.n	8006462 <UART_SetConfig+0xa3e>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <UART_SetConfig+0x950>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063ff 	.word	0x080063ff
 8006378:	08006407 	.word	0x08006407
 800637c:	08006463 	.word	0x08006463
 8006380:	08006463 	.word	0x08006463
 8006384:	0800640f 	.word	0x0800640f
 8006388:	08006463 	.word	0x08006463
 800638c:	08006463 	.word	0x08006463
 8006390:	08006463 	.word	0x08006463
 8006394:	0800641f 	.word	0x0800641f
 8006398:	08006463 	.word	0x08006463
 800639c:	08006463 	.word	0x08006463
 80063a0:	08006463 	.word	0x08006463
 80063a4:	08006463 	.word	0x08006463
 80063a8:	08006463 	.word	0x08006463
 80063ac:	08006463 	.word	0x08006463
 80063b0:	08006463 	.word	0x08006463
 80063b4:	0800642f 	.word	0x0800642f
 80063b8:	08006463 	.word	0x08006463
 80063bc:	08006463 	.word	0x08006463
 80063c0:	08006463 	.word	0x08006463
 80063c4:	08006463 	.word	0x08006463
 80063c8:	08006463 	.word	0x08006463
 80063cc:	08006463 	.word	0x08006463
 80063d0:	08006463 	.word	0x08006463
 80063d4:	08006463 	.word	0x08006463
 80063d8:	08006463 	.word	0x08006463
 80063dc:	08006463 	.word	0x08006463
 80063e0:	08006463 	.word	0x08006463
 80063e4:	08006463 	.word	0x08006463
 80063e8:	08006463 	.word	0x08006463
 80063ec:	08006463 	.word	0x08006463
 80063f0:	08006463 	.word	0x08006463
 80063f4:	08006455 	.word	0x08006455
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d02e      	beq.n	800645a <UART_SetConfig+0xa36>
 80063fc:	e031      	b.n	8006462 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fe:	f7fc f983 	bl	8002708 <HAL_RCC_GetPCLK1Freq>
 8006402:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006404:	e033      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006406:	f7fc f995 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 800640a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800640c:	e02f      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f7fd fbc4 	bl	8003ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641c:	e027      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641e:	f107 0318 	add.w	r3, r7, #24
 8006422:	4618      	mov	r0, r3
 8006424:	f7fd fd10 	bl	8003e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800642c:	e01f      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642e:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <UART_SetConfig+0xac0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <UART_SetConfig+0xac0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	4a28      	ldr	r2, [pc, #160]	; (80064e8 <UART_SetConfig+0xac4>)
 8006446:	fa22 f303 	lsr.w	r3, r2, r3
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800644c:	e00f      	b.n	800646e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800644e:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <UART_SetConfig+0xac4>)
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006452:	e00c      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006454:	4b25      	ldr	r3, [pc, #148]	; (80064ec <UART_SetConfig+0xac8>)
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006458:	e009      	b.n	800646e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006460:	e005      	b.n	800646e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800646c:	bf00      	nop
    }

    if (pclk != 0U)
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d021      	beq.n	80064b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	4a1d      	ldr	r2, [pc, #116]	; (80064f0 <UART_SetConfig+0xacc>)
 800647a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647e:	461a      	mov	r2, r3
 8006480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006482:	fbb3 f2f2 	udiv	r2, r3, r2
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	441a      	add	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b0f      	cmp	r3, #15
 800649c:	d909      	bls.n	80064b2 <UART_SetConfig+0xa8e>
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a4:	d205      	bcs.n	80064b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e002      	b.n	80064b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2200      	movs	r2, #0
 80064cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3748      	adds	r7, #72	; 0x48
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	03d09000 	.word	0x03d09000
 80064ec:	003d0900 	.word	0x003d0900
 80064f0:	08007798 	.word	0x08007798

080064f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00a      	beq.n	80065a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01a      	beq.n	800660a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f2:	d10a      	bne.n	800660a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b098      	sub	sp, #96	; 0x60
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006648:	f7fa fd78 	bl	800113c <HAL_GetTick>
 800664c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b08      	cmp	r3, #8
 800665a:	d12f      	bne.n	80066bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800665c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006664:	2200      	movs	r2, #0
 8006666:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f88e 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d022      	beq.n	80066bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006694:	647b      	str	r3, [r7, #68]	; 0x44
 8006696:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800669a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e063      	b.n	8006784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d149      	bne.n	800675e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d2:	2200      	movs	r2, #0
 80066d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f857 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d03c      	beq.n	800675e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	623b      	str	r3, [r7, #32]
   return(result);
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
 8006704:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60fb      	str	r3, [r7, #12]
   return(result);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006736:	61fa      	str	r2, [r7, #28]
 8006738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	617b      	str	r3, [r7, #20]
   return(result);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e5      	bne.n	8006716 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e012      	b.n	8006784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3758      	adds	r7, #88	; 0x58
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	e04f      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a4:	d04b      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fa fcc9 	bl	800113c <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <UART_WaitOnFlagUntilTimeout+0x30>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e04e      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d037      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b80      	cmp	r3, #128	; 0x80
 80067d2:	d034      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b40      	cmp	r3, #64	; 0x40
 80067d8:	d031      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d110      	bne.n	800680a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2208      	movs	r2, #8
 80067ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f839 	bl	8006868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2208      	movs	r2, #8
 80067fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e029      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006818:	d111      	bne.n	800683e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f81f 	bl	8006868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e00f      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4013      	ands	r3, r2
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	429a      	cmp	r2, r3
 800684c:	bf0c      	ite	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	2300      	movne	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	429a      	cmp	r2, r3
 800685a:	d0a0      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b095      	sub	sp, #84	; 0x54
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800688e:	643b      	str	r3, [r7, #64]	; 0x40
 8006890:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <UART_EndRxTransfer+0xc8>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e5      	bne.n	80068a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d118      	bne.n	8006910 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f023 0310 	bic.w	r3, r3, #16
 80068f2:	647b      	str	r3, [r7, #68]	; 0x44
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	613b      	str	r3, [r7, #16]
   return(result);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e6      	bne.n	80068de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2220      	movs	r2, #32
 8006914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006924:	bf00      	nop
 8006926:	3754      	adds	r7, #84	; 0x54
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	effffffe 	.word	0xeffffffe

08006934 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_UARTEx_DisableFifoMode+0x16>
 8006946:	2302      	movs	r3, #2
 8006948:	e027      	b.n	800699a <HAL_UARTEx_DisableFifoMode+0x66>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2224      	movs	r2, #36	; 0x24
 8006956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006978:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e02d      	b.n	8006a1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f850 	bl	8006aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e02d      	b.n	8006a96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2224      	movs	r2, #36	; 0x24
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f812 	bl	8006aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ac0:	e031      	b.n	8006b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ac2:	2310      	movs	r3, #16
 8006ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	0e5b      	lsrs	r3, r3, #25
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	0f5b      	lsrs	r3, r3, #29
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	7b3a      	ldrb	r2, [r7, #12]
 8006aee:	4911      	ldr	r1, [pc, #68]	; (8006b34 <UARTEx_SetNbDataToProcess+0x94>)
 8006af0:	5c8a      	ldrb	r2, [r1, r2]
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006af6:	7b3a      	ldrb	r2, [r7, #12]
 8006af8:	490f      	ldr	r1, [pc, #60]	; (8006b38 <UARTEx_SetNbDataToProcess+0x98>)
 8006afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	7b7a      	ldrb	r2, [r7, #13]
 8006b0c:	4909      	ldr	r1, [pc, #36]	; (8006b34 <UARTEx_SetNbDataToProcess+0x94>)
 8006b0e:	5c8a      	ldrb	r2, [r1, r2]
 8006b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b14:	7b7a      	ldrb	r2, [r7, #13]
 8006b16:	4908      	ldr	r1, [pc, #32]	; (8006b38 <UARTEx_SetNbDataToProcess+0x98>)
 8006b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	080077b0 	.word	0x080077b0
 8006b38:	080077b8 	.word	0x080077b8

08006b3c <memset>:
 8006b3c:	4402      	add	r2, r0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d100      	bne.n	8006b46 <memset+0xa>
 8006b44:	4770      	bx	lr
 8006b46:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4a:	e7f9      	b.n	8006b40 <memset+0x4>

08006b4c <__libc_init_array>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	4d0d      	ldr	r5, [pc, #52]	; (8006b84 <__libc_init_array+0x38>)
 8006b50:	4c0d      	ldr	r4, [pc, #52]	; (8006b88 <__libc_init_array+0x3c>)
 8006b52:	1b64      	subs	r4, r4, r5
 8006b54:	10a4      	asrs	r4, r4, #2
 8006b56:	2600      	movs	r6, #0
 8006b58:	42a6      	cmp	r6, r4
 8006b5a:	d109      	bne.n	8006b70 <__libc_init_array+0x24>
 8006b5c:	4d0b      	ldr	r5, [pc, #44]	; (8006b8c <__libc_init_array+0x40>)
 8006b5e:	4c0c      	ldr	r4, [pc, #48]	; (8006b90 <__libc_init_array+0x44>)
 8006b60:	f000 fe06 	bl	8007770 <_init>
 8006b64:	1b64      	subs	r4, r4, r5
 8006b66:	10a4      	asrs	r4, r4, #2
 8006b68:	2600      	movs	r6, #0
 8006b6a:	42a6      	cmp	r6, r4
 8006b6c:	d105      	bne.n	8006b7a <__libc_init_array+0x2e>
 8006b6e:	bd70      	pop	{r4, r5, r6, pc}
 8006b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b74:	4798      	blx	r3
 8006b76:	3601      	adds	r6, #1
 8006b78:	e7ee      	b.n	8006b58 <__libc_init_array+0xc>
 8006b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7e:	4798      	blx	r3
 8006b80:	3601      	adds	r6, #1
 8006b82:	e7f2      	b.n	8006b6a <__libc_init_array+0x1e>
 8006b84:	080079a0 	.word	0x080079a0
 8006b88:	080079a0 	.word	0x080079a0
 8006b8c:	080079a0 	.word	0x080079a0
 8006b90:	080079a4 	.word	0x080079a4
 8006b94:	00000000 	.word	0x00000000

08006b98 <sin>:
 8006b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8006b9e:	ee17 3a90 	vmov	r3, s15
 8006ba2:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <sin+0x90>)
 8006ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	dc07      	bgt.n	8006bbc <sin+0x24>
 8006bac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006c20 <sin+0x88>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	b005      	add	sp, #20
 8006bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb8:	f000 bc7e 	b.w	80074b8 <__kernel_sin>
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <sin+0x94>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	dd04      	ble.n	8006bcc <sin+0x34>
 8006bc2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006bc6:	b005      	add	sp, #20
 8006bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bcc:	4668      	mov	r0, sp
 8006bce:	f000 f82f 	bl	8006c30 <__ieee754_rem_pio2>
 8006bd2:	f000 0003 	and.w	r0, r0, #3
 8006bd6:	2801      	cmp	r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <sin+0x58>
 8006bda:	2802      	cmp	r0, #2
 8006bdc:	d00f      	beq.n	8006bfe <sin+0x66>
 8006bde:	b9c0      	cbnz	r0, 8006c12 <sin+0x7a>
 8006be0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006be4:	ed9d 0b00 	vldr	d0, [sp]
 8006be8:	2001      	movs	r0, #1
 8006bea:	f000 fc65 	bl	80074b8 <__kernel_sin>
 8006bee:	e7ea      	b.n	8006bc6 <sin+0x2e>
 8006bf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bf4:	ed9d 0b00 	vldr	d0, [sp]
 8006bf8:	f000 fbf2 	bl	80073e0 <__kernel_cos>
 8006bfc:	e7e3      	b.n	8006bc6 <sin+0x2e>
 8006bfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c02:	ed9d 0b00 	vldr	d0, [sp]
 8006c06:	2001      	movs	r0, #1
 8006c08:	f000 fc56 	bl	80074b8 <__kernel_sin>
 8006c0c:	eeb1 0b40 	vneg.f64	d0, d0
 8006c10:	e7d9      	b.n	8006bc6 <sin+0x2e>
 8006c12:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c16:	ed9d 0b00 	vldr	d0, [sp]
 8006c1a:	f000 fbe1 	bl	80073e0 <__kernel_cos>
 8006c1e:	e7f5      	b.n	8006c0c <sin+0x74>
	...
 8006c28:	3fe921fb 	.word	0x3fe921fb
 8006c2c:	7fefffff 	.word	0x7fefffff

08006c30 <__ieee754_rem_pio2>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	eeb0 7b40 	vmov.f64	d7, d0
 8006c36:	ee17 5a90 	vmov	r5, s15
 8006c3a:	4b99      	ldr	r3, [pc, #612]	; (8006ea0 <__ieee754_rem_pio2+0x270>)
 8006c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c40:	429e      	cmp	r6, r3
 8006c42:	b088      	sub	sp, #32
 8006c44:	4604      	mov	r4, r0
 8006c46:	dc07      	bgt.n	8006c58 <__ieee754_rem_pio2+0x28>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	ed84 0b00 	vstr	d0, [r4]
 8006c50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006c54:	2000      	movs	r0, #0
 8006c56:	e01b      	b.n	8006c90 <__ieee754_rem_pio2+0x60>
 8006c58:	4b92      	ldr	r3, [pc, #584]	; (8006ea4 <__ieee754_rem_pio2+0x274>)
 8006c5a:	429e      	cmp	r6, r3
 8006c5c:	dc3b      	bgt.n	8006cd6 <__ieee754_rem_pio2+0xa6>
 8006c5e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8006e60 <__ieee754_rem_pio2+0x230>
 8006c68:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006c6c:	dd19      	ble.n	8006ca2 <__ieee754_rem_pio2+0x72>
 8006c6e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006c72:	429e      	cmp	r6, r3
 8006c74:	d00e      	beq.n	8006c94 <__ieee754_rem_pio2+0x64>
 8006c76:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8006e68 <__ieee754_rem_pio2+0x238>
 8006c7a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006c7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006c82:	ed84 5b00 	vstr	d5, [r4]
 8006c86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c8a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006c8e:	2001      	movs	r0, #1
 8006c90:	b008      	add	sp, #32
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8006e70 <__ieee754_rem_pio2+0x240>
 8006c98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c9c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8006e78 <__ieee754_rem_pio2+0x248>
 8006ca0:	e7eb      	b.n	8006c7a <__ieee754_rem_pio2+0x4a>
 8006ca2:	429e      	cmp	r6, r3
 8006ca4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006ca8:	d00e      	beq.n	8006cc8 <__ieee754_rem_pio2+0x98>
 8006caa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8006e68 <__ieee754_rem_pio2+0x238>
 8006cae:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006cb2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006cb6:	ed84 5b00 	vstr	d5, [r4]
 8006cba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8006cc6:	e7e3      	b.n	8006c90 <__ieee754_rem_pio2+0x60>
 8006cc8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006e70 <__ieee754_rem_pio2+0x240>
 8006ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006cd0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006e78 <__ieee754_rem_pio2+0x248>
 8006cd4:	e7eb      	b.n	8006cae <__ieee754_rem_pio2+0x7e>
 8006cd6:	4b74      	ldr	r3, [pc, #464]	; (8006ea8 <__ieee754_rem_pio2+0x278>)
 8006cd8:	429e      	cmp	r6, r3
 8006cda:	dc70      	bgt.n	8006dbe <__ieee754_rem_pio2+0x18e>
 8006cdc:	f000 fc44 	bl	8007568 <fabs>
 8006ce0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006ce4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8006e80 <__ieee754_rem_pio2+0x250>
 8006ce8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006cec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006cf0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006cf4:	ee17 0a90 	vmov	r0, s15
 8006cf8:	eeb1 4b45 	vneg.f64	d4, d5
 8006cfc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8006e60 <__ieee754_rem_pio2+0x230>
 8006d00:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006d04:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8006e68 <__ieee754_rem_pio2+0x238>
 8006d08:	281f      	cmp	r0, #31
 8006d0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006d0e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006d12:	dc08      	bgt.n	8006d26 <__ieee754_rem_pio2+0xf6>
 8006d14:	4b65      	ldr	r3, [pc, #404]	; (8006eac <__ieee754_rem_pio2+0x27c>)
 8006d16:	1e42      	subs	r2, r0, #1
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	42b3      	cmp	r3, r6
 8006d1e:	d002      	beq.n	8006d26 <__ieee754_rem_pio2+0xf6>
 8006d20:	ed84 6b00 	vstr	d6, [r4]
 8006d24:	e024      	b.n	8006d70 <__ieee754_rem_pio2+0x140>
 8006d26:	ee16 3a90 	vmov	r3, s13
 8006d2a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006d2e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006d32:	2b10      	cmp	r3, #16
 8006d34:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006d38:	ddf2      	ble.n	8006d20 <__ieee754_rem_pio2+0xf0>
 8006d3a:	eeb0 6b40 	vmov.f64	d6, d0
 8006d3e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8006e70 <__ieee754_rem_pio2+0x240>
 8006d42:	eea4 6b03 	vfma.f64	d6, d4, d3
 8006d46:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006d4a:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006d4e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8006e78 <__ieee754_rem_pio2+0x248>
 8006d52:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8006d56:	ee36 3b47 	vsub.f64	d3, d6, d7
 8006d5a:	ee13 3a90 	vmov	r3, s7
 8006d5e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b31      	cmp	r3, #49	; 0x31
 8006d66:	dc17      	bgt.n	8006d98 <__ieee754_rem_pio2+0x168>
 8006d68:	eeb0 0b46 	vmov.f64	d0, d6
 8006d6c:	ed84 3b00 	vstr	d3, [r4]
 8006d70:	ed94 6b00 	vldr	d6, [r4]
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006d7a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006d7e:	ed84 0b02 	vstr	d0, [r4, #8]
 8006d82:	da85      	bge.n	8006c90 <__ieee754_rem_pio2+0x60>
 8006d84:	eeb1 6b46 	vneg.f64	d6, d6
 8006d88:	eeb1 0b40 	vneg.f64	d0, d0
 8006d8c:	ed84 6b00 	vstr	d6, [r4]
 8006d90:	ed84 0b02 	vstr	d0, [r4, #8]
 8006d94:	4240      	negs	r0, r0
 8006d96:	e77b      	b.n	8006c90 <__ieee754_rem_pio2+0x60>
 8006d98:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8006e88 <__ieee754_rem_pio2+0x258>
 8006d9c:	eeb0 0b46 	vmov.f64	d0, d6
 8006da0:	eea4 0b07 	vfma.f64	d0, d4, d7
 8006da4:	ee36 6b40 	vsub.f64	d6, d6, d0
 8006da8:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006dac:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8006e90 <__ieee754_rem_pio2+0x260>
 8006db0:	eeb0 7b46 	vmov.f64	d7, d6
 8006db4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006db8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006dbc:	e7b0      	b.n	8006d20 <__ieee754_rem_pio2+0xf0>
 8006dbe:	4b3c      	ldr	r3, [pc, #240]	; (8006eb0 <__ieee754_rem_pio2+0x280>)
 8006dc0:	429e      	cmp	r6, r3
 8006dc2:	dd06      	ble.n	8006dd2 <__ieee754_rem_pio2+0x1a2>
 8006dc4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006dc8:	ed80 7b02 	vstr	d7, [r0, #8]
 8006dcc:	ed80 7b00 	vstr	d7, [r0]
 8006dd0:	e740      	b.n	8006c54 <__ieee754_rem_pio2+0x24>
 8006dd2:	1532      	asrs	r2, r6, #20
 8006dd4:	ee10 0a10 	vmov	r0, s0
 8006dd8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006ddc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006de0:	ec41 0b17 	vmov	d7, r0, r1
 8006de4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006de8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8006e98 <__ieee754_rem_pio2+0x268>
 8006dec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006df0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006df4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006df8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006dfc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006e00:	a808      	add	r0, sp, #32
 8006e02:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006e06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e0a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006e0e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e16:	2103      	movs	r1, #3
 8006e18:	ed30 7b02 	vldmdb	r0!, {d7}
 8006e1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e24:	460b      	mov	r3, r1
 8006e26:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8006e2a:	d0f5      	beq.n	8006e18 <__ieee754_rem_pio2+0x1e8>
 8006e2c:	4921      	ldr	r1, [pc, #132]	; (8006eb4 <__ieee754_rem_pio2+0x284>)
 8006e2e:	9101      	str	r1, [sp, #4]
 8006e30:	2102      	movs	r1, #2
 8006e32:	9100      	str	r1, [sp, #0]
 8006e34:	a802      	add	r0, sp, #8
 8006e36:	4621      	mov	r1, r4
 8006e38:	f000 f83e 	bl	8006eb8 <__kernel_rem_pio2>
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	f6bf af27 	bge.w	8006c90 <__ieee754_rem_pio2+0x60>
 8006e42:	ed94 7b00 	vldr	d7, [r4]
 8006e46:	eeb1 7b47 	vneg.f64	d7, d7
 8006e4a:	ed84 7b00 	vstr	d7, [r4]
 8006e4e:	ed94 7b02 	vldr	d7, [r4, #8]
 8006e52:	eeb1 7b47 	vneg.f64	d7, d7
 8006e56:	ed84 7b02 	vstr	d7, [r4, #8]
 8006e5a:	e79b      	b.n	8006d94 <__ieee754_rem_pio2+0x164>
 8006e5c:	f3af 8000 	nop.w
 8006e60:	54400000 	.word	0x54400000
 8006e64:	3ff921fb 	.word	0x3ff921fb
 8006e68:	1a626331 	.word	0x1a626331
 8006e6c:	3dd0b461 	.word	0x3dd0b461
 8006e70:	1a600000 	.word	0x1a600000
 8006e74:	3dd0b461 	.word	0x3dd0b461
 8006e78:	2e037073 	.word	0x2e037073
 8006e7c:	3ba3198a 	.word	0x3ba3198a
 8006e80:	6dc9c883 	.word	0x6dc9c883
 8006e84:	3fe45f30 	.word	0x3fe45f30
 8006e88:	2e000000 	.word	0x2e000000
 8006e8c:	3ba3198a 	.word	0x3ba3198a
 8006e90:	252049c1 	.word	0x252049c1
 8006e94:	397b839a 	.word	0x397b839a
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	41700000 	.word	0x41700000
 8006ea0:	3fe921fb 	.word	0x3fe921fb
 8006ea4:	4002d97b 	.word	0x4002d97b
 8006ea8:	413921fb 	.word	0x413921fb
 8006eac:	080077c0 	.word	0x080077c0
 8006eb0:	7fefffff 	.word	0x7fefffff
 8006eb4:	08007840 	.word	0x08007840

08006eb8 <__kernel_rem_pio2>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	ed2d 8b06 	vpush	{d8-d10}
 8006ec0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	9002      	str	r0, [sp, #8]
 8006ec8:	49c3      	ldr	r1, [pc, #780]	; (80071d8 <__kernel_rem_pio2+0x320>)
 8006eca:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8006ed2:	9901      	ldr	r1, [sp, #4]
 8006ed4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006ed6:	f112 0f14 	cmn.w	r2, #20
 8006eda:	bfa8      	it	ge
 8006edc:	1ed0      	subge	r0, r2, #3
 8006ede:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8006ee2:	bfaa      	itet	ge
 8006ee4:	2418      	movge	r4, #24
 8006ee6:	2000      	movlt	r0, #0
 8006ee8:	fb90 f0f4 	sdivge	r0, r0, r4
 8006eec:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80071c0 <__kernel_rem_pio2+0x308>
 8006ef0:	f06f 0417 	mvn.w	r4, #23
 8006ef4:	fb00 4404 	mla	r4, r0, r4, r4
 8006ef8:	eba0 060a 	sub.w	r6, r0, sl
 8006efc:	4414      	add	r4, r2
 8006efe:	eb09 0c0a 	add.w	ip, r9, sl
 8006f02:	ad1a      	add	r5, sp, #104	; 0x68
 8006f04:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4562      	cmp	r2, ip
 8006f0c:	dd10      	ble.n	8006f30 <__kernel_rem_pio2+0x78>
 8006f0e:	9a01      	ldr	r2, [sp, #4]
 8006f10:	a91a      	add	r1, sp, #104	; 0x68
 8006f12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006f16:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8006f1a:	f04f 0c00 	mov.w	ip, #0
 8006f1e:	45cc      	cmp	ip, r9
 8006f20:	dc26      	bgt.n	8006f70 <__kernel_rem_pio2+0xb8>
 8006f22:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80071c0 <__kernel_rem_pio2+0x308>
 8006f26:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006f2a:	4616      	mov	r6, r2
 8006f2c:	2500      	movs	r5, #0
 8006f2e:	e015      	b.n	8006f5c <__kernel_rem_pio2+0xa4>
 8006f30:	42d6      	cmn	r6, r2
 8006f32:	d409      	bmi.n	8006f48 <__kernel_rem_pio2+0x90>
 8006f34:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8006f38:	ee07 1a90 	vmov	s15, r1
 8006f3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f40:	eca5 7b02 	vstmia	r5!, {d7}
 8006f44:	3201      	adds	r2, #1
 8006f46:	e7e0      	b.n	8006f0a <__kernel_rem_pio2+0x52>
 8006f48:	eeb0 7b46 	vmov.f64	d7, d6
 8006f4c:	e7f8      	b.n	8006f40 <__kernel_rem_pio2+0x88>
 8006f4e:	ecbe 5b02 	vldmia	lr!, {d5}
 8006f52:	ed96 6b00 	vldr	d6, [r6]
 8006f56:	3501      	adds	r5, #1
 8006f58:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006f5c:	4555      	cmp	r5, sl
 8006f5e:	f1a6 0608 	sub.w	r6, r6, #8
 8006f62:	ddf4      	ble.n	8006f4e <__kernel_rem_pio2+0x96>
 8006f64:	eca8 7b02 	vstmia	r8!, {d7}
 8006f68:	f10c 0c01 	add.w	ip, ip, #1
 8006f6c:	3208      	adds	r2, #8
 8006f6e:	e7d6      	b.n	8006f1e <__kernel_rem_pio2+0x66>
 8006f70:	aa06      	add	r2, sp, #24
 8006f72:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80071c8 <__kernel_rem_pio2+0x310>
 8006f76:	ed9f ab96 	vldr	d10, [pc, #600]	; 80071d0 <__kernel_rem_pio2+0x318>
 8006f7a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8006f7e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006f82:	9204      	str	r2, [sp, #16]
 8006f84:	9303      	str	r3, [sp, #12]
 8006f86:	464d      	mov	r5, r9
 8006f88:	00eb      	lsls	r3, r5, #3
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	ab92      	add	r3, sp, #584	; 0x248
 8006f8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006f92:	f10d 0b18 	add.w	fp, sp, #24
 8006f96:	ab6a      	add	r3, sp, #424	; 0x1a8
 8006f98:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8006f9c:	465e      	mov	r6, fp
 8006f9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	f1a2 0208 	sub.w	r2, r2, #8
 8006faa:	dc48      	bgt.n	800703e <__kernel_rem_pio2+0x186>
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fae7 	bl	8007580 <scalbn>
 8006fb2:	eeb0 8b40 	vmov.f64	d8, d0
 8006fb6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8006fba:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006fbe:	f000 fb5f 	bl	8007680 <floor>
 8006fc2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006fc6:	eea0 8b47 	vfms.f64	d8, d0, d7
 8006fca:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006fce:	2c00      	cmp	r4, #0
 8006fd0:	ee17 8a90 	vmov	r8, s15
 8006fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fd8:	ee38 8b47 	vsub.f64	d8, d8, d7
 8006fdc:	dd41      	ble.n	8007062 <__kernel_rem_pio2+0x1aa>
 8006fde:	1e68      	subs	r0, r5, #1
 8006fe0:	ab06      	add	r3, sp, #24
 8006fe2:	f1c4 0c18 	rsb	ip, r4, #24
 8006fe6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8006fea:	fa46 f20c 	asr.w	r2, r6, ip
 8006fee:	4490      	add	r8, r2
 8006ff0:	fa02 f20c 	lsl.w	r2, r2, ip
 8006ff4:	1ab6      	subs	r6, r6, r2
 8006ff6:	f1c4 0217 	rsb	r2, r4, #23
 8006ffa:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006ffe:	4116      	asrs	r6, r2
 8007000:	2e00      	cmp	r6, #0
 8007002:	dd3d      	ble.n	8007080 <__kernel_rem_pio2+0x1c8>
 8007004:	f04f 0c00 	mov.w	ip, #0
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	4660      	mov	r0, ip
 800700e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8007012:	4565      	cmp	r5, ip
 8007014:	dc6a      	bgt.n	80070ec <__kernel_rem_pio2+0x234>
 8007016:	2c00      	cmp	r4, #0
 8007018:	dd04      	ble.n	8007024 <__kernel_rem_pio2+0x16c>
 800701a:	2c01      	cmp	r4, #1
 800701c:	d07b      	beq.n	8007116 <__kernel_rem_pio2+0x25e>
 800701e:	2c02      	cmp	r4, #2
 8007020:	f000 8083 	beq.w	800712a <__kernel_rem_pio2+0x272>
 8007024:	2e02      	cmp	r6, #2
 8007026:	d12b      	bne.n	8007080 <__kernel_rem_pio2+0x1c8>
 8007028:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800702c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007030:	b330      	cbz	r0, 8007080 <__kernel_rem_pio2+0x1c8>
 8007032:	4620      	mov	r0, r4
 8007034:	f000 faa4 	bl	8007580 <scalbn>
 8007038:	ee38 8b40 	vsub.f64	d8, d8, d0
 800703c:	e020      	b.n	8007080 <__kernel_rem_pio2+0x1c8>
 800703e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8007042:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007046:	3801      	subs	r0, #1
 8007048:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800704c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8007050:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007054:	eca6 0a01 	vstmia	r6!, {s0}
 8007058:	ed92 0b00 	vldr	d0, [r2]
 800705c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007060:	e7a0      	b.n	8006fa4 <__kernel_rem_pio2+0xec>
 8007062:	d105      	bne.n	8007070 <__kernel_rem_pio2+0x1b8>
 8007064:	1e6a      	subs	r2, r5, #1
 8007066:	ab06      	add	r3, sp, #24
 8007068:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800706c:	15f6      	asrs	r6, r6, #23
 800706e:	e7c7      	b.n	8007000 <__kernel_rem_pio2+0x148>
 8007070:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007074:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	da34      	bge.n	80070e8 <__kernel_rem_pio2+0x230>
 800707e:	2600      	movs	r6, #0
 8007080:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	f040 80aa 	bne.w	80071e0 <__kernel_rem_pio2+0x328>
 800708c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8007090:	4658      	mov	r0, fp
 8007092:	2200      	movs	r2, #0
 8007094:	4548      	cmp	r0, r9
 8007096:	da50      	bge.n	800713a <__kernel_rem_pio2+0x282>
 8007098:	2a00      	cmp	r2, #0
 800709a:	d06b      	beq.n	8007174 <__kernel_rem_pio2+0x2bc>
 800709c:	ab06      	add	r3, sp, #24
 800709e:	3c18      	subs	r4, #24
 80070a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8087 	beq.w	80071b8 <__kernel_rem_pio2+0x300>
 80070aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fa66 	bl	8007580 <scalbn>
 80070b4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80071c8 <__kernel_rem_pio2+0x310>
 80070b8:	f10b 0201 	add.w	r2, fp, #1
 80070bc:	a96a      	add	r1, sp, #424	; 0x1a8
 80070be:	00d3      	lsls	r3, r2, #3
 80070c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80070c4:	465a      	mov	r2, fp
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	f280 80b8 	bge.w	800723c <__kernel_rem_pio2+0x384>
 80070cc:	465a      	mov	r2, fp
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	f2c0 80d6 	blt.w	8007280 <__kernel_rem_pio2+0x3c8>
 80070d4:	a96a      	add	r1, sp, #424	; 0x1a8
 80070d6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 80070da:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80071c0 <__kernel_rem_pio2+0x308>
 80070de:	4d3f      	ldr	r5, [pc, #252]	; (80071dc <__kernel_rem_pio2+0x324>)
 80070e0:	2000      	movs	r0, #0
 80070e2:	ebab 0102 	sub.w	r1, fp, r2
 80070e6:	e0c0      	b.n	800726a <__kernel_rem_pio2+0x3b2>
 80070e8:	2602      	movs	r6, #2
 80070ea:	e78b      	b.n	8007004 <__kernel_rem_pio2+0x14c>
 80070ec:	f8db 2000 	ldr.w	r2, [fp]
 80070f0:	b958      	cbnz	r0, 800710a <__kernel_rem_pio2+0x252>
 80070f2:	b122      	cbz	r2, 80070fe <__kernel_rem_pio2+0x246>
 80070f4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80070f8:	f8cb 2000 	str.w	r2, [fp]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f10c 0c01 	add.w	ip, ip, #1
 8007102:	f10b 0b04 	add.w	fp, fp, #4
 8007106:	4610      	mov	r0, r2
 8007108:	e783      	b.n	8007012 <__kernel_rem_pio2+0x15a>
 800710a:	ebae 0202 	sub.w	r2, lr, r2
 800710e:	f8cb 2000 	str.w	r2, [fp]
 8007112:	4602      	mov	r2, r0
 8007114:	e7f3      	b.n	80070fe <__kernel_rem_pio2+0x246>
 8007116:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800711a:	ab06      	add	r3, sp, #24
 800711c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8007120:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007124:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8007128:	e77c      	b.n	8007024 <__kernel_rem_pio2+0x16c>
 800712a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800712e:	ab06      	add	r3, sp, #24
 8007130:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8007134:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8007138:	e7f4      	b.n	8007124 <__kernel_rem_pio2+0x26c>
 800713a:	ab06      	add	r3, sp, #24
 800713c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007140:	3801      	subs	r0, #1
 8007142:	431a      	orrs	r2, r3
 8007144:	e7a6      	b.n	8007094 <__kernel_rem_pio2+0x1dc>
 8007146:	3201      	adds	r2, #1
 8007148:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800714c:	2e00      	cmp	r6, #0
 800714e:	d0fa      	beq.n	8007146 <__kernel_rem_pio2+0x28e>
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007156:	eb0d 0003 	add.w	r0, sp, r3
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	18ee      	adds	r6, r5, r3
 800715e:	ab1a      	add	r3, sp, #104	; 0x68
 8007160:	f105 0c01 	add.w	ip, r5, #1
 8007164:	3898      	subs	r0, #152	; 0x98
 8007166:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800716a:	442a      	add	r2, r5
 800716c:	4562      	cmp	r2, ip
 800716e:	da04      	bge.n	800717a <__kernel_rem_pio2+0x2c2>
 8007170:	4615      	mov	r5, r2
 8007172:	e709      	b.n	8006f88 <__kernel_rem_pio2+0xd0>
 8007174:	9804      	ldr	r0, [sp, #16]
 8007176:	2201      	movs	r2, #1
 8007178:	e7e6      	b.n	8007148 <__kernel_rem_pio2+0x290>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007180:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800718e:	2500      	movs	r5, #0
 8007190:	eca6 7b02 	vstmia	r6!, {d7}
 8007194:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80071c0 <__kernel_rem_pio2+0x308>
 8007198:	46b0      	mov	r8, r6
 800719a:	4555      	cmp	r5, sl
 800719c:	dd04      	ble.n	80071a8 <__kernel_rem_pio2+0x2f0>
 800719e:	eca0 7b02 	vstmia	r0!, {d7}
 80071a2:	f10c 0c01 	add.w	ip, ip, #1
 80071a6:	e7e1      	b.n	800716c <__kernel_rem_pio2+0x2b4>
 80071a8:	ecbe 5b02 	vldmia	lr!, {d5}
 80071ac:	ed38 6b02 	vldmdb	r8!, {d6}
 80071b0:	3501      	adds	r5, #1
 80071b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80071b6:	e7f0      	b.n	800719a <__kernel_rem_pio2+0x2e2>
 80071b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071bc:	e76e      	b.n	800709c <__kernel_rem_pio2+0x1e4>
 80071be:	bf00      	nop
	...
 80071cc:	3e700000 	.word	0x3e700000
 80071d0:	00000000 	.word	0x00000000
 80071d4:	41700000 	.word	0x41700000
 80071d8:	08007988 	.word	0x08007988
 80071dc:	08007948 	.word	0x08007948
 80071e0:	4260      	negs	r0, r4
 80071e2:	eeb0 0b48 	vmov.f64	d0, d8
 80071e6:	f000 f9cb 	bl	8007580 <scalbn>
 80071ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80073c8 <__kernel_rem_pio2+0x510>
 80071ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80071f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f6:	db18      	blt.n	800722a <__kernel_rem_pio2+0x372>
 80071f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80073d0 <__kernel_rem_pio2+0x518>
 80071fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007200:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8007204:	aa06      	add	r2, sp, #24
 8007206:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800720a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800720e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007212:	f105 0b01 	add.w	fp, r5, #1
 8007216:	ee10 3a10 	vmov	r3, s0
 800721a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800721e:	ee17 3a10 	vmov	r3, s14
 8007222:	3418      	adds	r4, #24
 8007224:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8007228:	e73f      	b.n	80070aa <__kernel_rem_pio2+0x1f2>
 800722a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800722e:	aa06      	add	r2, sp, #24
 8007230:	ee10 3a10 	vmov	r3, s0
 8007234:	46ab      	mov	fp, r5
 8007236:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800723a:	e736      	b.n	80070aa <__kernel_rem_pio2+0x1f2>
 800723c:	a806      	add	r0, sp, #24
 800723e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007242:	9001      	str	r0, [sp, #4]
 8007244:	ee07 0a90 	vmov	s15, r0
 8007248:	3a01      	subs	r2, #1
 800724a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800724e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007252:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007256:	ed21 7b02 	vstmdb	r1!, {d7}
 800725a:	e734      	b.n	80070c6 <__kernel_rem_pio2+0x20e>
 800725c:	ecb5 5b02 	vldmia	r5!, {d5}
 8007260:	ecb4 6b02 	vldmia	r4!, {d6}
 8007264:	3001      	adds	r0, #1
 8007266:	eea5 7b06 	vfma.f64	d7, d5, d6
 800726a:	4548      	cmp	r0, r9
 800726c:	dc01      	bgt.n	8007272 <__kernel_rem_pio2+0x3ba>
 800726e:	4288      	cmp	r0, r1
 8007270:	ddf4      	ble.n	800725c <__kernel_rem_pio2+0x3a4>
 8007272:	a842      	add	r0, sp, #264	; 0x108
 8007274:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007278:	ed81 7b00 	vstr	d7, [r1]
 800727c:	3a01      	subs	r2, #1
 800727e:	e726      	b.n	80070ce <__kernel_rem_pio2+0x216>
 8007280:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8007282:	2a02      	cmp	r2, #2
 8007284:	dc0a      	bgt.n	800729c <__kernel_rem_pio2+0x3e4>
 8007286:	2a00      	cmp	r2, #0
 8007288:	dc2e      	bgt.n	80072e8 <__kernel_rem_pio2+0x430>
 800728a:	d047      	beq.n	800731c <__kernel_rem_pio2+0x464>
 800728c:	f008 0007 	and.w	r0, r8, #7
 8007290:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8007294:	ecbd 8b06 	vpop	{d8-d10}
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800729e:	2a03      	cmp	r2, #3
 80072a0:	d1f4      	bne.n	800728c <__kernel_rem_pio2+0x3d4>
 80072a2:	a942      	add	r1, sp, #264	; 0x108
 80072a4:	f1a3 0208 	sub.w	r2, r3, #8
 80072a8:	440a      	add	r2, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	4658      	mov	r0, fp
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f1a1 0108 	sub.w	r1, r1, #8
 80072b4:	dc55      	bgt.n	8007362 <__kernel_rem_pio2+0x4aa>
 80072b6:	4659      	mov	r1, fp
 80072b8:	2901      	cmp	r1, #1
 80072ba:	f1a2 0208 	sub.w	r2, r2, #8
 80072be:	dc60      	bgt.n	8007382 <__kernel_rem_pio2+0x4ca>
 80072c0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80073d8 <__kernel_rem_pio2+0x520>
 80072c4:	aa42      	add	r2, sp, #264	; 0x108
 80072c6:	4413      	add	r3, r2
 80072c8:	f1bb 0f01 	cmp.w	fp, #1
 80072cc:	dc69      	bgt.n	80073a2 <__kernel_rem_pio2+0x4ea>
 80072ce:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80072d2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d16a      	bne.n	80073b0 <__kernel_rem_pio2+0x4f8>
 80072da:	ed87 5b00 	vstr	d5, [r7]
 80072de:	ed87 6b02 	vstr	d6, [r7, #8]
 80072e2:	ed87 7b04 	vstr	d7, [r7, #16]
 80072e6:	e7d1      	b.n	800728c <__kernel_rem_pio2+0x3d4>
 80072e8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80073d8 <__kernel_rem_pio2+0x520>
 80072ec:	aa42      	add	r2, sp, #264	; 0x108
 80072ee:	4413      	add	r3, r2
 80072f0:	465a      	mov	r2, fp
 80072f2:	2a00      	cmp	r2, #0
 80072f4:	da26      	bge.n	8007344 <__kernel_rem_pio2+0x48c>
 80072f6:	b35e      	cbz	r6, 8007350 <__kernel_rem_pio2+0x498>
 80072f8:	eeb1 7b46 	vneg.f64	d7, d6
 80072fc:	ed87 7b00 	vstr	d7, [r7]
 8007300:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8007304:	aa44      	add	r2, sp, #272	; 0x110
 8007306:	2301      	movs	r3, #1
 8007308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800730c:	459b      	cmp	fp, r3
 800730e:	da22      	bge.n	8007356 <__kernel_rem_pio2+0x49e>
 8007310:	b10e      	cbz	r6, 8007316 <__kernel_rem_pio2+0x45e>
 8007312:	eeb1 7b47 	vneg.f64	d7, d7
 8007316:	ed87 7b02 	vstr	d7, [r7, #8]
 800731a:	e7b7      	b.n	800728c <__kernel_rem_pio2+0x3d4>
 800731c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80073d8 <__kernel_rem_pio2+0x520>
 8007320:	aa42      	add	r2, sp, #264	; 0x108
 8007322:	4413      	add	r3, r2
 8007324:	f1bb 0f00 	cmp.w	fp, #0
 8007328:	da05      	bge.n	8007336 <__kernel_rem_pio2+0x47e>
 800732a:	b10e      	cbz	r6, 8007330 <__kernel_rem_pio2+0x478>
 800732c:	eeb1 7b47 	vneg.f64	d7, d7
 8007330:	ed87 7b00 	vstr	d7, [r7]
 8007334:	e7aa      	b.n	800728c <__kernel_rem_pio2+0x3d4>
 8007336:	ed33 6b02 	vldmdb	r3!, {d6}
 800733a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800733e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007342:	e7ef      	b.n	8007324 <__kernel_rem_pio2+0x46c>
 8007344:	ed33 7b02 	vldmdb	r3!, {d7}
 8007348:	3a01      	subs	r2, #1
 800734a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800734e:	e7d0      	b.n	80072f2 <__kernel_rem_pio2+0x43a>
 8007350:	eeb0 7b46 	vmov.f64	d7, d6
 8007354:	e7d2      	b.n	80072fc <__kernel_rem_pio2+0x444>
 8007356:	ecb2 6b02 	vldmia	r2!, {d6}
 800735a:	3301      	adds	r3, #1
 800735c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007360:	e7d4      	b.n	800730c <__kernel_rem_pio2+0x454>
 8007362:	ed91 7b00 	vldr	d7, [r1]
 8007366:	ed91 5b02 	vldr	d5, [r1, #8]
 800736a:	3801      	subs	r0, #1
 800736c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007370:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007374:	ed81 6b00 	vstr	d6, [r1]
 8007378:	ee37 7b05 	vadd.f64	d7, d7, d5
 800737c:	ed81 7b02 	vstr	d7, [r1, #8]
 8007380:	e795      	b.n	80072ae <__kernel_rem_pio2+0x3f6>
 8007382:	ed92 7b00 	vldr	d7, [r2]
 8007386:	ed92 5b02 	vldr	d5, [r2, #8]
 800738a:	3901      	subs	r1, #1
 800738c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8007390:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007394:	ed82 6b00 	vstr	d6, [r2]
 8007398:	ee37 7b05 	vadd.f64	d7, d7, d5
 800739c:	ed82 7b02 	vstr	d7, [r2, #8]
 80073a0:	e78a      	b.n	80072b8 <__kernel_rem_pio2+0x400>
 80073a2:	ed33 6b02 	vldmdb	r3!, {d6}
 80073a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80073ae:	e78b      	b.n	80072c8 <__kernel_rem_pio2+0x410>
 80073b0:	eeb1 5b45 	vneg.f64	d5, d5
 80073b4:	eeb1 6b46 	vneg.f64	d6, d6
 80073b8:	ed87 5b00 	vstr	d5, [r7]
 80073bc:	eeb1 7b47 	vneg.f64	d7, d7
 80073c0:	ed87 6b02 	vstr	d6, [r7, #8]
 80073c4:	e78d      	b.n	80072e2 <__kernel_rem_pio2+0x42a>
 80073c6:	bf00      	nop
 80073c8:	00000000 	.word	0x00000000
 80073cc:	41700000 	.word	0x41700000
 80073d0:	00000000 	.word	0x00000000
 80073d4:	3e700000 	.word	0x3e700000
	...

080073e0 <__kernel_cos>:
 80073e0:	ee10 1a90 	vmov	r1, s1
 80073e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80073e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073ec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80073f0:	da05      	bge.n	80073fe <__kernel_cos+0x1e>
 80073f2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80073f6:	ee17 3a90 	vmov	r3, s15
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d03d      	beq.n	800747a <__kernel_cos+0x9a>
 80073fe:	ee20 5b00 	vmul.f64	d5, d0, d0
 8007402:	ee21 1b40 	vnmul.f64	d1, d1, d0
 8007406:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8007480 <__kernel_cos+0xa0>
 800740a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8007488 <__kernel_cos+0xa8>
 800740e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8007412:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8007490 <__kernel_cos+0xb0>
 8007416:	eea4 7b05 	vfma.f64	d7, d4, d5
 800741a:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8007498 <__kernel_cos+0xb8>
 800741e:	eea7 4b05 	vfma.f64	d4, d7, d5
 8007422:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80074a0 <__kernel_cos+0xc0>
 8007426:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <__kernel_cos+0xd0>)
 8007428:	eea4 7b05 	vfma.f64	d7, d4, d5
 800742c:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 80074a8 <__kernel_cos+0xc8>
 8007430:	4299      	cmp	r1, r3
 8007432:	eea7 4b05 	vfma.f64	d4, d7, d5
 8007436:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800743a:	ee24 4b05 	vmul.f64	d4, d4, d5
 800743e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007442:	eea5 1b04 	vfma.f64	d1, d5, d4
 8007446:	dc04      	bgt.n	8007452 <__kernel_cos+0x72>
 8007448:	ee37 7b41 	vsub.f64	d7, d7, d1
 800744c:	ee36 0b47 	vsub.f64	d0, d6, d7
 8007450:	4770      	bx	lr
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <__kernel_cos+0xd4>)
 8007454:	4299      	cmp	r1, r3
 8007456:	dc0d      	bgt.n	8007474 <__kernel_cos+0x94>
 8007458:	2200      	movs	r2, #0
 800745a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800745e:	ec43 2b15 	vmov	d5, r2, r3
 8007462:	ee36 0b45 	vsub.f64	d0, d6, d5
 8007466:	ee37 7b45 	vsub.f64	d7, d7, d5
 800746a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800746e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8007472:	4770      	bx	lr
 8007474:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8007478:	e7f3      	b.n	8007462 <__kernel_cos+0x82>
 800747a:	eeb0 0b46 	vmov.f64	d0, d6
 800747e:	4770      	bx	lr
 8007480:	be8838d4 	.word	0xbe8838d4
 8007484:	bda8fae9 	.word	0xbda8fae9
 8007488:	bdb4b1c4 	.word	0xbdb4b1c4
 800748c:	3e21ee9e 	.word	0x3e21ee9e
 8007490:	809c52ad 	.word	0x809c52ad
 8007494:	be927e4f 	.word	0xbe927e4f
 8007498:	19cb1590 	.word	0x19cb1590
 800749c:	3efa01a0 	.word	0x3efa01a0
 80074a0:	16c15177 	.word	0x16c15177
 80074a4:	bf56c16c 	.word	0xbf56c16c
 80074a8:	5555554c 	.word	0x5555554c
 80074ac:	3fa55555 	.word	0x3fa55555
 80074b0:	3fd33332 	.word	0x3fd33332
 80074b4:	3fe90000 	.word	0x3fe90000

080074b8 <__kernel_sin>:
 80074b8:	ee10 3a90 	vmov	r3, s1
 80074bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80074c4:	da04      	bge.n	80074d0 <__kernel_sin+0x18>
 80074c6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80074ca:	ee17 3a90 	vmov	r3, s15
 80074ce:	b35b      	cbz	r3, 8007528 <__kernel_sin+0x70>
 80074d0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80074d4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80074d8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8007530 <__kernel_sin+0x78>
 80074dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007538 <__kernel_sin+0x80>
 80074e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80074e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007540 <__kernel_sin+0x88>
 80074e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80074ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007548 <__kernel_sin+0x90>
 80074f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80074f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007550 <__kernel_sin+0x98>
 80074f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80074fc:	b930      	cbnz	r0, 800750c <__kernel_sin+0x54>
 80074fe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007558 <__kernel_sin+0xa0>
 8007502:	eea6 4b07 	vfma.f64	d4, d6, d7
 8007506:	eea4 0b05 	vfma.f64	d0, d4, d5
 800750a:	4770      	bx	lr
 800750c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8007510:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007514:	eea1 7b04 	vfma.f64	d7, d1, d4
 8007518:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800751c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007560 <__kernel_sin+0xa8>
 8007520:	eea5 1b07 	vfma.f64	d1, d5, d7
 8007524:	ee30 0b41 	vsub.f64	d0, d0, d1
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
 8007530:	5acfd57c 	.word	0x5acfd57c
 8007534:	3de5d93a 	.word	0x3de5d93a
 8007538:	8a2b9ceb 	.word	0x8a2b9ceb
 800753c:	be5ae5e6 	.word	0xbe5ae5e6
 8007540:	57b1fe7d 	.word	0x57b1fe7d
 8007544:	3ec71de3 	.word	0x3ec71de3
 8007548:	19c161d5 	.word	0x19c161d5
 800754c:	bf2a01a0 	.word	0xbf2a01a0
 8007550:	1110f8a6 	.word	0x1110f8a6
 8007554:	3f811111 	.word	0x3f811111
 8007558:	55555549 	.word	0x55555549
 800755c:	bfc55555 	.word	0xbfc55555
 8007560:	55555549 	.word	0x55555549
 8007564:	3fc55555 	.word	0x3fc55555

08007568 <fabs>:
 8007568:	ec51 0b10 	vmov	r0, r1, d0
 800756c:	ee10 2a10 	vmov	r2, s0
 8007570:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007574:	ec43 2b10 	vmov	d0, r2, r3
 8007578:	4770      	bx	lr
 800757a:	0000      	movs	r0, r0
 800757c:	0000      	movs	r0, r0
	...

08007580 <scalbn>:
 8007580:	ee10 1a90 	vmov	r1, s1
 8007584:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007588:	b98b      	cbnz	r3, 80075ae <scalbn+0x2e>
 800758a:	ee10 3a10 	vmov	r3, s0
 800758e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007592:	4319      	orrs	r1, r3
 8007594:	d00a      	beq.n	80075ac <scalbn+0x2c>
 8007596:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8007648 <scalbn+0xc8>
 800759a:	4b37      	ldr	r3, [pc, #220]	; (8007678 <scalbn+0xf8>)
 800759c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80075a0:	4298      	cmp	r0, r3
 80075a2:	da0b      	bge.n	80075bc <scalbn+0x3c>
 80075a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007650 <scalbn+0xd0>
 80075a8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80075ac:	4770      	bx	lr
 80075ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d107      	bne.n	80075c6 <scalbn+0x46>
 80075b6:	ee30 0b00 	vadd.f64	d0, d0, d0
 80075ba:	4770      	bx	lr
 80075bc:	ee10 1a90 	vmov	r1, s1
 80075c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075c4:	3b36      	subs	r3, #54	; 0x36
 80075c6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80075ca:	4290      	cmp	r0, r2
 80075cc:	dd0d      	ble.n	80075ea <scalbn+0x6a>
 80075ce:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007658 <scalbn+0xd8>
 80075d2:	ee10 3a90 	vmov	r3, s1
 80075d6:	eeb0 6b47 	vmov.f64	d6, d7
 80075da:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8007660 <scalbn+0xe0>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80075e4:	ee27 0b06 	vmul.f64	d0, d7, d6
 80075e8:	4770      	bx	lr
 80075ea:	4418      	add	r0, r3
 80075ec:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80075f0:	4298      	cmp	r0, r3
 80075f2:	dcec      	bgt.n	80075ce <scalbn+0x4e>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	dd0a      	ble.n	800760e <scalbn+0x8e>
 80075f8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80075fc:	ec53 2b10 	vmov	r2, r3, d0
 8007600:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007604:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8007608:	ec43 2b10 	vmov	d0, r2, r3
 800760c:	4770      	bx	lr
 800760e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8007612:	da09      	bge.n	8007628 <scalbn+0xa8>
 8007614:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007650 <scalbn+0xd0>
 8007618:	ee10 3a90 	vmov	r3, s1
 800761c:	eeb0 6b47 	vmov.f64	d6, d7
 8007620:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8007668 <scalbn+0xe8>
 8007624:	2b00      	cmp	r3, #0
 8007626:	e7db      	b.n	80075e0 <scalbn+0x60>
 8007628:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800762c:	ec53 2b10 	vmov	r2, r3, d0
 8007630:	3036      	adds	r0, #54	; 0x36
 8007632:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007636:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800763a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8007670 <scalbn+0xf0>
 800763e:	ec43 2b10 	vmov	d0, r2, r3
 8007642:	e7b1      	b.n	80075a8 <scalbn+0x28>
 8007644:	f3af 8000 	nop.w
 8007648:	00000000 	.word	0x00000000
 800764c:	43500000 	.word	0x43500000
 8007650:	c2f8f359 	.word	0xc2f8f359
 8007654:	01a56e1f 	.word	0x01a56e1f
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	8800759c 	.word	0x8800759c
 8007664:	fe37e43c 	.word	0xfe37e43c
 8007668:	c2f8f359 	.word	0xc2f8f359
 800766c:	81a56e1f 	.word	0x81a56e1f
 8007670:	00000000 	.word	0x00000000
 8007674:	3c900000 	.word	0x3c900000
 8007678:	ffff3cb0 	.word	0xffff3cb0
 800767c:	00000000 	.word	0x00000000

08007680 <floor>:
 8007680:	ee10 1a90 	vmov	r1, s1
 8007684:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007688:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800768c:	2b13      	cmp	r3, #19
 800768e:	b530      	push	{r4, r5, lr}
 8007690:	ee10 0a10 	vmov	r0, s0
 8007694:	ee10 5a10 	vmov	r5, s0
 8007698:	dc31      	bgt.n	80076fe <floor+0x7e>
 800769a:	2b00      	cmp	r3, #0
 800769c:	da15      	bge.n	80076ca <floor+0x4a>
 800769e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007760 <floor+0xe0>
 80076a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80076a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ae:	dd07      	ble.n	80076c0 <floor+0x40>
 80076b0:	2900      	cmp	r1, #0
 80076b2:	da4e      	bge.n	8007752 <floor+0xd2>
 80076b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80076b8:	4308      	orrs	r0, r1
 80076ba:	d04d      	beq.n	8007758 <floor+0xd8>
 80076bc:	492a      	ldr	r1, [pc, #168]	; (8007768 <floor+0xe8>)
 80076be:	2000      	movs	r0, #0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4602      	mov	r2, r0
 80076c4:	ec43 2b10 	vmov	d0, r2, r3
 80076c8:	e020      	b.n	800770c <floor+0x8c>
 80076ca:	4a28      	ldr	r2, [pc, #160]	; (800776c <floor+0xec>)
 80076cc:	411a      	asrs	r2, r3
 80076ce:	ea01 0402 	and.w	r4, r1, r2
 80076d2:	4304      	orrs	r4, r0
 80076d4:	d01a      	beq.n	800770c <floor+0x8c>
 80076d6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8007760 <floor+0xe0>
 80076da:	ee30 0b07 	vadd.f64	d0, d0, d7
 80076de:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80076e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e6:	ddeb      	ble.n	80076c0 <floor+0x40>
 80076e8:	2900      	cmp	r1, #0
 80076ea:	bfbe      	ittt	lt
 80076ec:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80076f0:	fa40 f303 	asrlt.w	r3, r0, r3
 80076f4:	18c9      	addlt	r1, r1, r3
 80076f6:	ea21 0102 	bic.w	r1, r1, r2
 80076fa:	2000      	movs	r0, #0
 80076fc:	e7e0      	b.n	80076c0 <floor+0x40>
 80076fe:	2b33      	cmp	r3, #51	; 0x33
 8007700:	dd05      	ble.n	800770e <floor+0x8e>
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007706:	d101      	bne.n	800770c <floor+0x8c>
 8007708:	ee30 0b00 	vadd.f64	d0, d0, d0
 800770c:	bd30      	pop	{r4, r5, pc}
 800770e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8007712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007716:	40e2      	lsrs	r2, r4
 8007718:	4210      	tst	r0, r2
 800771a:	d0f7      	beq.n	800770c <floor+0x8c>
 800771c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007760 <floor+0xe0>
 8007720:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007724:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	ddc8      	ble.n	80076c0 <floor+0x40>
 800772e:	2900      	cmp	r1, #0
 8007730:	da02      	bge.n	8007738 <floor+0xb8>
 8007732:	2b14      	cmp	r3, #20
 8007734:	d103      	bne.n	800773e <floor+0xbe>
 8007736:	3101      	adds	r1, #1
 8007738:	ea20 0002 	bic.w	r0, r0, r2
 800773c:	e7c0      	b.n	80076c0 <floor+0x40>
 800773e:	2401      	movs	r4, #1
 8007740:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007744:	fa04 f303 	lsl.w	r3, r4, r3
 8007748:	4418      	add	r0, r3
 800774a:	4285      	cmp	r5, r0
 800774c:	bf88      	it	hi
 800774e:	1909      	addhi	r1, r1, r4
 8007750:	e7f2      	b.n	8007738 <floor+0xb8>
 8007752:	2000      	movs	r0, #0
 8007754:	4601      	mov	r1, r0
 8007756:	e7b3      	b.n	80076c0 <floor+0x40>
 8007758:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800775c:	e7b0      	b.n	80076c0 <floor+0x40>
 800775e:	bf00      	nop
 8007760:	8800759c 	.word	0x8800759c
 8007764:	7e37e43c 	.word	0x7e37e43c
 8007768:	bff00000 	.word	0xbff00000
 800776c:	000fffff 	.word	0x000fffff

08007770 <_init>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr

0800777c <_fini>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr
