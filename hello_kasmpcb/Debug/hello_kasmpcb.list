
hello_kasmpcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007488  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007720  08007720  00008720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007938  08007938  00008938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800793c  0800793c  0000893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08007940  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002058  24000018  08007954  00009018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24002070  08007954  00009070  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014ae9  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000234b  00000000  00000000  0001db2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fb8  00000000  00000000  0001fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c59  00000000  00000000  00020e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e94  00000000  00000000  00021a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001435c  00000000  00000000  0005891d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001637ee  00000000  00000000  0006cc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0467  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000044b4  00000000  00000000  001d04ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004b  00000000  00000000  001d4960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007708 	.word	0x08007708

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08007708 	.word	0x08007708

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd1e 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f82c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9d0 	bl	8000978 <MX_GPIO_Init>
  MX_UART4_Init();
 80005d8:	f000 f982 	bl	80008e0 <MX_UART4_Init>
  MX_TIM1_Init();
 80005dc:	f000 f8d4 	bl	8000788 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x54>)
 80005e2:	f003 ff2f 	bl	8004444 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM generation on timer 1, channel 1
 80005e6:	2100      	movs	r1, #0
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <main+0x54>)
 80005ea:	f004 f805 	bl	80045f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005ee:	2104      	movs	r1, #4
 80005f0:	480a      	ldr	r0, [pc, #40]	@ (800061c <main+0x54>)
 80005f2:	f004 f801 	bl	80045f8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TMR_1_1_PH_GPIO_Port, TMR_1_1_PH_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <main+0x58>)
 80005fc:	f001 f864 	bl	80016c8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TMR_1_2_PH_GPIO_Port, TMR_1_2_PH_Pin, GPIO_PIN_SET); //Initializes the channel 2 Pins
  gen_sine();
 8000600:	f000 faf6 	bl	8000bf0 <gen_sine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ctrl_tmr_expired == TRUE) control_update(ref);
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <main+0x5c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d1fb      	bne.n	8000604 <main+0x3c>
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <main+0x60>)
 800060e:	ed93 7b00 	vldr	d7, [r3]
 8000612:	eeb0 0b47 	vmov.f64	d0, d7
 8000616:	f000 fa67 	bl	8000ae8 <control_update>
 800061a:	e7f3      	b.n	8000604 <main+0x3c>
 800061c:	24000034 	.word	0x24000034
 8000620:	58021000 	.word	0x58021000
 8000624:	24000114 	.word	0x24000114
 8000628:	24000118 	.word	0x24000118

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09e      	sub	sp, #120	@ 0x78
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000636:	224c      	movs	r2, #76	@ 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fa6c 	bl	8006b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2220      	movs	r2, #32
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f006 fa65 	bl	8006b18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064e:	2002      	movs	r0, #2
 8000650:	f001 f854 	bl	80016fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b48      	ldr	r3, [pc, #288]	@ (800077c <SystemClock_Config+0x150>)
 800065a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065c:	4a47      	ldr	r2, [pc, #284]	@ (800077c <SystemClock_Config+0x150>)
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000664:	4b45      	ldr	r3, [pc, #276]	@ (800077c <SystemClock_Config+0x150>)
 8000666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <SystemClock_Config+0x154>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a43      	ldr	r2, [pc, #268]	@ (8000780 <SystemClock_Config+0x154>)
 8000674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b41      	ldr	r3, [pc, #260]	@ (8000780 <SystemClock_Config+0x154>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000686:	bf00      	nop
 8000688:	4b3d      	ldr	r3, [pc, #244]	@ (8000780 <SystemClock_Config+0x154>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000694:	d1f8      	bne.n	8000688 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b3b      	ldr	r3, [pc, #236]	@ (8000784 <SystemClock_Config+0x158>)
 8000698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800069c:	4a39      	ldr	r2, [pc, #228]	@ (8000784 <SystemClock_Config+0x158>)
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <SystemClock_Config+0x158>)
 80006a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <SystemClock_Config+0x154>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a30      	ldr	r2, [pc, #192]	@ (8000780 <SystemClock_Config+0x154>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <SystemClock_Config+0x154>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <SystemClock_Config+0x150>)
 80006d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d2:	4a2a      	ldr	r2, [pc, #168]	@ (800077c <SystemClock_Config+0x150>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <SystemClock_Config+0x150>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e6:	bf00      	nop
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0x154>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006f4:	d1f8      	bne.n	80006e8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000704:	2302      	movs	r3, #2
 8000706:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800070c:	2350      	movs	r3, #80	@ 0x50
 800070e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800071c:	230c      	movs	r3, #12
 800071e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000720:	2300      	movs	r3, #0
 8000722:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f81f 	bl	8001770 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000738:	f000 fa90 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	233f      	movs	r3, #63	@ 0x3f
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000750:	2340      	movs	r3, #64	@ 0x40
 8000752:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800075a:	2340      	movs	r3, #64	@ 0x40
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2104      	movs	r1, #4
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc5d 	bl	8002024 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000770:	f000 fa74 	bl	8000c5c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3778      	adds	r7, #120	@ 0x78
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58000400 	.word	0x58000400
 8000780:	58024800 	.word	0x58024800
 8000784:	58024400 	.word	0x58024400

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09a      	sub	sp, #104	@ 0x68
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	222c      	movs	r2, #44	@ 0x2c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 f9a8 	bl	8006b18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b43      	ldr	r3, [pc, #268]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007ca:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ce:	4b42      	ldr	r3, [pc, #264]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b40      	ldr	r3, [pc, #256]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 80007da:	4b3f      	ldr	r3, [pc, #252]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007dc:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b3d      	ldr	r3, [pc, #244]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b3b      	ldr	r3, [pc, #236]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ee:	4b3a      	ldr	r3, [pc, #232]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f4:	4838      	ldr	r0, [pc, #224]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80007f6:	f003 fdcd 	bl	8004394 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 fa2c 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800080e:	4619      	mov	r1, r3
 8000810:	4831      	ldr	r0, [pc, #196]	@ (80008d8 <MX_TIM1_Init+0x150>)
 8000812:	f004 fa1b 	bl	8004c4c <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800081c:	f000 fa1e 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000820:	482d      	ldr	r0, [pc, #180]	@ (80008d8 <MX_TIM1_Init+0x150>)
 8000822:	f003 fe87 	bl	8004534 <HAL_TIM_PWM_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800082c:	f000 fa16 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000840:	4619      	mov	r1, r3
 8000842:	4825      	ldr	r0, [pc, #148]	@ (80008d8 <MX_TIM1_Init+0x150>)
 8000844:	f004 ff62 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800084e:	f000 fa05 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	@ 0x60
 8000854:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <MX_TIM1_Init+0x150>)
 8000878:	f004 f8d4 	bl	8004a24 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000882:	f000 f9eb 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80008bc:	f004 ffb4 	bl	8005828 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008c6:	f000 f9c9 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MX_TIM1_Init+0x150>)
 80008cc:	f000 fa0e 	bl	8000cec <HAL_TIM_MspPostInit>

}
 80008d0:	bf00      	nop
 80008d2:	3768      	adds	r7, #104	@ 0x68
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000034 	.word	0x24000034
 80008dc:	40010000 	.word	0x40010000

080008e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_UART4_Init+0x90>)
 80008e6:	4a23      	ldr	r2, [pc, #140]	@ (8000974 <MX_UART4_Init+0x94>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ea:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_UART4_Init+0x90>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_UART4_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <MX_UART4_Init+0x90>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_UART4_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_UART4_Init+0x90>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_UART4_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_UART4_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_UART4_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_UART4_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_UART4_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000928:	4811      	ldr	r0, [pc, #68]	@ (8000970 <MX_UART4_Init+0x90>)
 800092a:	f005 f819 	bl	8005960 <HAL_UART_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f992 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_UART4_Init+0x90>)
 800093c:	f006 f821 	bl	8006982 <HAL_UARTEx_SetTxFifoThreshold>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000946:	f000 f989 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4808      	ldr	r0, [pc, #32]	@ (8000970 <MX_UART4_Init+0x90>)
 800094e:	f006 f856 	bl	80069fe <HAL_UARTEx_SetRxFifoThreshold>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000958:	f000 f980 	bl	8000c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_UART4_Init+0x90>)
 800095e:	f005 ffd7 	bl	8006910 <HAL_UARTEx_DisableFifoMode>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f978 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	24000080 	.word	0x24000080
 8000974:	40004c00 	.word	0x40004c00

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	4a27      	ldr	r2, [pc, #156]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 8000996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099e:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_GPIO_Init+0xbc>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMR_1_1_PH_GPIO_Port, TMR_1_1_PH_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0xc0>)
 8000a0c:	f000 fe5c 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TMR_1_1_PH_Pin */
  GPIO_InitStruct.Pin = TMR_1_1_PH_Pin;
 8000a10:	2301      	movs	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TMR_1_1_PH_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0xc0>)
 8000a28:	f000 fc9e 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	@ 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58021000 	.word	0x58021000
 8000a3c:	00000000 	.word	0x00000000

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	static int i = 0;  // index for actuator update
	static int t = 0; // variable to track time
	const int period = 10; // number of timer rollovers between updates
 8000a48:	230a      	movs	r3, #10
 8000a4a:	617b      	str	r3, [r7, #20]
	const double step = 0.3;// max step size in volts
 8000a4c:	a324      	add	r3, pc, #144	@ (adr r3, 8000ae0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	e9c7 2302 	strd	r2, r3, [r7, #8]


    if (htim==&htim1){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12d      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x7a>
    	t+=1;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a66:	6013      	str	r3, [r2, #0]
    	if(t%period == 0)
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	fb93 f2f2 	sdiv	r2, r3, r2
 8000a72:	6979      	ldr	r1, [r7, #20]
 8000a74:	fb01 f202 	mul.w	r2, r1, r2
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11d      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    		if(i>=SIN_PERIOD) i = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a86:	db02      	blt.n	8000a8e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
    		//update the output
    		ref = sine_vals[i]*step;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	ed93 6b00 	vldr	d6, [r3]
 8000a9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000aa6:	ed83 7b00 	vstr	d7, [r3]
			// inform main that the actuators need an update
    		i+=1;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ab2:	6013      	str	r3, [r2, #0]
			ctrl_tmr_expired = TRUE;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
    	}
	}

}
 8000aba:	bf00      	nop
 8000abc:	371c      	adds	r7, #28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	24000034 	.word	0x24000034
 8000acc:	24002060 	.word	0x24002060
 8000ad0:	24002064 	.word	0x24002064
 8000ad4:	24000120 	.word	0x24000120
 8000ad8:	24000118 	.word	0x24000118
 8000adc:	24000114 	.word	0x24000114
 8000ae0:	33333333 	.word	0x33333333
 8000ae4:	3fd33333 	.word	0x3fd33333

08000ae8 <control_update>:

static void control_update(double ref)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	ed87 0b00 	vstr	d0, [r7]
	// sign bit of the command fed to phase input on the h-bridge
	static int phase=GPIO_PIN_SET;
	int new_phase = {0};
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
	static uint16_t dutycycle=0;
	uint16_t new_dc;
	double absref = 0;
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// indicate interrupt operation
//	HAL_GPIO_TogglePin(UPDATE_GPIO_Port, UPDATE_Pin);

	// set the sign of the move (phase)
	if(ref < 0){
 8000b02:	ed97 7b00 	vldr	d7, [r7]
 8000b06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0e:	d503      	bpl.n	8000b18 <control_update+0x30>
		phase = GPIO_PIN_RESET; // reverse direction
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <control_update+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e002      	b.n	8000b1e <control_update+0x36>
	} else {
		phase = GPIO_PIN_SET; //forward direction
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <control_update+0x98>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
	}
	// update the phase if it has changed
//	if(new_phase != phase){
		HAL_GPIO_WritePin(TMR_1_1_PH_GPIO_Port, TMR_1_1_PH_Pin, phase);
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <control_update+0x98>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	2101      	movs	r1, #1
 8000b28:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <control_update+0x9c>)
 8000b2a:	f000 fdcd 	bl	80016c8 <HAL_GPIO_WritePin>
//	}

	// calculate the dutycycle
	absref = fabs(ref); // duty cycle must be positive
 8000b2e:	ed97 7b00 	vldr	d7, [r7]
 8000b32:	eeb0 7bc7 	vabs.f64	d7, d7
 8000b36:	ed87 7b04 	vstr	d7, [r7, #16]
	new_dc = calc_dutycycle(absref,VSS);
 8000b3a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000b78 <control_update+0x90>
 8000b3e:	eeb0 1b47 	vmov.f64	d1, d7
 8000b42:	ed97 0b04 	vldr	d0, [r7, #16]
 8000b46:	f000 f827 	bl	8000b98 <calc_dutycycle>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81fb      	strh	r3, [r7, #14]
	// if new dutycycle is different than the old dutycycle
	if(new_dc != dutycycle){
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <control_update+0xa0>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	89fa      	ldrh	r2, [r7, #14]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d006      	beq.n	8000b66 <control_update+0x7e>
		// then save new dutycycle
		dutycycle = new_dc;
 8000b58:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <control_update+0xa0>)
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	8013      	strh	r3, [r2, #0]
		//set the new timer dutycycle register
		TIM1->CCR1 = dutycycle;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <control_update+0xa0>)
 8000b60:	881a      	ldrh	r2, [r3, #0]
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <control_update+0xa4>)
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	// reset timer flag
	ctrl_tmr_expired = FALSE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <control_update+0xa8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	f3af 8000 	nop.w
 8000b78:	cccccccd 	.word	0xcccccccd
 8000b7c:	3ffccccc 	.word	0x3ffccccc
 8000b80:	24000000 	.word	0x24000000
 8000b84:	58021000 	.word	0x58021000
 8000b88:	24002068 	.word	0x24002068
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	24000114 	.word	0x24000114
 8000b94:	00000000 	.word	0x00000000

08000b98 <calc_dutycycle>:

static uint16_t calc_dutycycle(double cmd, double vss)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ba2:	ed87 1b00 	vstr	d1, [r7]
	//	@ param cmd command voltage
	//	@ param vss supply voltage
	//	@ return dutycycle

	// duty cycle variable
	uint16_t dc={0};
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	82fb      	strh	r3, [r7, #22]

	dc = (uint16_t)(cmd/vss * (double)PERIOD);
 8000baa:	ed97 5b02 	vldr	d5, [r7, #8]
 8000bae:	ed97 6b00 	vldr	d6, [r7]
 8000bb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000bb6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8000be8 <calc_dutycycle+0x50>
 8000bba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc2:	ee17 3a90 	vmov	r3, s15
 8000bc6:	82fb      	strh	r3, [r7, #22]
	// keep the dutycycle within the period of the PWM signal
	if(dc>PERIOD) dc = PERIOD;
 8000bc8:	8afb      	ldrh	r3, [r7, #22]
 8000bca:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d902      	bls.n	8000bd8 <calc_dutycycle+0x40>
 8000bd2:	f645 53bf 	movw	r3, #23999	@ 0x5dbf
 8000bd6:	82fb      	strh	r3, [r7, #22]

	return dc;
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	00000000 	.word	0x00000000
 8000bec:	40d76fc0 	.word	0x40d76fc0

08000bf0 <gen_sine>:

static void gen_sine(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
	int i = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
	double scale = TWO_PI/SIN_PERIOD;
 8000bfa:	a316      	add	r3, pc, #88	@ (adr r3, 8000c54 <gen_sine+0x64>)
 8000bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c00:	e9c7 2300 	strd	r2, r3, [r7]
	for(i=0; i<SIN_PERIOD; i++ )
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e017      	b.n	8000c3a <gen_sine+0x4a>
	{
		sine_vals[i] = sin(i*scale);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c14:	ed97 7b00 	vldr	d7, [r7]
 8000c18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c20:	f005 ffa6 	bl	8006b70 <sin>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	4a09      	ldr	r2, [pc, #36]	@ (8000c50 <gen_sine+0x60>)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	4413      	add	r3, r2
 8000c30:	ed83 7b00 	vstr	d7, [r3]
	for(i=0; i<SIN_PERIOD; i++ )
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c40:	dbe3      	blt.n	8000c0a <gen_sine+0x1a>
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	f3af 8000 	nop.w
 8000c50:	24000120 	.word	0x24000120
 8000c54:	b68b71c3 	.word	0xb68b71c3
 8000c58:	3f79bc65 	.word	0x3f79bc65

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_MspInit+0x30>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	58024400 	.word	0x58024400

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x48>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d116      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x4c>)
 8000cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2019      	movs	r0, #25
 8000cd2:	f000 fb14 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cd6:	2019      	movs	r0, #25
 8000cd8:	f000 fb2b 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	58024400 	.word	0x58024400

08000cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11f      	bne.n	8000d4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <HAL_TIM_MspPostInit+0x70>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <HAL_TIM_MspPostInit+0x70>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_TIM_MspPostInit+0x70>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_TIM_MspPostInit+0x74>)
 8000d4a:	f000 fb0d 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58021000 	.word	0x58021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ba      	sub	sp, #232	@ 0xe8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	22c0      	movs	r2, #192	@ 0xc0
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fec7 	bl	8006b18 <memset>
  if(huart->Instance==UART4)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d145      	bne.n	8000e20 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d94:	f04f 0202 	mov.w	r2, #2
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fcc6 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000db6:	f7ff ff51 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	4a13      	ldr	r2, [pc, #76]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <HAL_UART_MspInit+0xc8>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <HAL_UART_MspInit+0xcc>)
 8000e1c:	f000 faa4 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	37e8      	adds	r7, #232	@ 0xe8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40004c00 	.word	0x40004c00
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	58020000 	.word	0x58020000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <NMI_Handler+0x4>

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8a:	f000 f931 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <TIM1_UP_IRQHandler+0x10>)
 8000e9a:	f003 fcbb 	bl	8004814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	24000034 	.word	0x24000034

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eac:	4b37      	ldr	r3, [pc, #220]	@ (8000f8c <SystemInit+0xe4>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eb2:	4a36      	ldr	r2, [pc, #216]	@ (8000f8c <SystemInit+0xe4>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ebc:	4b34      	ldr	r3, [pc, #208]	@ (8000f90 <SystemInit+0xe8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	2b06      	cmp	r3, #6
 8000ec6:	d807      	bhi.n	8000ed8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec8:	4b31      	ldr	r3, [pc, #196]	@ (8000f90 <SystemInit+0xe8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 030f 	bic.w	r3, r3, #15
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f90 <SystemInit+0xe8>)
 8000ed2:	f043 0307 	orr.w	r3, r3, #7
 8000ed6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <SystemInit+0xec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <SystemInit+0xec>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <SystemInit+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <SystemInit+0xec>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4929      	ldr	r1, [pc, #164]	@ (8000f94 <SystemInit+0xec>)
 8000ef0:	4b29      	ldr	r3, [pc, #164]	@ (8000f98 <SystemInit+0xf0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <SystemInit+0xe8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <SystemInit+0xe8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 030f 	bic.w	r3, r3, #15
 8000f0a:	4a21      	ldr	r2, [pc, #132]	@ (8000f90 <SystemInit+0xe8>)
 8000f0c:	f043 0307 	orr.w	r3, r3, #7
 8000f10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <SystemInit+0xec>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <SystemInit+0xec>)
 8000f26:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <SystemInit+0xf4>)
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <SystemInit+0xec>)
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <SystemInit+0xf8>)
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <SystemInit+0xec>)
 8000f32:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa4 <SystemInit+0xfc>)
 8000f34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <SystemInit+0xec>)
 8000f3e:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <SystemInit+0xfc>)
 8000f40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <SystemInit+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <SystemInit+0xec>)
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <SystemInit+0xfc>)
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <SystemInit+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <SystemInit+0xec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <SystemInit+0xec>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <SystemInit+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <SystemInit+0x100>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <SystemInit+0x104>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f72:	d202      	bcs.n	8000f7a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <SystemInit+0x108>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <SystemInit+0x10c>)
 8000f7c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	52002000 	.word	0x52002000
 8000f94:	58024400 	.word	0x58024400
 8000f98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f9c:	02020200 	.word	0x02020200
 8000fa0:	01ff0000 	.word	0x01ff0000
 8000fa4:	01010280 	.word	0x01010280
 8000fa8:	5c001000 	.word	0x5c001000
 8000fac:	ffff0000 	.word	0xffff0000
 8000fb0:	51008108 	.word	0x51008108
 8000fb4:	52004000 	.word	0x52004000

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff ff74 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	@ (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f005 fd9f 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff faed 	bl	80005c8 <main>
  bx  lr
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000ffc:	08007940 	.word	0x08007940
  ldr r2, =_sbss
 8001000:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001004:	24002070 	.word	0x24002070

08001008 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC3_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001012:	2003      	movs	r0, #3
 8001014:	f000 f968 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001018:	f001 f9ba 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_Init+0x68>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	4913      	ldr	r1, [pc, #76]	@ (8001078 <HAL_Init+0x6c>)
 800102a:	5ccb      	ldrb	r3, [r1, r3]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_Init+0x68>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_Init+0x6c>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_Init+0x70>)
 800104e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_Init+0x74>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001056:	200f      	movs	r0, #15
 8001058:	f000 f814 	bl	8001084 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e002      	b.n	800106c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff fdff 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	58024400 	.word	0x58024400
 8001078:	08007720 	.word	0x08007720
 800107c:	24000008 	.word	0x24000008
 8001080:	24000004 	.word	0x24000004

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_InitTick+0x60>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e021      	b.n	80010dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_InitTick+0x64>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_InitTick+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f94d 	bl	800134e <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f917 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	@ (80010ec <HAL_InitTick+0x68>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	24000010 	.word	0x24000010
 80010e8:	24000004 	.word	0x24000004
 80010ec:	2400000c 	.word	0x2400000c

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	24000010 	.word	0x24000010
 8001114:	2400206c 	.word	0x2400206c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2400206c 	.word	0x2400206c

08001130 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetREVID+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0c1b      	lsrs	r3, r3, #16
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	5c001000 	.word	0x5c001000

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	4313      	orrs	r3, r2
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x40>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00
 800118c:	05fa0000 	.word	0x05fa0000

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff40 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff33 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa4 	bl	80012a4 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001376:	4b89      	ldr	r3, [pc, #548]	@ (800159c <HAL_GPIO_Init+0x234>)
 8001378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137a:	e194      	b.n	80016a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8186 	beq.w	80016a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <HAL_GPIO_Init+0x44>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d130      	bne.n	800140e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e2:	2201      	movs	r2, #1
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 0201 	and.w	r2, r3, #1
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b03      	cmp	r3, #3
 8001418:	d017      	beq.n	800144a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d123      	bne.n	800149e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	220f      	movs	r2, #15
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	69b9      	ldr	r1, [r7, #24]
 800149a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0203 	and.w	r2, r3, #3
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80e0 	beq.w	80016a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e0:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <HAL_GPIO_Init+0x238>)
 80014e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014e6:	4a2e      	ldr	r2, [pc, #184]	@ (80015a0 <HAL_GPIO_Init+0x238>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_GPIO_Init+0x238>)
 80014f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a29      	ldr	r2, [pc, #164]	@ (80015a4 <HAL_GPIO_Init+0x23c>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <HAL_GPIO_Init+0x240>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d052      	beq.n	80015d0 <HAL_GPIO_Init+0x268>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ac <HAL_GPIO_Init+0x244>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_GPIO_Init+0x22e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a1e      	ldr	r2, [pc, #120]	@ (80015b0 <HAL_GPIO_Init+0x248>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x22a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <HAL_GPIO_Init+0x24c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1c      	ldr	r2, [pc, #112]	@ (80015b8 <HAL_GPIO_Init+0x250>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1b      	ldr	r2, [pc, #108]	@ (80015bc <HAL_GPIO_Init+0x254>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1a      	ldr	r2, [pc, #104]	@ (80015c0 <HAL_GPIO_Init+0x258>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_GPIO_Init+0x25c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <HAL_GPIO_Init+0x260>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <HAL_GPIO_Init+0x264>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x20e>
 8001572:	2309      	movs	r3, #9
 8001574:	e02d      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 8001576:	230a      	movs	r3, #10
 8001578:	e02b      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 800157a:	2308      	movs	r3, #8
 800157c:	e029      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 800157e:	2307      	movs	r3, #7
 8001580:	e027      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 8001582:	2306      	movs	r3, #6
 8001584:	e025      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 8001586:	2305      	movs	r3, #5
 8001588:	e023      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 800158a:	2304      	movs	r3, #4
 800158c:	e021      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 800158e:	2303      	movs	r3, #3
 8001590:	e01f      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 8001592:	2302      	movs	r3, #2
 8001594:	e01d      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 8001596:	2301      	movs	r3, #1
 8001598:	e01b      	b.n	80015d2 <HAL_GPIO_Init+0x26a>
 800159a:	bf00      	nop
 800159c:	58000080 	.word	0x58000080
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58000400 	.word	0x58000400
 80015a8:	58020000 	.word	0x58020000
 80015ac:	58020400 	.word	0x58020400
 80015b0:	58020800 	.word	0x58020800
 80015b4:	58020c00 	.word	0x58020c00
 80015b8:	58021000 	.word	0x58021000
 80015bc:	58021400 	.word	0x58021400
 80015c0:	58021800 	.word	0x58021800
 80015c4:	58021c00 	.word	0x58021c00
 80015c8:	58022000 	.word	0x58022000
 80015cc:	58022400 	.word	0x58022400
 80015d0:	2300      	movs	r3, #0
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e2:	4938      	ldr	r1, [pc, #224]	@ (80016c4 <HAL_GPIO_Init+0x35c>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f47f ae63 	bne.w	800137c <HAL_GPIO_Init+0x14>
  }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3724      	adds	r7, #36	@ 0x24
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	58000400 	.word	0x58000400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_PWREx_ConfigSupply+0x70>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d00a      	beq.n	8001726 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_PWREx_ConfigSupply+0x70>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e01f      	b.n	8001762 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e01d      	b.n	8001762 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_PWREx_ConfigSupply+0x70>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f023 0207 	bic.w	r2, r3, #7
 800172e:	490f      	ldr	r1, [pc, #60]	@ (800176c <HAL_PWREx_ConfigSupply+0x70>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4313      	orrs	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001736:	f7ff fcef 	bl	8001118 <HAL_GetTick>
 800173a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173c:	e009      	b.n	8001752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800173e:	f7ff fceb 	bl	8001118 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800174c:	d901      	bls.n	8001752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_PWREx_ConfigSupply+0x70>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175e:	d1ee      	bne.n	800173e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	58024800 	.word	0x58024800

08001770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	@ 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f000 bc48 	b.w	8002014 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8088 	beq.w	80018a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b99      	ldr	r3, [pc, #612]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800179c:	4b96      	ldr	r3, [pc, #600]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d007      	beq.n	80017b8 <HAL_RCC_OscConfig+0x48>
 80017a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017aa:	2b18      	cmp	r3, #24
 80017ac:	d111      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62>
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	4b8f      	ldr	r3, [pc, #572]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d06d      	beq.n	80018a0 <HAL_RCC_OscConfig+0x130>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d169      	bne.n	80018a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f000 bc21 	b.w	8002014 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x7a>
 80017dc:	4b86      	ldr	r3, [pc, #536]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a85      	ldr	r2, [pc, #532]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e02e      	b.n	8001848 <HAL_RCC_OscConfig+0xd8>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x9c>
 80017f2:	4b81      	ldr	r3, [pc, #516]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a80      	ldr	r2, [pc, #512]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80017f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b7e      	ldr	r3, [pc, #504]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7d      	ldr	r2, [pc, #500]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xd8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xc0>
 8001816:	4b78      	ldr	r3, [pc, #480]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a77      	ldr	r2, [pc, #476]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b75      	ldr	r3, [pc, #468]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a74      	ldr	r2, [pc, #464]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xd8>
 8001830:	4b71      	ldr	r3, [pc, #452]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a70      	ldr	r2, [pc, #448]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b6e      	ldr	r3, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6d      	ldr	r2, [pc, #436]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fc62 	bl	8001118 <HAL_GetTick>
 8001854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fc5e 	bl	8001118 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e3d4      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xe8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fc4e 	bl	8001118 <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fc4a 	bl	8001118 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e3c0      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001892:	4b59      	ldr	r3, [pc, #356]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x110>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80ca 	beq.w	8001a44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b0:	4b51      	ldr	r3, [pc, #324]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ba:	4b4f      	ldr	r3, [pc, #316]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_RCC_OscConfig+0x166>
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b18      	cmp	r3, #24
 80018ca:	d156      	bne.n	800197a <HAL_RCC_OscConfig+0x20a>
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d151      	bne.n	800197a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d6:	4b48      	ldr	r3, [pc, #288]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x17e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e392      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018ee:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0219 	bic.w	r2, r3, #25
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	493f      	ldr	r1, [pc, #252]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fc0a 	bl	8001118 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff fc06 	bl	8001118 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e37c      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191a:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	f7ff fc03 	bl	8001130 <HAL_GetREVID>
 800192a:	4603      	mov	r3, r0
 800192c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001930:	4293      	cmp	r3, r2
 8001932:	d817      	bhi.n	8001964 <HAL_RCC_OscConfig+0x1f4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b40      	cmp	r3, #64	@ 0x40
 800193a:	d108      	bne.n	800194e <HAL_RCC_OscConfig+0x1de>
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001944:	4a2c      	ldr	r2, [pc, #176]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194c:	e07a      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	031b      	lsls	r3, r3, #12
 800195c:	4926      	ldr	r1, [pc, #152]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001962:	e06f      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	4921      	ldr	r1, [pc, #132]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	e064      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d047      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0219 	bic.w	r2, r3, #25
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	491a      	ldr	r1, [pc, #104]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fbc0 	bl	8001118 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fbbc 	bl	8001118 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e332      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	f7ff fbb9 	bl	8001130 <HAL_GetREVID>
 80019be:	4603      	mov	r3, r0
 80019c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d819      	bhi.n	80019fc <HAL_RCC_OscConfig+0x28c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2b40      	cmp	r3, #64	@ 0x40
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_OscConfig+0x272>
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019de:	6053      	str	r3, [r2, #4]
 80019e0:	e030      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	031b      	lsls	r3, r3, #12
 80019f0:	4901      	ldr	r1, [pc, #4]	@ (80019f8 <HAL_RCC_OscConfig+0x288>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e025      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
 80019f8:	58024400 	.word	0x58024400
 80019fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4997      	ldr	r1, [pc, #604]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
 8001a10:	e018      	b.n	8001a44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b95      	ldr	r3, [pc, #596]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a94      	ldr	r2, [pc, #592]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb7b 	bl	8001118 <HAL_GetTick>
 8001a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff fb77 	bl	8001118 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e2ed      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a38:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80a9 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b85      	ldr	r3, [pc, #532]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a5c:	4b82      	ldr	r3, [pc, #520]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d007      	beq.n	8001a78 <HAL_RCC_OscConfig+0x308>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b18      	cmp	r3, #24
 8001a6c:	d13a      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x374>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d135      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a78:	4b7b      	ldr	r3, [pc, #492]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_OscConfig+0x320>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b80      	cmp	r3, #128	@ 0x80
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e2c1      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a90:	f7ff fb4e 	bl	8001130 <HAL_GetREVID>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d817      	bhi.n	8001ace <HAL_RCC_OscConfig+0x35e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x348>
 8001aa6:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001aae:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ab4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab6:	e075      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	069b      	lsls	r3, r3, #26
 8001ac6:	4968      	ldr	r1, [pc, #416]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001acc:	e06a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ace:	4b66      	ldr	r3, [pc, #408]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	4962      	ldr	r1, [pc, #392]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae2:	e05f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d042      	beq.n	8001b72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001aec:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fb0e 	bl	8001118 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b00:	f7ff fb0a 	bl	8001118 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e280      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b12:	4b55      	ldr	r3, [pc, #340]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b1e:	f7ff fb07 	bl	8001130 <HAL_GetREVID>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d817      	bhi.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d108      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3d6>
 8001b34:	4b4c      	ldr	r3, [pc, #304]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b42:	6053      	str	r3, [r2, #4]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
 8001b46:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	069b      	lsls	r3, r3, #26
 8001b54:	4944      	ldr	r1, [pc, #272]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	e023      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
 8001b5c:	4b42      	ldr	r3, [pc, #264]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	493f      	ldr	r1, [pc, #252]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e018      	b.n	8001ba4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b72:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a3c      	ldr	r2, [pc, #240]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff facb 	bl	8001118 <HAL_GetTick>
 8001b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b86:	f7ff fac7 	bl	8001118 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e23d      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b98:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d036      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff faa8 	bl	8001118 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff faa4 	bl	8001118 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e21a      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x45c>
 8001bea:	e018      	b.n	8001c1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fa8e 	bl	8001118 <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fa8a 	bl	8001118 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e200      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d039      	beq.n	8001c9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fa6b 	bl	8001118 <HAL_GetTick>
 8001c42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c46:	f7ff fa67 	bl	8001118 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1dd      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x4d6>
 8001c64:	e01b      	b.n	8001c9e <HAL_RCC_OscConfig+0x52e>
 8001c66:	bf00      	nop
 8001c68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a9a      	ldr	r2, [pc, #616]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001c72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c78:	f7ff fa4e 	bl	8001118 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c80:	f7ff fa4a 	bl	8001118 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1c0      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c92:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8081 	beq.w	8001dae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cac:	4b8c      	ldr	r3, [pc, #560]	@ (8001ee0 <HAL_RCC_OscConfig+0x770>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a8b      	ldr	r2, [pc, #556]	@ (8001ee0 <HAL_RCC_OscConfig+0x770>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cb8:	f7ff fa2e 	bl	8001118 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc0:	f7ff fa2a 	bl	8001118 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1a0      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cd2:	4b83      	ldr	r3, [pc, #524]	@ (8001ee0 <HAL_RCC_OscConfig+0x770>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x584>
 8001ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	4a7c      	ldr	r2, [pc, #496]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf2:	e02d      	b.n	8001d50 <HAL_RCC_OscConfig+0x5e0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x5a6>
 8001cfc:	4b77      	ldr	r3, [pc, #476]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	4a76      	ldr	r2, [pc, #472]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d08:	4b74      	ldr	r3, [pc, #464]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a73      	ldr	r2, [pc, #460]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d14:	e01c      	b.n	8001d50 <HAL_RCC_OscConfig+0x5e0>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c8>
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0x5e0>
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a67      	ldr	r2, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	4b65      	ldr	r3, [pc, #404]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a64      	ldr	r2, [pc, #400]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	f023 0304 	bic.w	r3, r3, #4
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff f9de 	bl	8001118 <HAL_GetTick>
 8001d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff f9da 	bl	8001118 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e14e      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d76:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCC_OscConfig+0x5f0>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f9c8 	bl	8001118 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f9c4 	bl	8001118 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e138      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001da2:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ee      	bne.n	8001d8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 812d 	beq.w	8002012 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001db8:	4b48      	ldr	r3, [pc, #288]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dc0:	2b18      	cmp	r3, #24
 8001dc2:	f000 80bd 	beq.w	8001f40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	f040 809e 	bne.w	8001f0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a41      	ldr	r2, [pc, #260]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f99c 	bl	8001118 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f998 	bl	8001118 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e10e      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df6:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <HAL_RCC_OscConfig+0x774>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	430a      	orrs	r2, r1
 8001e16:	4931      	ldr	r1, [pc, #196]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	3b01      	subs	r3, #1
 8001e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e36:	3b01      	subs	r3, #1
 8001e38:	041b      	lsls	r3, r3, #16
 8001e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e44:	3b01      	subs	r3, #1
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e4c:	4923      	ldr	r1, [pc, #140]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e56:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <HAL_RCC_OscConfig+0x778>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e6a:	00d2      	lsls	r2, r2, #3
 8001e6c:	491b      	ldr	r1, [pc, #108]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	f023 020c 	bic.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4917      	ldr	r1, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	f023 0202 	bic.w	r2, r3, #2
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	4912      	ldr	r1, [pc, #72]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e96:	4b11      	ldr	r3, [pc, #68]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001eba:	4b08      	ldr	r3, [pc, #32]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a04      	ldr	r2, [pc, #16]	@ (8001edc <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7ff f921 	bl	8001118 <HAL_GetTick>
 8001ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ed8:	e011      	b.n	8001efe <HAL_RCC_OscConfig+0x78e>
 8001eda:	bf00      	nop
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	58024800 	.word	0x58024800
 8001ee4:	fffffc0c 	.word	0xfffffc0c
 8001ee8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f914 	bl	8001118 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e08a      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001efe:	4b47      	ldr	r3, [pc, #284]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x77c>
 8001f0a:	e082      	b.n	8002012 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b43      	ldr	r3, [pc, #268]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a42      	ldr	r2, [pc, #264]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f8fe 	bl	8001118 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f8fa 	bl	8001118 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e070      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f32:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x7b0>
 8001f3e:	e068      	b.n	8002012 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f40:	4b36      	ldr	r3, [pc, #216]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f46:	4b35      	ldr	r3, [pc, #212]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d031      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0203 	and.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d12a      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d122      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d11a      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0a5b      	lsrs	r3, r3, #9
 8001f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d111      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0e1b      	lsrs	r3, r3, #24
 8001faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e02b      	b.n	8002014 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fbc:	4b17      	ldr	r3, [pc, #92]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d01f      	beq.n	8002012 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fd2:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	4a11      	ldr	r2, [pc, #68]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fde:	f7ff f89b 	bl	8001118 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001fe4:	bf00      	nop
 8001fe6:	f7ff f897 	bl	8001118 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d0f9      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8001ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_RCC_OscConfig+0x8b0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ffe:	00d2      	lsls	r2, r2, #3
 8002000:	4906      	ldr	r1, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8002002:	4313      	orrs	r3, r2
 8002004:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_RCC_OscConfig+0x8ac>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3730      	adds	r7, #48	@ 0x30
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	58024400 	.word	0x58024400
 8002020:	ffff0007 	.word	0xffff0007

08002024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e19c      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b8a      	ldr	r3, [pc, #552]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b87      	ldr	r3, [pc, #540]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 020f 	bic.w	r2, r3, #15
 800204e:	4985      	ldr	r1, [pc, #532]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b83      	ldr	r3, [pc, #524]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e184      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	4b7b      	ldr	r3, [pc, #492]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002080:	429a      	cmp	r2, r3
 8002082:	d908      	bls.n	8002096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002084:	4b78      	ldr	r3, [pc, #480]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4975      	ldr	r1, [pc, #468]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002092:	4313      	orrs	r3, r2
 8002094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	496a      	ldr	r1, [pc, #424]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d010      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	4b64      	ldr	r3, [pc, #400]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020dc:	429a      	cmp	r2, r3
 80020de:	d908      	bls.n	80020f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e0:	4b61      	ldr	r3, [pc, #388]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	495e      	ldr	r1, [pc, #376]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800210a:	429a      	cmp	r2, r3
 800210c:	d908      	bls.n	8002120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800210e:	4b56      	ldr	r3, [pc, #344]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4953      	ldr	r1, [pc, #332]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800211c:	4313      	orrs	r3, r2
 800211e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d010      	beq.n	800214e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	4b4d      	ldr	r3, [pc, #308]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	429a      	cmp	r2, r3
 800213a:	d908      	bls.n	800214e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f023 020f 	bic.w	r2, r3, #15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4947      	ldr	r1, [pc, #284]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800214a:	4313      	orrs	r3, r2
 800214c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d055      	beq.n	8002206 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800215a:	4b43      	ldr	r3, [pc, #268]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4940      	ldr	r1, [pc, #256]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002168:	4313      	orrs	r3, r2
 800216a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002174:	4b3c      	ldr	r3, [pc, #240]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d121      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0f6      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800218c:	4b36      	ldr	r3, [pc, #216]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d115      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0ea      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a4:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0de      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0d6      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f023 0207 	bic.w	r2, r3, #7
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4925      	ldr	r1, [pc, #148]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d6:	f7fe ff9f 	bl	8001118 <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021de:	f7fe ff9b 	bl	8001118 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0be      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	429a      	cmp	r2, r3
 8002204:	d1eb      	bne.n	80021de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	429a      	cmp	r2, r3
 8002220:	d208      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	490e      	ldr	r1, [pc, #56]	@ (8002268 <HAL_RCC_ClockConfig+0x244>)
 8002230:	4313      	orrs	r3, r2
 8002232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d214      	bcs.n	800226c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 020f 	bic.w	r2, r3, #15
 800224a:	4906      	ldr	r1, [pc, #24]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <HAL_RCC_ClockConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e086      	b.n	8002372 <HAL_RCC_ClockConfig+0x34e>
 8002264:	52002000 	.word	0x52002000
 8002268:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d010      	beq.n	800229a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002284:	429a      	cmp	r2, r3
 8002286:	d208      	bcs.n	800229a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002288:	4b3c      	ldr	r3, [pc, #240]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	4939      	ldr	r1, [pc, #228]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 8002296:	4313      	orrs	r3, r2
 8002298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	4b34      	ldr	r3, [pc, #208]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d208      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	492e      	ldr	r1, [pc, #184]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d208      	bcs.n	80022f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4922      	ldr	r1, [pc, #136]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d010      	beq.n	8002324 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800230e:	429a      	cmp	r2, r3
 8002310:	d208      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002312:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4917      	ldr	r1, [pc, #92]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 8002320:	4313      	orrs	r3, r2
 8002322:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002324:	f000 f834 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	4912      	ldr	r1, [pc, #72]	@ (8002380 <HAL_RCC_ClockConfig+0x35c>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002342:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_RCC_ClockConfig+0x358>)
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <HAL_RCC_ClockConfig+0x35c>)
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_RCC_ClockConfig+0x360>)
 800235a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800235c:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x364>)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_RCC_ClockConfig+0x368>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fe8c 	bl	8001084 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400
 8002380:	08007720 	.word	0x08007720
 8002384:	24000008 	.word	0x24000008
 8002388:	24000004 	.word	0x24000004
 800238c:	2400000c 	.word	0x2400000c

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002396:	4bb3      	ldr	r3, [pc, #716]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800239e:	2b18      	cmp	r3, #24
 80023a0:	f200 8155 	bhi.w	800264e <HAL_RCC_GetSysClockFreq+0x2be>
 80023a4:	a201      	add	r2, pc, #4	@ (adr r2, 80023ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	08002411 	.word	0x08002411
 80023b0:	0800264f 	.word	0x0800264f
 80023b4:	0800264f 	.word	0x0800264f
 80023b8:	0800264f 	.word	0x0800264f
 80023bc:	0800264f 	.word	0x0800264f
 80023c0:	0800264f 	.word	0x0800264f
 80023c4:	0800264f 	.word	0x0800264f
 80023c8:	0800264f 	.word	0x0800264f
 80023cc:	08002437 	.word	0x08002437
 80023d0:	0800264f 	.word	0x0800264f
 80023d4:	0800264f 	.word	0x0800264f
 80023d8:	0800264f 	.word	0x0800264f
 80023dc:	0800264f 	.word	0x0800264f
 80023e0:	0800264f 	.word	0x0800264f
 80023e4:	0800264f 	.word	0x0800264f
 80023e8:	0800264f 	.word	0x0800264f
 80023ec:	0800243d 	.word	0x0800243d
 80023f0:	0800264f 	.word	0x0800264f
 80023f4:	0800264f 	.word	0x0800264f
 80023f8:	0800264f 	.word	0x0800264f
 80023fc:	0800264f 	.word	0x0800264f
 8002400:	0800264f 	.word	0x0800264f
 8002404:	0800264f 	.word	0x0800264f
 8002408:	0800264f 	.word	0x0800264f
 800240c:	08002443 	.word	0x08002443
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002410:	4b94      	ldr	r3, [pc, #592]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800241c:	4b91      	ldr	r3, [pc, #580]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	4a90      	ldr	r2, [pc, #576]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800242e:	e111      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002430:	4b8d      	ldr	r3, [pc, #564]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002432:	61bb      	str	r3, [r7, #24]
      break;
 8002434:	e10e      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002436:	4b8d      	ldr	r3, [pc, #564]	@ (800266c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002438:	61bb      	str	r3, [r7, #24]
      break;
 800243a:	e10b      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800243c:	4b8c      	ldr	r3, [pc, #560]	@ (8002670 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800243e:	61bb      	str	r3, [r7, #24]
      break;
 8002440:	e108      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002442:	4b88      	ldr	r3, [pc, #544]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800244c:	4b85      	ldr	r3, [pc, #532]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002456:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002458:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002462:	4b80      	ldr	r3, [pc, #512]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80e1 	beq.w	8002648 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b02      	cmp	r3, #2
 800248a:	f000 8083 	beq.w	8002594 <HAL_RCC_GetSysClockFreq+0x204>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b02      	cmp	r3, #2
 8002492:	f200 80a1 	bhi.w	80025d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x114>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d056      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024a2:	e099      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d02d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024da:	4b62      	ldr	r3, [pc, #392]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800250a:	e087      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002516:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002678 <HAL_RCC_GetSysClockFreq+0x2e8>
 800251a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251e:	4b51      	ldr	r3, [pc, #324]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800252e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002532:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800254e:	e065      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800267c <HAL_RCC_GetSysClockFreq+0x2ec>
 800255e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002562:	4b40      	ldr	r3, [pc, #256]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002572:	ed97 6a02 	vldr	s12, [r7, #8]
 8002576:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002674 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800257e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002592:	e043      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002680 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025d6:	e021      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800267c <HAL_RCC_GetSysClockFreq+0x2ec>
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800261a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	0a5b      	lsrs	r3, r3, #9
 8002622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002626:	3301      	adds	r3, #1
 8002628:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002634:	edd7 6a07 	vldr	s13, [r7, #28]
 8002638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800263c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002640:	ee17 3a90 	vmov	r3, s15
 8002644:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002646:	e005      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
      break;
 800264c:	e002      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800264e:	4b07      	ldr	r3, [pc, #28]	@ (800266c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002650:	61bb      	str	r3, [r7, #24]
      break;
 8002652:	bf00      	nop
  }

  return sysclockfreq;
 8002654:	69bb      	ldr	r3, [r7, #24]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	58024400 	.word	0x58024400
 8002668:	03d09000 	.word	0x03d09000
 800266c:	003d0900 	.word	0x003d0900
 8002670:	016e3600 	.word	0x016e3600
 8002674:	46000000 	.word	0x46000000
 8002678:	4c742400 	.word	0x4c742400
 800267c:	4a742400 	.word	0x4a742400
 8002680:	4bb71b00 	.word	0x4bb71b00

08002684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800268a:	f7ff fe81 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800268e:	4602      	mov	r2, r0
 8002690:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	490f      	ldr	r1, [pc, #60]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800269c:	5ccb      	ldrb	r3, [r1, r3]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026a8:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_RCC_GetHCLKFreq+0x58>)
 80026c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026c2:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026c8:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <HAL_RCC_GetHCLKFreq+0x58>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	58024400 	.word	0x58024400
 80026d8:	08007720 	.word	0x08007720
 80026dc:	24000008 	.word	0x24000008
 80026e0:	24000004 	.word	0x24000004

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026e8:	f7ff ffcc 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4904      	ldr	r1, [pc, #16]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	58024400 	.word	0x58024400
 800270c:	08007720 	.word	0x08007720

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002714:	f7ff ffb6 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	58024400 	.word	0x58024400
 8002738:	08007720 	.word	0x08007720

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b0ca      	sub	sp, #296	@ 0x128
 8002742:	af00      	add	r7, sp, #0
 8002744:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002760:	2500      	movs	r5, #0
 8002762:	ea54 0305 	orrs.w	r3, r4, r5
 8002766:	d049      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800276c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800276e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002772:	d02f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002774:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002778:	d828      	bhi.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800277a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800277e:	d01a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002780:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002784:	d822      	bhi.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278e:	d007      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002790:	e01c      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002792:	4bb8      	ldr	r3, [pc, #736]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	4ab7      	ldr	r2, [pc, #732]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800279e:	e01a      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a4:	3308      	adds	r3, #8
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fc8f 	bl	80040cc <RCCEx_PLL2_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027b4:	e00f      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ba:	3328      	adds	r3, #40	@ 0x28
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 fd36 	bl	8004230 <RCCEx_PLL3_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ca:	e004      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027d2:	e000      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027de:	4ba5      	ldr	r3, [pc, #660]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80027e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ee:	430b      	orrs	r3, r1
 80027f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80027f2:	e003      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002808:	f04f 0900 	mov.w	r9, #0
 800280c:	ea58 0309 	orrs.w	r3, r8, r9
 8002810:	d047      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	2b04      	cmp	r3, #4
 800281a:	d82a      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800281c:	a201      	add	r2, pc, #4	@ (adr r2, 8002824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002839 	.word	0x08002839
 8002828:	08002847 	.word	0x08002847
 800282c:	0800285d 	.word	0x0800285d
 8002830:	0800287b 	.word	0x0800287b
 8002834:	0800287b 	.word	0x0800287b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002838:	4b8e      	ldr	r3, [pc, #568]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	4a8d      	ldr	r2, [pc, #564]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002844:	e01a      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800284a:	3308      	adds	r3, #8
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fc3c 	bl	80040cc <RCCEx_PLL2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800285a:	e00f      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800285c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002860:	3328      	adds	r3, #40	@ 0x28
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f001 fce3 	bl	8004230 <RCCEx_PLL3_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002870:	e004      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002878:	e000      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800287a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002884:	4b7b      	ldr	r3, [pc, #492]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002888:	f023 0107 	bic.w	r1, r3, #7
 800288c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	4a78      	ldr	r2, [pc, #480]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002894:	430b      	orrs	r3, r1
 8002896:	6513      	str	r3, [r2, #80]	@ 0x50
 8002898:	e003      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800289e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80028ae:	f04f 0b00 	mov.w	fp, #0
 80028b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80028b6:	d04c      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c2:	d030      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c8:	d829      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80028cc:	d02d      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80028d0:	d825      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028d2:	2b80      	cmp	r3, #128	@ 0x80
 80028d4:	d018      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028d6:	2b80      	cmp	r3, #128	@ 0x80
 80028d8:	d821      	bhi.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d007      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80028e2:	e01c      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e4:	4b63      	ldr	r3, [pc, #396]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	4a62      	ldr	r2, [pc, #392]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028f0:	e01c      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028f6:	3308      	adds	r3, #8
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fbe6 	bl	80040cc <RCCEx_PLL2_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002906:	e011      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800290c:	3328      	adds	r3, #40	@ 0x28
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fc8d 	bl	8004230 <RCCEx_PLL3_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800291c:	e006      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002924:	e002      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800292a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800292c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002938:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	4a4c      	ldr	r2, [pc, #304]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002944:	430b      	orrs	r3, r1
 8002946:	6513      	str	r3, [r2, #80]	@ 0x50
 8002948:	e003      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800294e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800295e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002968:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800296c:	460b      	mov	r3, r1
 800296e:	4313      	orrs	r3, r2
 8002970:	d053      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800297a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800297e:	d035      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002980:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002984:	d82e      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002986:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800298a:	d031      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800298c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002990:	d828      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002996:	d01a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299c:	d822      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80029a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029a6:	d007      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80029a8:	e01c      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029aa:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ae:	4a31      	ldr	r2, [pc, #196]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029b6:	e01c      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	3308      	adds	r3, #8
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fb83 	bl	80040cc <RCCEx_PLL2_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029cc:	e011      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d2:	3328      	adds	r3, #40	@ 0x28
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fc2a 	bl	8004230 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029e2:	e006      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002a26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002a34:	460b      	mov	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	d056      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a46:	d038      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a4c:	d831      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a52:	d034      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a58:	d82b      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a5e:	d01d      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a64:	d825      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a70:	e01f      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a78:	4ba2      	ldr	r3, [pc, #648]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 fb1c 	bl	80040cc <RCCEx_PLL2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a9a:	e011      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aa0:	3328      	adds	r3, #40	@ 0x28
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 fbc3 	bl	8004230 <RCCEx_PLL3_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab0:	e006      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ad8:	4a8a      	ldr	r2, [pc, #552]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ade:	e003      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002afe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002b02:	460b      	mov	r3, r1
 8002b04:	4313      	orrs	r3, r2
 8002b06:	d03a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	2b30      	cmp	r3, #48	@ 0x30
 8002b10:	d01f      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b12:	2b30      	cmp	r3, #48	@ 0x30
 8002b14:	d819      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d00c      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d815      	bhi.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d019      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d111      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b26:	4b77      	ldr	r3, [pc, #476]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	4a76      	ldr	r2, [pc, #472]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b32:	e011      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b38:	3308      	adds	r3, #8
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fac5 	bl	80040cc <RCCEx_PLL2_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b48:	e006      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b50:	e002      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10a      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b60:	4b68      	ldr	r3, [pc, #416]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	4a65      	ldr	r2, [pc, #404]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b70:	430b      	orrs	r3, r1
 8002b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002b94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d051      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba8:	d035      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bae:	d82e      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bb4:	d031      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bba:	d828      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bc0:	d01a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bc6:	d822      	bhi.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd0:	d007      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bd2:	e01c      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002be0:	e01c      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be6:	3308      	adds	r3, #8
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fa6e 	bl	80040cc <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bf6:	e011      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfc:	3328      	adds	r3, #40	@ 0x28
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f001 fb15 	bl	8004230 <RCCEx_PLL3_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c14:	e002      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c24:	4b37      	ldr	r3, [pc, #220]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c32:	4a34      	ldr	r2, [pc, #208]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c38:	e003      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c52:	2300      	movs	r3, #0
 8002c54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	d056      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c6c:	d033      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c72:	d82c      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c78:	d02f      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c7e:	d826      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c84:	d02b      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c8a:	d820      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c90:	d012      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c96:	d81a      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d115      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fa0e 	bl	80040cc <RCCEx_PLL2_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cb6:	e015      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cbc:	3328      	adds	r3, #40	@ 0x28
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f001 fab5 	bl	8004230 <RCCEx_PLL3_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cd4:	e006      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cd6:	bf00      	nop
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cfa:	4a02      	ldr	r2, [pc, #8]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	d055      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3c:	d033      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d42:	d82c      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d02f      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4e:	d826      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d54:	d02b      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d5a:	d820      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d60:	d012      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d66:	d81a      	bhi.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d022      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d70:	d115      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d76:	3308      	adds	r3, #8
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f9a6 	bl	80040cc <RCCEx_PLL2_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d86:	e015      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d8c:	3328      	adds	r3, #40	@ 0x28
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fa4d 	bl	8004230 <RCCEx_PLL3_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dbc:	4ba3      	ldr	r3, [pc, #652]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002dcc:	4a9f      	ldr	r2, [pc, #636]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd2:	e003      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002df6:	460b      	mov	r3, r1
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d037      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e06:	d00e      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e0c:	d816      	bhi.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d018      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e16:	d111      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e18:	4b8c      	ldr	r3, [pc, #560]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	4a8b      	ldr	r2, [pc, #556]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e24:	e00f      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f94c 	bl	80040cc <RCCEx_PLL2_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e3a:	e004      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a7b      	ldr	r2, [pc, #492]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e62:	e003      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	d039      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d81c      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e96:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ed9 	.word	0x08002ed9
 8002ea0:	08002ead 	.word	0x08002ead
 8002ea4:	08002ebb 	.word	0x08002ebb
 8002ea8:	08002ed9 	.word	0x08002ed9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eac:	4b67      	ldr	r3, [pc, #412]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	4a66      	ldr	r2, [pc, #408]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00f      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f902 	bl	80040cc <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ece:	e004      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee6:	f023 0103 	bic.w	r1, r3, #3
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef0:	4a56      	ldr	r2, [pc, #344]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ef6:	e003      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f000 809f 	beq.w	8003060 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a4a      	ldr	r2, [pc, #296]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe f8f3 	bl	8001118 <HAL_GetTick>
 8002f32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f36:	e00b      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe f8ee 	bl	8001118 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b64      	cmp	r3, #100	@ 0x64
 8002f46:	d903      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f4e:	e005      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f50:	4b3f      	ldr	r3, [pc, #252]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ed      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d179      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f64:	4b39      	ldr	r3, [pc, #228]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002f70:	4053      	eors	r3, r2
 8002f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d015      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f7a:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	4a30      	ldr	r2, [pc, #192]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f92:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	4a2d      	ldr	r2, [pc, #180]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb2:	d118      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe f8b0 	bl	8001118 <HAL_GetTick>
 8002fb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fbc:	e00d      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe f8ab 	bl	8001118 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fc8:	1ad2      	subs	r2, r2, r3
 8002fca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d903      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002fd8:	e005      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0eb      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d129      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffe:	d10e      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003010:	091a      	lsrs	r2, r3, #4
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003014:	4013      	ands	r3, r2
 8003016:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003018:	430b      	orrs	r3, r1
 800301a:	6113      	str	r3, [r2, #16]
 800301c:	e005      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	4a0a      	ldr	r2, [pc, #40]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003024:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003028:	6113      	str	r3, [r2, #16]
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800302c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800303c:	430b      	orrs	r3, r1
 800303e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003040:	e00e      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800304a:	e009      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800304c:	58024400 	.word	0x58024400
 8003050:	58024800 	.word	0x58024800
 8003054:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0301 	and.w	r3, r2, #1
 800306c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003076:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	f000 8089 	beq.w	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003088:	2b28      	cmp	r3, #40	@ 0x28
 800308a:	d86b      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	0800316d 	.word	0x0800316d
 8003098:	08003165 	.word	0x08003165
 800309c:	08003165 	.word	0x08003165
 80030a0:	08003165 	.word	0x08003165
 80030a4:	08003165 	.word	0x08003165
 80030a8:	08003165 	.word	0x08003165
 80030ac:	08003165 	.word	0x08003165
 80030b0:	08003165 	.word	0x08003165
 80030b4:	08003139 	.word	0x08003139
 80030b8:	08003165 	.word	0x08003165
 80030bc:	08003165 	.word	0x08003165
 80030c0:	08003165 	.word	0x08003165
 80030c4:	08003165 	.word	0x08003165
 80030c8:	08003165 	.word	0x08003165
 80030cc:	08003165 	.word	0x08003165
 80030d0:	08003165 	.word	0x08003165
 80030d4:	0800314f 	.word	0x0800314f
 80030d8:	08003165 	.word	0x08003165
 80030dc:	08003165 	.word	0x08003165
 80030e0:	08003165 	.word	0x08003165
 80030e4:	08003165 	.word	0x08003165
 80030e8:	08003165 	.word	0x08003165
 80030ec:	08003165 	.word	0x08003165
 80030f0:	08003165 	.word	0x08003165
 80030f4:	0800316d 	.word	0x0800316d
 80030f8:	08003165 	.word	0x08003165
 80030fc:	08003165 	.word	0x08003165
 8003100:	08003165 	.word	0x08003165
 8003104:	08003165 	.word	0x08003165
 8003108:	08003165 	.word	0x08003165
 800310c:	08003165 	.word	0x08003165
 8003110:	08003165 	.word	0x08003165
 8003114:	0800316d 	.word	0x0800316d
 8003118:	08003165 	.word	0x08003165
 800311c:	08003165 	.word	0x08003165
 8003120:	08003165 	.word	0x08003165
 8003124:	08003165 	.word	0x08003165
 8003128:	08003165 	.word	0x08003165
 800312c:	08003165 	.word	0x08003165
 8003130:	08003165 	.word	0x08003165
 8003134:	0800316d 	.word	0x0800316d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	3308      	adds	r3, #8
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f000 ffc3 	bl	80040cc <RCCEx_PLL2_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800314c:	e00f      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	3328      	adds	r3, #40	@ 0x28
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f001 f86a 	bl	8004230 <RCCEx_PLL3_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003162:	e004      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800316a:	e000      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800316c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003176:	4bbf      	ldr	r3, [pc, #764]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003184:	4abb      	ldr	r2, [pc, #748]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003186:	430b      	orrs	r3, r1
 8003188:	6553      	str	r3, [r2, #84]	@ 0x54
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f002 0302 	and.w	r3, r2, #2
 80031a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80031aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d041      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d824      	bhi.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031be:	a201      	add	r2, pc, #4	@ (adr r2, 80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	08003211 	.word	0x08003211
 80031c8:	080031dd 	.word	0x080031dd
 80031cc:	080031f3 	.word	0x080031f3
 80031d0:	08003211 	.word	0x08003211
 80031d4:	08003211 	.word	0x08003211
 80031d8:	08003211 	.word	0x08003211
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e0:	3308      	adds	r3, #8
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 ff71 	bl	80040cc <RCCEx_PLL2_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031f0:	e00f      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f6:	3328      	adds	r3, #40	@ 0x28
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 f818 	bl	8004230 <RCCEx_PLL3_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003206:	e004      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800321a:	4b96      	ldr	r3, [pc, #600]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f023 0107 	bic.w	r1, r3, #7
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003228:	4a92      	ldr	r2, [pc, #584]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800322a:	430b      	orrs	r3, r1
 800322c:	6553      	str	r3, [r2, #84]	@ 0x54
 800322e:	e003      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f002 0304 	and.w	r3, r2, #4
 8003244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800324e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003252:	460b      	mov	r3, r1
 8003254:	4313      	orrs	r3, r2
 8003256:	d044      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003260:	2b05      	cmp	r3, #5
 8003262:	d825      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032b9 	.word	0x080032b9
 8003270:	08003285 	.word	0x08003285
 8003274:	0800329b 	.word	0x0800329b
 8003278:	080032b9 	.word	0x080032b9
 800327c:	080032b9 	.word	0x080032b9
 8003280:	080032b9 	.word	0x080032b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003288:	3308      	adds	r3, #8
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 ff1d 	bl	80040cc <RCCEx_PLL2_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003298:	e00f      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	2101      	movs	r1, #1
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 ffc4 	bl	8004230 <RCCEx_PLL3_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c6:	f023 0107 	bic.w	r1, r3, #7
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d2:	4a68      	ldr	r2, [pc, #416]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	e003      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f002 0320 	and.w	r3, r2, #32
 80032ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032fc:	460b      	mov	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d055      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800330e:	d033      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003314:	d82c      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331a:	d02f      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003320:	d826      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003326:	d02b      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003328:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800332c:	d820      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800332e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003332:	d012      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003338:	d81a      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d022      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800333e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003342:	d115      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f000 febd 	bl	80040cc <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003358:	e015      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3328      	adds	r3, #40	@ 0x28
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ff64 	bl	8004230 <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003378:	bf00      	nop
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10b      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	4a35      	ldr	r2, [pc, #212]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80033a4:	e003      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80033c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4313      	orrs	r3, r2
 80033cc:	d058      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033da:	d033      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80033dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80033e0:	d82c      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ec:	d826      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033f2:	d02b      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80033f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033f8:	d820      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fe:	d012      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003404:	d81a      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d022      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340e:	d115      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	3308      	adds	r3, #8
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fe57 	bl	80040cc <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003424:	e015      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	3328      	adds	r3, #40	@ 0x28
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fefe 	bl	8004230 <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800343a:	e00a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003444:	bf00      	nop
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003448:	bf00      	nop
 800344a:	e002      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10e      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800345a:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800346a:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003470:	e006      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003472:	bf00      	nop
 8003474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003490:	2300      	movs	r3, #0
 8003492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003496:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800349a:	460b      	mov	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	d055      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034ac:	d033      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80034ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80034b2:	d82c      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b8:	d02f      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034be:	d826      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034c4:	d02b      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80034ca:	d820      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d0:	d012      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80034d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d6:	d81a      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d022      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e0:	d115      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	3308      	adds	r3, #8
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fdee 	bl	80040cc <RCCEx_PLL2_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034f6:	e015      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	3328      	adds	r3, #40	@ 0x28
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fe95 	bl	8004230 <RCCEx_PLL3_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800350c:	e00a      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003516:	bf00      	nop
 8003518:	e004      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800352c:	4ba1      	ldr	r3, [pc, #644]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003530:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800353c:	4a9d      	ldr	r2, [pc, #628]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800353e:	430b      	orrs	r3, r1
 8003540:	6593      	str	r3, [r2, #88]	@ 0x58
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f002 0308 	and.w	r3, r2, #8
 8003558:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003562:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d01e      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357e:	3328      	adds	r3, #40	@ 0x28
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fe54 	bl	8004230 <RCCEx_PLL3_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003594:	4b87      	ldr	r3, [pc, #540]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a4:	4a83      	ldr	r2, [pc, #524]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f002 0310 	and.w	r3, r2, #16
 80035b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d01e      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	3328      	adds	r3, #40	@ 0x28
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fe25 	bl	8004230 <RCCEx_PLL3_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f2:	4b70      	ldr	r3, [pc, #448]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003602:	4a6c      	ldr	r2, [pc, #432]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003604:	430b      	orrs	r3, r1
 8003606:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800361e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d03e      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003634:	d022      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800363a:	d81b      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003644:	d00b      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003646:	e015      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	3308      	adds	r3, #8
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd3b 	bl	80040cc <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800365c:	e00f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	3328      	adds	r3, #40	@ 0x28
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fde2 	bl	8004230 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003672:	e004      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367a:	e000      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800367c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003686:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003696:	4a47      	ldr	r2, [pc, #284]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003698:	430b      	orrs	r3, r1
 800369a:	6593      	str	r3, [r2, #88]	@ 0x58
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80036b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036b4:	2300      	movs	r3, #0
 80036b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d03b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036ce:	d01f      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80036d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036d4:	d818      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80036dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036e0:	d007      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80036e2:	e011      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e4:	4b33      	ldr	r3, [pc, #204]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	4a32      	ldr	r2, [pc, #200]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036f0:	e00f      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f6:	3328      	adds	r3, #40	@ 0x28
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 fd98 	bl	8004230 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003706:	e004      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800371a:	4b26      	ldr	r3, [pc, #152]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	4a22      	ldr	r2, [pc, #136]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800372c:	430b      	orrs	r3, r1
 800372e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003746:	673b      	str	r3, [r7, #112]	@ 0x70
 8003748:	2300      	movs	r3, #0
 800374a:	677b      	str	r3, [r7, #116]	@ 0x74
 800374c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d034      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003766:	e011      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b12      	ldr	r3, [pc, #72]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003774:	e00e      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	3308      	adds	r3, #8
 800377c:	2102      	movs	r1, #2
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fca4 	bl	80040cc <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800378a:	e003      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800379e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037aa:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80037b2:	bf00      	nop
 80037b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80037cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ce:	2300      	movs	r3, #0
 80037d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80037d6:	460b      	mov	r3, r1
 80037d8:	4313      	orrs	r3, r2
 80037da:	d00c      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	3328      	adds	r3, #40	@ 0x28
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fd23 	bl	8004230 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003802:	663b      	str	r3, [r7, #96]	@ 0x60
 8003804:	2300      	movs	r3, #0
 8003806:	667b      	str	r3, [r7, #100]	@ 0x64
 8003808:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800380c:	460b      	mov	r3, r1
 800380e:	4313      	orrs	r3, r2
 8003810:	d038      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800381a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800381e:	d018      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003824:	d811      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800382a:	d014      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800382c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003830:	d80b      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383a:	d106      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4bc3      	ldr	r3, [pc, #780]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	4ac2      	ldr	r2, [pc, #776]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003848:	e008      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003850:	e004      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003864:	4bb9      	ldr	r3, [pc, #740]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003868:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003874:	4ab5      	ldr	r2, [pc, #724]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003876:	430b      	orrs	r3, r1
 8003878:	6553      	str	r3, [r2, #84]	@ 0x54
 800387a:	e003      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003892:	2300      	movs	r3, #0
 8003894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003896:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038a0:	4baa      	ldr	r3, [pc, #680]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ae:	4aa7      	ldr	r2, [pc, #668]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80038c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80038c2:	2300      	movs	r3, #0
 80038c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80038c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038d0:	4b9e      	ldr	r3, [pc, #632]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038e0:	4a9a      	ldr	r2, [pc, #616]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80038f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f4:	2300      	movs	r3, #0
 80038f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003902:	4b92      	ldr	r3, [pc, #584]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003910:	4a8e      	ldr	r2, [pc, #568]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003922:	643b      	str	r3, [r7, #64]	@ 0x40
 8003924:	2300      	movs	r3, #0
 8003926:	647b      	str	r3, [r7, #68]	@ 0x44
 8003928:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003932:	4b86      	ldr	r3, [pc, #536]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4a85      	ldr	r2, [pc, #532]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003938:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800393c:	6113      	str	r3, [r2, #16]
 800393e:	4b83      	ldr	r3, [pc, #524]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003940:	6919      	ldr	r1, [r3, #16]
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800394a:	4a80      	ldr	r2, [pc, #512]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800395e:	2300      	movs	r3, #0
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003962:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003966:	460b      	mov	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800396c:	4b77      	ldr	r3, [pc, #476]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003970:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397a:	4a74      	ldr	r2, [pc, #464]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397c:	430b      	orrs	r3, r1
 800397e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800398c:	633b      	str	r3, [r7, #48]	@ 0x30
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
 8003992:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800399c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ac:	4a67      	ldr	r2, [pc, #412]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ba:	2100      	movs	r1, #0
 80039bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80039c8:	460b      	mov	r3, r1
 80039ca:	4313      	orrs	r3, r2
 80039cc:	d011      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	3308      	adds	r3, #8
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb78 	bl	80040cc <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	2100      	movs	r1, #0
 80039fc:	6239      	str	r1, [r7, #32]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d011      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	3308      	adds	r3, #8
 8003a14:	2101      	movs	r1, #1
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb58 	bl	80040cc <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	61b9      	str	r1, [r7, #24]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	d011      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	3308      	adds	r3, #8
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb38 	bl	80040cc <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	6139      	str	r1, [r7, #16]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d011      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	3328      	adds	r3, #40	@ 0x28
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fbca 	bl	8004230 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	2100      	movs	r1, #0
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d011      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	3328      	adds	r3, #40	@ 0x28
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fbaa 	bl	8004230 <RCCEx_PLL3_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	2100      	movs	r1, #0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b12:	3328      	adds	r3, #40	@ 0x28
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fb8a 	bl	8004230 <RCCEx_PLL3_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003b32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4c:	58024400 	.word	0x58024400

08003b50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b54:	f7fe fd96 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4904      	ldr	r1, [pc, #16]	@ (8003b78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	58024400 	.word	0x58024400
 8003b78:	08007720 	.word	0x08007720

08003b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	@ 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b84:	4ba1      	ldr	r3, [pc, #644]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b8e:	4b9f      	ldr	r3, [pc, #636]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	0b1b      	lsrs	r3, r3, #12
 8003b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ba6:	4b99      	ldr	r3, [pc, #612]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8111 	beq.w	8003dec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f000 8083 	beq.w	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d056      	beq.n	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003be6:	e099      	b.n	8003d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be8:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02d      	beq.n	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bf4:	4b85      	ldr	r3, [pc, #532]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	4a84      	ldr	r2, [pc, #528]	@ (8003e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c4e:	e087      	b.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b6a      	ldr	r3, [pc, #424]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c92:	e065      	b.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b59      	ldr	r3, [pc, #356]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd6:	e043      	b.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b48      	ldr	r3, [pc, #288]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1a:	e021      	b.n	8003d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2e:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d60:	4b2a      	ldr	r3, [pc, #168]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d86:	ee17 2a90 	vmov	r2, s15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db4:	ee17 2a90 	vmov	r2, s15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de2:	ee17 2a90 	vmov	r2, s15
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003dea:	e008      	b.n	8003dfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	3724      	adds	r7, #36	@ 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	03d09000 	.word	0x03d09000
 8003e14:	46000000 	.word	0x46000000
 8003e18:	4c742400 	.word	0x4c742400
 8003e1c:	4a742400 	.word	0x4a742400
 8003e20:	4bb71b00 	.word	0x4bb71b00

08003e24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	@ 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e2c:	4ba1      	ldr	r3, [pc, #644]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e36:	4b9f      	ldr	r3, [pc, #636]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	0d1b      	lsrs	r3, r3, #20
 8003e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e42:	4b9c      	ldr	r3, [pc, #624]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e4e:	4b99      	ldr	r3, [pc, #612]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	08db      	lsrs	r3, r3, #3
 8003e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8111 	beq.w	8004094 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f000 8083 	beq.w	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	f200 80a1 	bhi.w	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d056      	beq.n	8003f3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e8e:	e099      	b.n	8003fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e90:	4b88      	ldr	r3, [pc, #544]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e9c:	4b85      	ldr	r3, [pc, #532]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	4a84      	ldr	r2, [pc, #528]	@ (80040b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ef6:	e087      	b.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3a:	e065      	b.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b59      	ldr	r3, [pc, #356]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7e:	e043      	b.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b48      	ldr	r3, [pc, #288]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fa6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fc2:	e021      	b.n	8004008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b37      	ldr	r3, [pc, #220]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004006:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004008:	4b2a      	ldr	r3, [pc, #168]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	0a5b      	lsrs	r3, r3, #9
 800400e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800401e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004022:	edd7 6a07 	vldr	s13, [r7, #28]
 8004026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800402e:	ee17 2a90 	vmov	r2, s15
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	0c1b      	lsrs	r3, r3, #16
 800403c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800404c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004050:	edd7 6a07 	vldr	s13, [r7, #28]
 8004054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405c:	ee17 2a90 	vmov	r2, s15
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004064:	4b13      	ldr	r3, [pc, #76]	@ (80040b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800407a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800407e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408a:	ee17 2a90 	vmov	r2, s15
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
}
 80040a6:	bf00      	nop
 80040a8:	3724      	adds	r7, #36	@ 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
 80040b8:	03d09000 	.word	0x03d09000
 80040bc:	46000000 	.word	0x46000000
 80040c0:	4c742400 	.word	0x4c742400
 80040c4:	4a742400 	.word	0x4a742400
 80040c8:	4bb71b00 	.word	0x4bb71b00

080040cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040da:	4b53      	ldr	r3, [pc, #332]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80040dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d101      	bne.n	80040ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e099      	b.n	800421e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80040f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fd f80f 	bl	8001118 <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040fe:	f7fd f80b 	bl	8001118 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e086      	b.n	800421e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004110:	4b45      	ldr	r3, [pc, #276]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800411c:	4b42      	ldr	r3, [pc, #264]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	031b      	lsls	r3, r3, #12
 800412a:	493f      	ldr	r1, [pc, #252]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	3b01      	subs	r3, #1
 8004136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	b29b      	uxth	r3, r3
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	3b01      	subs	r3, #1
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	3b01      	subs	r3, #1
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004160:	4931      	ldr	r1, [pc, #196]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004166:	4b30      	ldr	r3, [pc, #192]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	492d      	ldr	r1, [pc, #180]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004178:	4b2b      	ldr	r3, [pc, #172]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	f023 0220 	bic.w	r2, r3, #32
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4928      	ldr	r1, [pc, #160]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800418a:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419a:	4b24      	ldr	r3, [pc, #144]	@ (800422c <RCCEx_PLL2_Config+0x160>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	69d2      	ldr	r2, [r2, #28]
 80041a2:	00d2      	lsls	r2, r2, #3
 80041a4:	4920      	ldr	r1, [pc, #128]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041c8:	e00f      	b.n	80041ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d106      	bne.n	80041de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041d0:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	4a14      	ldr	r2, [pc, #80]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041dc:	e005      	b.n	80041ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041de:	4b12      	ldr	r3, [pc, #72]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 80041f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f6:	f7fc ff8f 	bl	8001118 <HAL_GetTick>
 80041fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041fc:	e008      	b.n	8004210 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041fe:	f7fc ff8b 	bl	8001118 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <RCCEx_PLL2_Config+0x15c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	58024400 	.word	0x58024400
 800422c:	ffff0007 	.word	0xffff0007

08004230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800423e:	4b53      	ldr	r3, [pc, #332]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b03      	cmp	r3, #3
 8004248:	d101      	bne.n	800424e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e099      	b.n	8004382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800424e:	4b4f      	ldr	r3, [pc, #316]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a4e      	ldr	r2, [pc, #312]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425a:	f7fc ff5d 	bl	8001118 <HAL_GetTick>
 800425e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004260:	e008      	b.n	8004274 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004262:	f7fc ff59 	bl	8001118 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e086      	b.n	8004382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004274:	4b45      	ldr	r3, [pc, #276]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004280:	4b42      	ldr	r3, [pc, #264]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	493f      	ldr	r1, [pc, #252]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	628b      	str	r3, [r1, #40]	@ 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	3b01      	subs	r3, #1
 800429a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	025b      	lsls	r3, r3, #9
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	3b01      	subs	r3, #1
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042c4:	4931      	ldr	r1, [pc, #196]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042ca:	4b30      	ldr	r3, [pc, #192]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	492d      	ldr	r1, [pc, #180]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042dc:	4b2b      	ldr	r3, [pc, #172]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4928      	ldr	r1, [pc, #160]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042ee:	4b27      	ldr	r3, [pc, #156]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	4a26      	ldr	r2, [pc, #152]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042fe:	4b24      	ldr	r3, [pc, #144]	@ (8004390 <RCCEx_PLL3_Config+0x160>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	69d2      	ldr	r2, [r2, #28]
 8004306:	00d2      	lsls	r2, r2, #3
 8004308:	4920      	ldr	r1, [pc, #128]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800430e:	4b1f      	ldr	r3, [pc, #124]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004326:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800432c:	e00f      	b.n	800434e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004334:	4b15      	ldr	r3, [pc, #84]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 800433a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800433e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004340:	e005      	b.n	800434e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	4a11      	ldr	r2, [pc, #68]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004348:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800434c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800434e:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a0e      	ldr	r2, [pc, #56]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435a:	f7fc fedd 	bl	8001118 <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004360:	e008      	b.n	8004374 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004362:	f7fc fed9 	bl	8001118 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e006      	b.n	8004382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <RCCEx_PLL3_Config+0x15c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	ffff0007 	.word	0xffff0007

08004394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e049      	b.n	800443a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fc fc6e 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 fd5a 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e054      	b.n	8004506 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a26      	ldr	r2, [pc, #152]	@ (8004514 <HAL_TIM_Base_Start_IT+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004486:	d01d      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	@ (8004518 <HAL_TIM_Base_Start_IT+0xd4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_TIM_Base_Start_IT+0xd8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <HAL_TIM_Base_Start_IT+0xdc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_TIM_Base_Start_IT+0xe0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004528 <HAL_TIM_Base_Start_IT+0xe4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_TIM_Base_Start_IT+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d115      	bne.n	80044f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_TIM_Base_Start_IT+0xec>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d015      	beq.n	8004502 <HAL_TIM_Base_Start_IT+0xbe>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044dc:	d011      	beq.n	8004502 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	e008      	b.n	8004502 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e000      	b.n	8004504 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	40010400 	.word	0x40010400
 8004528:	40001800 	.word	0x40001800
 800452c:	40014000 	.word	0x40014000
 8004530:	00010007 	.word	0x00010007

08004534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e049      	b.n	80045da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f841 	bl	80045e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fc8a 	bl	8004e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_TIM_PWM_Start+0x24>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e03c      	b.n	8004696 <HAL_TIM_PWM_Start+0x9e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d109      	bne.n	8004636 <HAL_TIM_PWM_Start+0x3e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e02f      	b.n	8004696 <HAL_TIM_PWM_Start+0x9e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x58>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e022      	b.n	8004696 <HAL_TIM_PWM_Start+0x9e>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d109      	bne.n	800466a <HAL_TIM_PWM_Start+0x72>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	e015      	b.n	8004696 <HAL_TIM_PWM_Start+0x9e>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b10      	cmp	r3, #16
 800466e:	d109      	bne.n	8004684 <HAL_TIM_PWM_Start+0x8c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e008      	b.n	8004696 <HAL_TIM_PWM_Start+0x9e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b01      	cmp	r3, #1
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0a1      	b.n	80047e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xb6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ac:	e023      	b.n	80046f6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xc6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	e01b      	b.n	80046f6 <HAL_TIM_PWM_Start+0xfe>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0xd6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046cc:	e013      	b.n	80046f6 <HAL_TIM_PWM_Start+0xfe>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b0c      	cmp	r3, #12
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0xe6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046dc:	e00b      	b.n	80046f6 <HAL_TIM_PWM_Start+0xfe>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xf6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ec:	e003      	b.n	80046f6 <HAL_TIM_PWM_Start+0xfe>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ffde 	bl	80056c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a38      	ldr	r2, [pc, #224]	@ (80047ec <HAL_TIM_PWM_Start+0x1f4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIM_PWM_Start+0x13e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a37      	ldr	r2, [pc, #220]	@ (80047f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIM_PWM_Start+0x13e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a35      	ldr	r2, [pc, #212]	@ (80047f4 <HAL_TIM_PWM_Start+0x1fc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIM_PWM_Start+0x13e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a34      	ldr	r2, [pc, #208]	@ (80047f8 <HAL_TIM_PWM_Start+0x200>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIM_PWM_Start+0x13e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <HAL_TIM_PWM_Start+0x204>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_TIM_PWM_Start+0x142>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_TIM_PWM_Start+0x144>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a25      	ldr	r2, [pc, #148]	@ (80047ec <HAL_TIM_PWM_Start+0x1f4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004762:	d01d      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <HAL_TIM_PWM_Start+0x208>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <HAL_TIM_PWM_Start+0x20c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_TIM_PWM_Start+0x210>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_TIM_PWM_Start+0x214>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1a8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a16      	ldr	r2, [pc, #88]	@ (80047f4 <HAL_TIM_PWM_Start+0x1fc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d115      	bne.n	80047cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_TIM_PWM_Start+0x218>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d015      	beq.n	80047de <HAL_TIM_PWM_Start+0x1e6>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b8:	d011      	beq.n	80047de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	e008      	b.n	80047de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e000      	b.n	80047e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40001800 	.word	0x40001800
 8004810:	00010007 	.word	0x00010007

08004814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0202 	mvn.w	r2, #2
 8004848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 faf6 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fae8 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 faf9 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0204 	mvn.w	r2, #4
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fad0 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fac2 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fad3 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0208 	mvn.w	r2, #8
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 faaa 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa9c 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 faad 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d020      	beq.n	800495c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa84 	bl	8004e50 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa76 	bl	8004e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa87 	bl	8004e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0201 	mvn.w	r2, #1
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc f860 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 ffc5 	bl	8005938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 ffbd 	bl	800594c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fa41 	bl	8004e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0220 	mvn.w	r2, #32
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 ff85 	bl	8005924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0ff      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b14      	cmp	r3, #20
 8004a4e:	f200 80f0 	bhi.w	8004c32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a52:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004aad 	.word	0x08004aad
 8004a5c:	08004c33 	.word	0x08004c33
 8004a60:	08004c33 	.word	0x08004c33
 8004a64:	08004c33 	.word	0x08004c33
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08004c33 	.word	0x08004c33
 8004a70:	08004c33 	.word	0x08004c33
 8004a74:	08004c33 	.word	0x08004c33
 8004a78:	08004b2f 	.word	0x08004b2f
 8004a7c:	08004c33 	.word	0x08004c33
 8004a80:	08004c33 	.word	0x08004c33
 8004a84:	08004c33 	.word	0x08004c33
 8004a88:	08004b6f 	.word	0x08004b6f
 8004a8c:	08004c33 	.word	0x08004c33
 8004a90:	08004c33 	.word	0x08004c33
 8004a94:	08004c33 	.word	0x08004c33
 8004a98:	08004bb1 	.word	0x08004bb1
 8004a9c:	08004c33 	.word	0x08004c33
 8004aa0:	08004c33 	.word	0x08004c33
 8004aa4:	08004c33 	.word	0x08004c33
 8004aa8:	08004bf1 	.word	0x08004bf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fa90 	bl	8004fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0208 	orr.w	r2, r2, #8
 8004ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
      break;
 8004aea:	e0a5      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fb00 	bl	80050f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6999      	ldr	r1, [r3, #24]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	619a      	str	r2, [r3, #24]
      break;
 8004b2c:	e084      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fb69 	bl	800520c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0208 	orr.w	r2, r2, #8
 8004b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0204 	bic.w	r2, r2, #4
 8004b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	61da      	str	r2, [r3, #28]
      break;
 8004b6c:	e064      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fbd1 	bl	800531c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69d9      	ldr	r1, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	021a      	lsls	r2, r3, #8
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	61da      	str	r2, [r3, #28]
      break;
 8004bae:	e043      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fc1a 	bl	80053f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0208 	orr.w	r2, r2, #8
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0204 	bic.w	r2, r2, #4
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bee:	e023      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fc5e 	bl	80054b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004c30:	e002      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	75fb      	strb	r3, [r7, #23]
      break;
 8004c36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop

08004c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0x1c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e0dc      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x1d6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4b6a      	ldr	r3, [pc, #424]	@ (8004e2c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a64      	ldr	r2, [pc, #400]	@ (8004e30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f000 80a9 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ca4:	4a62      	ldr	r2, [pc, #392]	@ (8004e30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f200 80ae 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cac:	4a61      	ldr	r2, [pc, #388]	@ (8004e34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f000 80a1 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8004e34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f200 80a6 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8004e38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	f000 8099 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004cc4:	4a5c      	ldr	r2, [pc, #368]	@ (8004e38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f200 809e 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ccc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004cd0:	f000 8091 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004cd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004cd8:	f200 8096 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce0:	f000 8089 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ce4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce8:	f200 808e 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf0:	d03e      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0x124>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	f200 8087 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfe:	f000 8086 	beq.w	8004e0e <HAL_TIM_ConfigClockSource+0x1c2>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d87f      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d08:	2b70      	cmp	r3, #112	@ 0x70
 8004d0a:	d01a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0xf6>
 8004d0c:	2b70      	cmp	r3, #112	@ 0x70
 8004d0e:	d87b      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d10:	2b60      	cmp	r3, #96	@ 0x60
 8004d12:	d050      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x16a>
 8004d14:	2b60      	cmp	r3, #96	@ 0x60
 8004d16:	d877      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d18:	2b50      	cmp	r3, #80	@ 0x50
 8004d1a:	d03c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0x14a>
 8004d1c:	2b50      	cmp	r3, #80	@ 0x50
 8004d1e:	d873      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d058      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x18a>
 8004d24:	2b40      	cmp	r3, #64	@ 0x40
 8004d26:	d86f      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d28:	2b30      	cmp	r3, #48	@ 0x30
 8004d2a:	d064      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d2c:	2b30      	cmp	r3, #48	@ 0x30
 8004d2e:	d86b      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d060      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d867      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05c      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d05a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d40:	e062      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	f000 fc95 	bl	8005680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	609a      	str	r2, [r3, #8]
      break;
 8004d6e:	e04f      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d80:	f000 fc7e 	bl	8005680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d92:	609a      	str	r2, [r3, #8]
      break;
 8004d94:	e03c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 fbee 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2150      	movs	r1, #80	@ 0x50
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fc48 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004db4:	e02c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 fc0d 	bl	80055e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2160      	movs	r1, #96	@ 0x60
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fc38 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e01c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	461a      	mov	r2, r3
 8004de4:	f000 fbce 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2140      	movs	r1, #64	@ 0x40
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fc28 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004df4:	e00c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 fc1f 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004e06:	e003      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	ffceff88 	.word	0xffceff88
 8004e30:	00100040 	.word	0x00100040
 8004e34:	00100030 	.word	0x00100030
 8004e38:	00100020 	.word	0x00100020

08004e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a46      	ldr	r2, [pc, #280]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a43      	ldr	r2, [pc, #268]	@ (8004fbc <TIM_Base_SetConfig+0x130>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a42      	ldr	r2, [pc, #264]	@ (8004fc0 <TIM_Base_SetConfig+0x134>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a41      	ldr	r2, [pc, #260]	@ (8004fc4 <TIM_Base_SetConfig+0x138>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a40      	ldr	r2, [pc, #256]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01f      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eec:	d01b      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	@ (8004fbc <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d017      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	@ (8004fc0 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a30      	ldr	r2, [pc, #192]	@ (8004fc4 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00f      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2e      	ldr	r2, [pc, #184]	@ (8004fcc <TIM_Base_SetConfig+0x140>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd0 <TIM_Base_SetConfig+0x144>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd4 <TIM_Base_SetConfig+0x148>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <TIM_Base_SetConfig+0x12c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <TIM_Base_SetConfig+0x13c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	@ (8004fcc <TIM_Base_SetConfig+0x140>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <TIM_Base_SetConfig+0x144>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0xf8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_Base_SetConfig+0x148>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]
  }
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40010400 	.word	0x40010400
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400
 8004fd4:	40014800 	.word	0x40014800

08004fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f023 0201 	bic.w	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <TIM_OC1_SetConfig+0x108>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 0302 	bic.w	r3, r3, #2
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2d      	ldr	r2, [pc, #180]	@ (80050e4 <TIM_OC1_SetConfig+0x10c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00f      	beq.n	8005054 <TIM_OC1_SetConfig+0x7c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a2c      	ldr	r2, [pc, #176]	@ (80050e8 <TIM_OC1_SetConfig+0x110>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_OC1_SetConfig+0x7c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2b      	ldr	r2, [pc, #172]	@ (80050ec <TIM_OC1_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC1_SetConfig+0x7c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a2a      	ldr	r2, [pc, #168]	@ (80050f0 <TIM_OC1_SetConfig+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC1_SetConfig+0x7c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a29      	ldr	r2, [pc, #164]	@ (80050f4 <TIM_OC1_SetConfig+0x11c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10c      	bne.n	800506e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 0308 	bic.w	r3, r3, #8
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <TIM_OC1_SetConfig+0x10c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_OC1_SetConfig+0xbe>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <TIM_OC1_SetConfig+0x110>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_OC1_SetConfig+0xbe>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1a      	ldr	r2, [pc, #104]	@ (80050ec <TIM_OC1_SetConfig+0x114>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_OC1_SetConfig+0xbe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a19      	ldr	r2, [pc, #100]	@ (80050f0 <TIM_OC1_SetConfig+0x118>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC1_SetConfig+0xbe>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a18      	ldr	r2, [pc, #96]	@ (80050f4 <TIM_OC1_SetConfig+0x11c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d111      	bne.n	80050ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	fffeff8f 	.word	0xfffeff8f
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40010400 	.word	0x40010400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800

080050f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f023 0210 	bic.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4b34      	ldr	r3, [pc, #208]	@ (80051f4 <TIM_OC2_SetConfig+0xfc>)
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0320 	bic.w	r3, r3, #32
 8005142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <TIM_OC2_SetConfig+0x100>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC2_SetConfig+0x68>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <TIM_OC2_SetConfig+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10d      	bne.n	800517c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800517a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1e      	ldr	r2, [pc, #120]	@ (80051f8 <TIM_OC2_SetConfig+0x100>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00f      	beq.n	80051a4 <TIM_OC2_SetConfig+0xac>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <TIM_OC2_SetConfig+0x104>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00b      	beq.n	80051a4 <TIM_OC2_SetConfig+0xac>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <TIM_OC2_SetConfig+0x108>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <TIM_OC2_SetConfig+0xac>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <TIM_OC2_SetConfig+0x10c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC2_SetConfig+0xac>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <TIM_OC2_SetConfig+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d113      	bne.n	80051cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	feff8fff 	.word	0xfeff8fff
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4b33      	ldr	r3, [pc, #204]	@ (8005304 <TIM_OC3_SetConfig+0xf8>)
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	@ (8005308 <TIM_OC3_SetConfig+0xfc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0x66>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	@ (800530c <TIM_OC3_SetConfig+0x100>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800528c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <TIM_OC3_SetConfig+0xfc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00f      	beq.n	80052b6 <TIM_OC3_SetConfig+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <TIM_OC3_SetConfig+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_OC3_SetConfig+0xaa>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <TIM_OC3_SetConfig+0x104>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d007      	beq.n	80052b6 <TIM_OC3_SetConfig+0xaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <TIM_OC3_SetConfig+0x108>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_OC3_SetConfig+0xaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <TIM_OC3_SetConfig+0x10c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d113      	bne.n	80052de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	fffeff8f 	.word	0xfffeff8f
 8005308:	40010000 	.word	0x40010000
 800530c:	40010400 	.word	0x40010400
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <TIM_OC4_SetConfig+0xbc>)
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a19      	ldr	r2, [pc, #100]	@ (80053dc <TIM_OC4_SetConfig+0xc0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <TIM_OC4_SetConfig+0xc4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <TIM_OC4_SetConfig+0xc8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_OC4_SetConfig+0xcc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC4_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_OC4_SetConfig+0xd0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	feff8fff 	.word	0xfeff8fff
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <TIM_OC5_SetConfig+0xb0>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005430:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	041b      	lsls	r3, r3, #16
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <TIM_OC5_SetConfig+0xb4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00f      	beq.n	8005466 <TIM_OC5_SetConfig+0x76>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <TIM_OC5_SetConfig+0xb8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_OC5_SetConfig+0x76>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <TIM_OC5_SetConfig+0xbc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_OC5_SetConfig+0x76>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <TIM_OC5_SetConfig+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC5_SetConfig+0x76>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a14      	ldr	r2, [pc, #80]	@ (80054b4 <TIM_OC5_SetConfig+0xc4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d109      	bne.n	800547a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	fffeff8f 	.word	0xfffeff8f
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010400 	.word	0x40010400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800

080054b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4b22      	ldr	r3, [pc, #136]	@ (800556c <TIM_OC6_SetConfig+0xb4>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	051b      	lsls	r3, r3, #20
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a19      	ldr	r2, [pc, #100]	@ (8005570 <TIM_OC6_SetConfig+0xb8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_OC6_SetConfig+0x78>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <TIM_OC6_SetConfig+0xbc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_OC6_SetConfig+0x78>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <TIM_OC6_SetConfig+0xc0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_OC6_SetConfig+0x78>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a16      	ldr	r2, [pc, #88]	@ (800557c <TIM_OC6_SetConfig+0xc4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC6_SetConfig+0x78>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a15      	ldr	r2, [pc, #84]	@ (8005580 <TIM_OC6_SetConfig+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	029b      	lsls	r3, r3, #10
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	feff8fff 	.word	0xfeff8fff
 8005570:	40010000 	.word	0x40010000
 8005574:	40010400 	.word	0x40010400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0210 	bic.w	r2, r3, #16
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800561e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <TIM_ITRx_SetConfig+0x38>)
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	f043 0307 	orr.w	r3, r3, #7
 8005666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	ffcfff8f 	.word	0xffcfff8f

08005680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800569a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e06d      	b.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2f      	ldr	r2, [pc, #188]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800575e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005770:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a20      	ldr	r2, [pc, #128]	@ (800580c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005796:	d01d      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	@ (800581c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a15      	ldr	r2, [pc, #84]	@ (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10c      	bne.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40010000 	.word	0x40010000
 8005810:	40010400 	.word	0x40010400
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40001800 	.word	0x40001800
 8005824:	40014000 	.word	0x40014000

08005828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005840:	2302      	movs	r3, #2
 8005842:	e065      	b.n	8005910 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a16      	ldr	r2, [pc, #88]	@ (800591c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a14      	ldr	r2, [pc, #80]	@ (8005920 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d115      	bne.n	80058fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	051b      	lsls	r3, r3, #20
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400

08005924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e042      	b.n	80059f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb f9ed 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2224      	movs	r2, #36	@ 0x24
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fd90 	bl	80064d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f825 	bl	8005a00 <UART_SetConfig>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e01b      	b.n	80059f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fe0f 	bl	8006614 <UART_CheckIdleState>
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a04:	b092      	sub	sp, #72	@ 0x48
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4bbe      	ldr	r3, [pc, #760]	@ (8005d28 <UART_SetConfig+0x328>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4ab3      	ldr	r2, [pc, #716]	@ (8005d2c <UART_SetConfig+0x32c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	4baf      	ldr	r3, [pc, #700]	@ (8005d30 <UART_SetConfig+0x330>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f023 010f 	bic.w	r1, r3, #15
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4aa6      	ldr	r2, [pc, #664]	@ (8005d34 <UART_SetConfig+0x334>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d177      	bne.n	8005b90 <UART_SetConfig+0x190>
 8005aa0:	4ba5      	ldr	r3, [pc, #660]	@ (8005d38 <UART_SetConfig+0x338>)
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005aa8:	2b28      	cmp	r3, #40	@ 0x28
 8005aaa:	d86d      	bhi.n	8005b88 <UART_SetConfig+0x188>
 8005aac:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <UART_SetConfig+0xb4>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005b59 	.word	0x08005b59
 8005ab8:	08005b89 	.word	0x08005b89
 8005abc:	08005b89 	.word	0x08005b89
 8005ac0:	08005b89 	.word	0x08005b89
 8005ac4:	08005b89 	.word	0x08005b89
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005b89 	.word	0x08005b89
 8005ad0:	08005b89 	.word	0x08005b89
 8005ad4:	08005b61 	.word	0x08005b61
 8005ad8:	08005b89 	.word	0x08005b89
 8005adc:	08005b89 	.word	0x08005b89
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b89 	.word	0x08005b89
 8005af0:	08005b89 	.word	0x08005b89
 8005af4:	08005b69 	.word	0x08005b69
 8005af8:	08005b89 	.word	0x08005b89
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005b89 	.word	0x08005b89
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005b89 	.word	0x08005b89
 8005b0c:	08005b89 	.word	0x08005b89
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b89 	.word	0x08005b89
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b89 	.word	0x08005b89
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b89 	.word	0x08005b89
 8005b50:	08005b89 	.word	0x08005b89
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e222      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e21e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e21a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e216      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e212      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b80:	2340      	movs	r3, #64	@ 0x40
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e20e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e20a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a69      	ldr	r2, [pc, #420]	@ (8005d3c <UART_SetConfig+0x33c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d130      	bne.n	8005bfc <UART_SetConfig+0x1fc>
 8005b9a:	4b67      	ldr	r3, [pc, #412]	@ (8005d38 <UART_SetConfig+0x338>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d826      	bhi.n	8005bf4 <UART_SetConfig+0x1f4>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0x1ac>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005bd5 	.word	0x08005bd5
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bed 	.word	0x08005bed
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e1ec      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e1e8      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e1e4      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e1e0      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005be4:	2320      	movs	r3, #32
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e1dc      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bec:	2340      	movs	r3, #64	@ 0x40
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e1d8      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e1d4      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a4f      	ldr	r2, [pc, #316]	@ (8005d40 <UART_SetConfig+0x340>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d130      	bne.n	8005c68 <UART_SetConfig+0x268>
 8005c06:	4b4c      	ldr	r3, [pc, #304]	@ (8005d38 <UART_SetConfig+0x338>)
 8005c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d826      	bhi.n	8005c60 <UART_SetConfig+0x260>
 8005c12:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <UART_SetConfig+0x218>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c31 	.word	0x08005c31
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	2300      	movs	r3, #0
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e1b6      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e1b2      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c40:	2308      	movs	r3, #8
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e1ae      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e1aa      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c50:	2320      	movs	r3, #32
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e1a6      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c58:	2340      	movs	r3, #64	@ 0x40
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e1a2      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c60:	2380      	movs	r3, #128	@ 0x80
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e19e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a35      	ldr	r2, [pc, #212]	@ (8005d44 <UART_SetConfig+0x344>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d130      	bne.n	8005cd4 <UART_SetConfig+0x2d4>
 8005c72:	4b31      	ldr	r3, [pc, #196]	@ (8005d38 <UART_SetConfig+0x338>)
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d826      	bhi.n	8005ccc <UART_SetConfig+0x2cc>
 8005c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <UART_SetConfig+0x284>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005c9d 	.word	0x08005c9d
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005cad 	.word	0x08005cad
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cbd 	.word	0x08005cbd
 8005c98:	08005cc5 	.word	0x08005cc5
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e180      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e17c      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005cac:	2308      	movs	r3, #8
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e178      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e174      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e170      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005cc4:	2340      	movs	r3, #64	@ 0x40
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e16c      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e168      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <UART_SetConfig+0x348>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d142      	bne.n	8005d64 <UART_SetConfig+0x364>
 8005cde:	4b16      	ldr	r3, [pc, #88]	@ (8005d38 <UART_SetConfig+0x338>)
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d838      	bhi.n	8005d5c <UART_SetConfig+0x35c>
 8005cea:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <UART_SetConfig+0x2f0>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d55 	.word	0x08005d55
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e14a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e146      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e142      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e13e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d28:	cfff69f3 	.word	0xcfff69f3
 8005d2c:	58000c00 	.word	0x58000c00
 8005d30:	11fff4ff 	.word	0x11fff4ff
 8005d34:	40011000 	.word	0x40011000
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	40004400 	.word	0x40004400
 8005d40:	40004800 	.word	0x40004800
 8005d44:	40004c00 	.word	0x40004c00
 8005d48:	40005000 	.word	0x40005000
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e128      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e124      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d5c:	2380      	movs	r3, #128	@ 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e120      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4acb      	ldr	r2, [pc, #812]	@ (8006098 <UART_SetConfig+0x698>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d176      	bne.n	8005e5c <UART_SetConfig+0x45c>
 8005d6e:	4bcb      	ldr	r3, [pc, #812]	@ (800609c <UART_SetConfig+0x69c>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d76:	2b28      	cmp	r3, #40	@ 0x28
 8005d78:	d86c      	bhi.n	8005e54 <UART_SetConfig+0x454>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x380>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e25 	.word	0x08005e25
 8005d84:	08005e55 	.word	0x08005e55
 8005d88:	08005e55 	.word	0x08005e55
 8005d8c:	08005e55 	.word	0x08005e55
 8005d90:	08005e55 	.word	0x08005e55
 8005d94:	08005e55 	.word	0x08005e55
 8005d98:	08005e55 	.word	0x08005e55
 8005d9c:	08005e55 	.word	0x08005e55
 8005da0:	08005e2d 	.word	0x08005e2d
 8005da4:	08005e55 	.word	0x08005e55
 8005da8:	08005e55 	.word	0x08005e55
 8005dac:	08005e55 	.word	0x08005e55
 8005db0:	08005e55 	.word	0x08005e55
 8005db4:	08005e55 	.word	0x08005e55
 8005db8:	08005e55 	.word	0x08005e55
 8005dbc:	08005e55 	.word	0x08005e55
 8005dc0:	08005e35 	.word	0x08005e35
 8005dc4:	08005e55 	.word	0x08005e55
 8005dc8:	08005e55 	.word	0x08005e55
 8005dcc:	08005e55 	.word	0x08005e55
 8005dd0:	08005e55 	.word	0x08005e55
 8005dd4:	08005e55 	.word	0x08005e55
 8005dd8:	08005e55 	.word	0x08005e55
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e3d 	.word	0x08005e3d
 8005de4:	08005e55 	.word	0x08005e55
 8005de8:	08005e55 	.word	0x08005e55
 8005dec:	08005e55 	.word	0x08005e55
 8005df0:	08005e55 	.word	0x08005e55
 8005df4:	08005e55 	.word	0x08005e55
 8005df8:	08005e55 	.word	0x08005e55
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e45 	.word	0x08005e45
 8005e04:	08005e55 	.word	0x08005e55
 8005e08:	08005e55 	.word	0x08005e55
 8005e0c:	08005e55 	.word	0x08005e55
 8005e10:	08005e55 	.word	0x08005e55
 8005e14:	08005e55 	.word	0x08005e55
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e55 	.word	0x08005e55
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e0bc      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e0b8      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e0b4      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e0b0      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e44:	2320      	movs	r3, #32
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e0ac      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e4c:	2340      	movs	r3, #64	@ 0x40
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e0a8      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e0a4      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a8f      	ldr	r2, [pc, #572]	@ (80060a0 <UART_SetConfig+0x6a0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d130      	bne.n	8005ec8 <UART_SetConfig+0x4c8>
 8005e66:	4b8d      	ldr	r3, [pc, #564]	@ (800609c <UART_SetConfig+0x69c>)
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b05      	cmp	r3, #5
 8005e70:	d826      	bhi.n	8005ec0 <UART_SetConfig+0x4c0>
 8005e72:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <UART_SetConfig+0x478>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005e91 	.word	0x08005e91
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005ea9 	.word	0x08005ea9
 8005e88:	08005eb1 	.word	0x08005eb1
 8005e8c:	08005eb9 	.word	0x08005eb9
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e086      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005e98:	2304      	movs	r3, #4
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e082      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e07e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e07a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e076      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005eb8:	2340      	movs	r3, #64	@ 0x40
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e072      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ec0:	2380      	movs	r3, #128	@ 0x80
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e06e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a75      	ldr	r2, [pc, #468]	@ (80060a4 <UART_SetConfig+0x6a4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d130      	bne.n	8005f34 <UART_SetConfig+0x534>
 8005ed2:	4b72      	ldr	r3, [pc, #456]	@ (800609c <UART_SetConfig+0x69c>)
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	d826      	bhi.n	8005f2c <UART_SetConfig+0x52c>
 8005ede:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee4 <UART_SetConfig+0x4e4>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005efd 	.word	0x08005efd
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005f0d 	.word	0x08005f0d
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e050      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e04c      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e048      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e044      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e040      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f24:	2340      	movs	r3, #64	@ 0x40
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e03c      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e038      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5b      	ldr	r2, [pc, #364]	@ (80060a8 <UART_SetConfig+0x6a8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d130      	bne.n	8005fa0 <UART_SetConfig+0x5a0>
 8005f3e:	4b57      	ldr	r3, [pc, #348]	@ (800609c <UART_SetConfig+0x69c>)
 8005f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d826      	bhi.n	8005f98 <UART_SetConfig+0x598>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <UART_SetConfig+0x550>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f69 	.word	0x08005f69
 8005f54:	08005f71 	.word	0x08005f71
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e01a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e016      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e012      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e00e      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f88:	2320      	movs	r3, #32
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e00a      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f90:	2340      	movs	r3, #64	@ 0x40
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e006      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005f98:	2380      	movs	r3, #128	@ 0x80
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e002      	b.n	8005fa6 <UART_SetConfig+0x5a6>
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3f      	ldr	r2, [pc, #252]	@ (80060a8 <UART_SetConfig+0x6a8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f040 80f8 	bne.w	80061a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	dc46      	bgt.n	8006048 <UART_SetConfig+0x648>
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	f2c0 8082 	blt.w	80060c4 <UART_SetConfig+0x6c4>
 8005fc0:	3b02      	subs	r3, #2
 8005fc2:	2b1e      	cmp	r3, #30
 8005fc4:	d87e      	bhi.n	80060c4 <UART_SetConfig+0x6c4>
 8005fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x5cc>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	0800604f 	.word	0x0800604f
 8005fd0:	080060c5 	.word	0x080060c5
 8005fd4:	08006057 	.word	0x08006057
 8005fd8:	080060c5 	.word	0x080060c5
 8005fdc:	080060c5 	.word	0x080060c5
 8005fe0:	080060c5 	.word	0x080060c5
 8005fe4:	08006067 	.word	0x08006067
 8005fe8:	080060c5 	.word	0x080060c5
 8005fec:	080060c5 	.word	0x080060c5
 8005ff0:	080060c5 	.word	0x080060c5
 8005ff4:	080060c5 	.word	0x080060c5
 8005ff8:	080060c5 	.word	0x080060c5
 8005ffc:	080060c5 	.word	0x080060c5
 8006000:	080060c5 	.word	0x080060c5
 8006004:	08006077 	.word	0x08006077
 8006008:	080060c5 	.word	0x080060c5
 800600c:	080060c5 	.word	0x080060c5
 8006010:	080060c5 	.word	0x080060c5
 8006014:	080060c5 	.word	0x080060c5
 8006018:	080060c5 	.word	0x080060c5
 800601c:	080060c5 	.word	0x080060c5
 8006020:	080060c5 	.word	0x080060c5
 8006024:	080060c5 	.word	0x080060c5
 8006028:	080060c5 	.word	0x080060c5
 800602c:	080060c5 	.word	0x080060c5
 8006030:	080060c5 	.word	0x080060c5
 8006034:	080060c5 	.word	0x080060c5
 8006038:	080060c5 	.word	0x080060c5
 800603c:	080060c5 	.word	0x080060c5
 8006040:	080060c5 	.word	0x080060c5
 8006044:	080060b7 	.word	0x080060b7
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d037      	beq.n	80060bc <UART_SetConfig+0x6bc>
 800604c:	e03a      	b.n	80060c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800604e:	f7fd fd7f 	bl	8003b50 <HAL_RCCEx_GetD3PCLK1Freq>
 8006052:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006054:	e03c      	b.n	80060d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f7fd fd8e 	bl	8003b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006064:	e034      	b.n	80060d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006066:	f107 0318 	add.w	r3, r7, #24
 800606a:	4618      	mov	r0, r3
 800606c:	f7fd feda 	bl	8003e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e02c      	b.n	80060d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <UART_SetConfig+0x69c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006082:	4b06      	ldr	r3, [pc, #24]	@ (800609c <UART_SetConfig+0x69c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	08db      	lsrs	r3, r3, #3
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	4a07      	ldr	r2, [pc, #28]	@ (80060ac <UART_SetConfig+0x6ac>)
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006094:	e01c      	b.n	80060d0 <UART_SetConfig+0x6d0>
 8006096:	bf00      	nop
 8006098:	40011400 	.word	0x40011400
 800609c:	58024400 	.word	0x58024400
 80060a0:	40007800 	.word	0x40007800
 80060a4:	40007c00 	.word	0x40007c00
 80060a8:	58000c00 	.word	0x58000c00
 80060ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b9d      	ldr	r3, [pc, #628]	@ (8006328 <UART_SetConfig+0x928>)
 80060b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060b4:	e00c      	b.n	80060d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060b6:	4b9d      	ldr	r3, [pc, #628]	@ (800632c <UART_SetConfig+0x92c>)
 80060b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ba:	e009      	b.n	80060d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c2:	e005      	b.n	80060d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 81de 	beq.w	8006494 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	4a94      	ldr	r2, [pc, #592]	@ (8006330 <UART_SetConfig+0x930>)
 80060de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d305      	bcc.n	8006108 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006104:	429a      	cmp	r2, r3
 8006106:	d903      	bls.n	8006110 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800610e:	e1c1      	b.n	8006494 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006112:	2200      	movs	r2, #0
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	60fa      	str	r2, [r7, #12]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	4a84      	ldr	r2, [pc, #528]	@ (8006330 <UART_SetConfig+0x930>)
 800611e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006122:	b29b      	uxth	r3, r3
 8006124:	2200      	movs	r2, #0
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006132:	f7fa f8d1 	bl	80002d8 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	020b      	lsls	r3, r1, #8
 8006148:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800614c:	0202      	lsls	r2, r0, #8
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	6849      	ldr	r1, [r1, #4]
 8006152:	0849      	lsrs	r1, r1, #1
 8006154:	2000      	movs	r0, #0
 8006156:	460c      	mov	r4, r1
 8006158:	4605      	mov	r5, r0
 800615a:	eb12 0804 	adds.w	r8, r2, r4
 800615e:	eb43 0905 	adc.w	r9, r3, r5
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	469a      	mov	sl, r3
 800616a:	4693      	mov	fp, r2
 800616c:	4652      	mov	r2, sl
 800616e:	465b      	mov	r3, fp
 8006170:	4640      	mov	r0, r8
 8006172:	4649      	mov	r1, r9
 8006174:	f7fa f8b0 	bl	80002d8 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4613      	mov	r3, r2
 800617e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006186:	d308      	bcc.n	800619a <UART_SetConfig+0x79a>
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618e:	d204      	bcs.n	800619a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006196:	60da      	str	r2, [r3, #12]
 8006198:	e17c      	b.n	8006494 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061a0:	e178      	b.n	8006494 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061aa:	f040 80c5 	bne.w	8006338 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	dc48      	bgt.n	8006248 <UART_SetConfig+0x848>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	db7b      	blt.n	80062b2 <UART_SetConfig+0x8b2>
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d879      	bhi.n	80062b2 <UART_SetConfig+0x8b2>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <UART_SetConfig+0x7c4>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	0800624f 	.word	0x0800624f
 80061c8:	08006257 	.word	0x08006257
 80061cc:	080062b3 	.word	0x080062b3
 80061d0:	080062b3 	.word	0x080062b3
 80061d4:	0800625f 	.word	0x0800625f
 80061d8:	080062b3 	.word	0x080062b3
 80061dc:	080062b3 	.word	0x080062b3
 80061e0:	080062b3 	.word	0x080062b3
 80061e4:	0800626f 	.word	0x0800626f
 80061e8:	080062b3 	.word	0x080062b3
 80061ec:	080062b3 	.word	0x080062b3
 80061f0:	080062b3 	.word	0x080062b3
 80061f4:	080062b3 	.word	0x080062b3
 80061f8:	080062b3 	.word	0x080062b3
 80061fc:	080062b3 	.word	0x080062b3
 8006200:	080062b3 	.word	0x080062b3
 8006204:	0800627f 	.word	0x0800627f
 8006208:	080062b3 	.word	0x080062b3
 800620c:	080062b3 	.word	0x080062b3
 8006210:	080062b3 	.word	0x080062b3
 8006214:	080062b3 	.word	0x080062b3
 8006218:	080062b3 	.word	0x080062b3
 800621c:	080062b3 	.word	0x080062b3
 8006220:	080062b3 	.word	0x080062b3
 8006224:	080062b3 	.word	0x080062b3
 8006228:	080062b3 	.word	0x080062b3
 800622c:	080062b3 	.word	0x080062b3
 8006230:	080062b3 	.word	0x080062b3
 8006234:	080062b3 	.word	0x080062b3
 8006238:	080062b3 	.word	0x080062b3
 800623c:	080062b3 	.word	0x080062b3
 8006240:	080062b3 	.word	0x080062b3
 8006244:	080062a5 	.word	0x080062a5
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	d02e      	beq.n	80062aa <UART_SetConfig+0x8aa>
 800624c:	e031      	b.n	80062b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800624e:	f7fc fa49 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8006252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006254:	e033      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006256:	f7fc fa5b 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 800625a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800625c:	e02f      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800625e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fc8a 	bl	8003b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626c:	e027      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626e:	f107 0318 	add.w	r3, r7, #24
 8006272:	4618      	mov	r0, r3
 8006274:	f7fd fdd6 	bl	8003e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	e01f      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627e:	4b2d      	ldr	r3, [pc, #180]	@ (8006334 <UART_SetConfig+0x934>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800628a:	4b2a      	ldr	r3, [pc, #168]	@ (8006334 <UART_SetConfig+0x934>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	08db      	lsrs	r3, r3, #3
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	4a24      	ldr	r2, [pc, #144]	@ (8006328 <UART_SetConfig+0x928>)
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800629c:	e00f      	b.n	80062be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800629e:	4b22      	ldr	r3, [pc, #136]	@ (8006328 <UART_SetConfig+0x928>)
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a2:	e00c      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a4:	4b21      	ldr	r3, [pc, #132]	@ (800632c <UART_SetConfig+0x92c>)
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a8:	e009      	b.n	80062be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b0:	e005      	b.n	80062be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80e7 	beq.w	8006494 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	4a19      	ldr	r2, [pc, #100]	@ (8006330 <UART_SetConfig+0x930>)
 80062cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d8:	005a      	lsls	r2, r3, #1
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	441a      	add	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d916      	bls.n	8006320 <UART_SetConfig+0x920>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f8:	d212      	bcs.n	8006320 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f023 030f 	bic.w	r3, r3, #15
 8006302:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	b29b      	uxth	r3, r3
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	b29a      	uxth	r2, r3
 8006310:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006312:	4313      	orrs	r3, r2
 8006314:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	e0b9      	b.n	8006494 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006326:	e0b5      	b.n	8006494 <UART_SetConfig+0xa94>
 8006328:	03d09000 	.word	0x03d09000
 800632c:	003d0900 	.word	0x003d0900
 8006330:	08007730 	.word	0x08007730
 8006334:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006338:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800633c:	2b20      	cmp	r3, #32
 800633e:	dc49      	bgt.n	80063d4 <UART_SetConfig+0x9d4>
 8006340:	2b00      	cmp	r3, #0
 8006342:	db7c      	blt.n	800643e <UART_SetConfig+0xa3e>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d87a      	bhi.n	800643e <UART_SetConfig+0xa3e>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <UART_SetConfig+0x950>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063db 	.word	0x080063db
 8006354:	080063e3 	.word	0x080063e3
 8006358:	0800643f 	.word	0x0800643f
 800635c:	0800643f 	.word	0x0800643f
 8006360:	080063eb 	.word	0x080063eb
 8006364:	0800643f 	.word	0x0800643f
 8006368:	0800643f 	.word	0x0800643f
 800636c:	0800643f 	.word	0x0800643f
 8006370:	080063fb 	.word	0x080063fb
 8006374:	0800643f 	.word	0x0800643f
 8006378:	0800643f 	.word	0x0800643f
 800637c:	0800643f 	.word	0x0800643f
 8006380:	0800643f 	.word	0x0800643f
 8006384:	0800643f 	.word	0x0800643f
 8006388:	0800643f 	.word	0x0800643f
 800638c:	0800643f 	.word	0x0800643f
 8006390:	0800640b 	.word	0x0800640b
 8006394:	0800643f 	.word	0x0800643f
 8006398:	0800643f 	.word	0x0800643f
 800639c:	0800643f 	.word	0x0800643f
 80063a0:	0800643f 	.word	0x0800643f
 80063a4:	0800643f 	.word	0x0800643f
 80063a8:	0800643f 	.word	0x0800643f
 80063ac:	0800643f 	.word	0x0800643f
 80063b0:	0800643f 	.word	0x0800643f
 80063b4:	0800643f 	.word	0x0800643f
 80063b8:	0800643f 	.word	0x0800643f
 80063bc:	0800643f 	.word	0x0800643f
 80063c0:	0800643f 	.word	0x0800643f
 80063c4:	0800643f 	.word	0x0800643f
 80063c8:	0800643f 	.word	0x0800643f
 80063cc:	0800643f 	.word	0x0800643f
 80063d0:	08006431 	.word	0x08006431
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d02e      	beq.n	8006436 <UART_SetConfig+0xa36>
 80063d8:	e031      	b.n	800643e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063da:	f7fc f983 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80063de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063e0:	e033      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e2:	f7fc f995 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 80063e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063e8:	e02f      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fd fbc4 	bl	8003b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f8:	e027      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fa:	f107 0318 	add.w	r3, r7, #24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fd fd10 	bl	8003e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e01f      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640a:	4b2d      	ldr	r3, [pc, #180]	@ (80064c0 <UART_SetConfig+0xac0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006416:	4b2a      	ldr	r3, [pc, #168]	@ (80064c0 <UART_SetConfig+0xac0>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	08db      	lsrs	r3, r3, #3
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	4a28      	ldr	r2, [pc, #160]	@ (80064c4 <UART_SetConfig+0xac4>)
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006428:	e00f      	b.n	800644a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800642a:	4b26      	ldr	r3, [pc, #152]	@ (80064c4 <UART_SetConfig+0xac4>)
 800642c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800642e:	e00c      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006430:	4b25      	ldr	r3, [pc, #148]	@ (80064c8 <UART_SetConfig+0xac8>)
 8006432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006434:	e009      	b.n	800644a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643c:	e005      	b.n	800644a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006448:	bf00      	nop
    }

    if (pclk != 0U)
 800644a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d021      	beq.n	8006494 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	4a1d      	ldr	r2, [pc, #116]	@ (80064cc <UART_SetConfig+0xacc>)
 8006456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800645a:	461a      	mov	r2, r3
 800645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	441a      	add	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006472:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006476:	2b0f      	cmp	r3, #15
 8006478:	d909      	bls.n	800648e <UART_SetConfig+0xa8e>
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006480:	d205      	bcs.n	800648e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006484:	b29a      	uxth	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	e002      	b.n	8006494 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2201      	movs	r2, #1
 8006498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2201      	movs	r2, #1
 80064a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2200      	movs	r2, #0
 80064a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2200      	movs	r2, #0
 80064ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3748      	adds	r7, #72	@ 0x48
 80064b8:	46bd      	mov	sp, r7
 80064ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064be:	bf00      	nop
 80064c0:	58024400 	.word	0x58024400
 80064c4:	03d09000 	.word	0x03d09000
 80064c8:	003d0900 	.word	0x003d0900
 80064cc:	08007730 	.word	0x08007730

080064d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ce:	d10a      	bne.n	80065e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b098      	sub	sp, #96	@ 0x60
 8006618:	af02      	add	r7, sp, #8
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006624:	f7fa fd78 	bl	8001118 <HAL_GetTick>
 8006628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b08      	cmp	r3, #8
 8006636:	d12f      	bne.n	8006698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f88e 	bl	8006768 <UART_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d022      	beq.n	8006698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006670:	647b      	str	r3, [r7, #68]	@ 0x44
 8006672:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800667e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e6      	bne.n	8006652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e063      	b.n	8006760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d149      	bne.n	800673a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ae:	2200      	movs	r2, #0
 80066b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f857 	bl	8006768 <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d03c      	beq.n	800673a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	623b      	str	r3, [r7, #32]
   return(result);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066de:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e6      	bne.n	80066c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	60fb      	str	r3, [r7, #12]
   return(result);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3308      	adds	r3, #8
 8006710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006712:	61fa      	str	r2, [r7, #28]
 8006714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	69b9      	ldr	r1, [r7, #24]
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	617b      	str	r3, [r7, #20]
   return(result);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e012      	b.n	8006760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3758      	adds	r7, #88	@ 0x58
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006778:	e04f      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d04b      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fa fcc9 	bl	8001118 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <UART_WaitOnFlagUntilTimeout+0x30>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e04e      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d037      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b80      	cmp	r3, #128	@ 0x80
 80067ae:	d034      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b40      	cmp	r3, #64	@ 0x40
 80067b4:	d031      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d110      	bne.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2208      	movs	r2, #8
 80067ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f839 	bl	8006844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2208      	movs	r2, #8
 80067d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e029      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f4:	d111      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 f81f 	bl	8006844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e00f      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	429a      	cmp	r2, r3
 8006836:	d0a0      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b095      	sub	sp, #84	@ 0x54
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686a:	643b      	str	r3, [r7, #64]	@ 0x40
 800686c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006870:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e6      	bne.n	800684c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	61fb      	str	r3, [r7, #28]
   return(result);
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <UART_EndRxTransfer+0xc8>)
 8006892:	4013      	ands	r3, r2
 8006894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800689e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d118      	bne.n	80068ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f023 0310 	bic.w	r3, r3, #16
 80068ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	613b      	str	r3, [r7, #16]
   return(result);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006900:	bf00      	nop
 8006902:	3754      	adds	r7, #84	@ 0x54
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	effffffe 	.word	0xeffffffe

08006910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_UARTEx_DisableFifoMode+0x16>
 8006922:	2302      	movs	r3, #2
 8006924:	e027      	b.n	8006976 <HAL_UARTEx_DisableFifoMode+0x66>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2224      	movs	r2, #36	@ 0x24
 8006932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006996:	2302      	movs	r3, #2
 8006998:	e02d      	b.n	80069f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2224      	movs	r2, #36	@ 0x24
 80069a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f850 	bl	8006a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e02d      	b.n	8006a72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2224      	movs	r2, #36	@ 0x24
 8006a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f812 	bl	8006a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d108      	bne.n	8006a9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a9c:	e031      	b.n	8006b02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	0e5b      	lsrs	r3, r3, #25
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	0f5b      	lsrs	r3, r3, #29
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	7b3a      	ldrb	r2, [r7, #12]
 8006aca:	4911      	ldr	r1, [pc, #68]	@ (8006b10 <UARTEx_SetNbDataToProcess+0x94>)
 8006acc:	5c8a      	ldrb	r2, [r1, r2]
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ad2:	7b3a      	ldrb	r2, [r7, #12]
 8006ad4:	490f      	ldr	r1, [pc, #60]	@ (8006b14 <UARTEx_SetNbDataToProcess+0x98>)
 8006ad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	7b7a      	ldrb	r2, [r7, #13]
 8006ae8:	4909      	ldr	r1, [pc, #36]	@ (8006b10 <UARTEx_SetNbDataToProcess+0x94>)
 8006aea:	5c8a      	ldrb	r2, [r1, r2]
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006af0:	7b7a      	ldrb	r2, [r7, #13]
 8006af2:	4908      	ldr	r1, [pc, #32]	@ (8006b14 <UARTEx_SetNbDataToProcess+0x98>)
 8006af4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	08007748 	.word	0x08007748
 8006b14:	08007750 	.word	0x08007750

08006b18 <memset>:
 8006b18:	4402      	add	r2, r0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d100      	bne.n	8006b22 <memset+0xa>
 8006b20:	4770      	bx	lr
 8006b22:	f803 1b01 	strb.w	r1, [r3], #1
 8006b26:	e7f9      	b.n	8006b1c <memset+0x4>

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b60 <__libc_init_array+0x38>)
 8006b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b64 <__libc_init_array+0x3c>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	2600      	movs	r6, #0
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	4d0b      	ldr	r5, [pc, #44]	@ (8006b68 <__libc_init_array+0x40>)
 8006b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b6c <__libc_init_array+0x44>)
 8006b3c:	f000 fde4 	bl	8007708 <_init>
 8006b40:	1b64      	subs	r4, r4, r5
 8006b42:	10a4      	asrs	r4, r4, #2
 8006b44:	2600      	movs	r6, #0
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08007938 	.word	0x08007938
 8006b64:	08007938 	.word	0x08007938
 8006b68:	08007938 	.word	0x08007938
 8006b6c:	0800793c 	.word	0x0800793c

08006b70 <sin>:
 8006b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b72:	eeb0 7b40 	vmov.f64	d7, d0
 8006b76:	ee17 3a90 	vmov	r3, s15
 8006b7a:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <sin+0x90>)
 8006b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d807      	bhi.n	8006b94 <sin+0x24>
 8006b84:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8006bf8 <sin+0x88>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	b005      	add	sp, #20
 8006b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b90:	f000 b8a2 	b.w	8006cd8 <__kernel_sin>
 8006b94:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <sin+0x94>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d904      	bls.n	8006ba4 <sin+0x34>
 8006b9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006b9e:	b005      	add	sp, #20
 8006ba0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ba4:	4668      	mov	r0, sp
 8006ba6:	f000 f8ef 	bl	8006d88 <__ieee754_rem_pio2>
 8006baa:	f000 0003 	and.w	r0, r0, #3
 8006bae:	2801      	cmp	r0, #1
 8006bb0:	d00a      	beq.n	8006bc8 <sin+0x58>
 8006bb2:	2802      	cmp	r0, #2
 8006bb4:	d00f      	beq.n	8006bd6 <sin+0x66>
 8006bb6:	b9c0      	cbnz	r0, 8006bea <sin+0x7a>
 8006bb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bbc:	ed9d 0b00 	vldr	d0, [sp]
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 f889 	bl	8006cd8 <__kernel_sin>
 8006bc6:	e7ea      	b.n	8006b9e <sin+0x2e>
 8006bc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bcc:	ed9d 0b00 	vldr	d0, [sp]
 8006bd0:	f000 f81a 	bl	8006c08 <__kernel_cos>
 8006bd4:	e7e3      	b.n	8006b9e <sin+0x2e>
 8006bd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bda:	ed9d 0b00 	vldr	d0, [sp]
 8006bde:	2001      	movs	r0, #1
 8006be0:	f000 f87a 	bl	8006cd8 <__kernel_sin>
 8006be4:	eeb1 0b40 	vneg.f64	d0, d0
 8006be8:	e7d9      	b.n	8006b9e <sin+0x2e>
 8006bea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bee:	ed9d 0b00 	vldr	d0, [sp]
 8006bf2:	f000 f809 	bl	8006c08 <__kernel_cos>
 8006bf6:	e7f5      	b.n	8006be4 <sin+0x74>
	...
 8006c00:	3fe921fb 	.word	0x3fe921fb
 8006c04:	7fefffff 	.word	0x7fefffff

08006c08 <__kernel_cos>:
 8006c08:	eeb0 5b40 	vmov.f64	d5, d0
 8006c0c:	ee15 1a90 	vmov	r1, s11
 8006c10:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006c14:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006c18:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8006c1c:	d204      	bcs.n	8006c28 <__kernel_cos+0x20>
 8006c1e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8006c22:	ee17 3a90 	vmov	r3, s15
 8006c26:	b343      	cbz	r3, 8006c7a <__kernel_cos+0x72>
 8006c28:	ee25 6b05 	vmul.f64	d6, d5, d5
 8006c2c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8006c30:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8006ca0 <__kernel_cos+0x98>
 8006c34:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006ca8 <__kernel_cos+0xa0>
 8006c38:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006c3c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006cb0 <__kernel_cos+0xa8>
 8006c40:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006c44:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006cb8 <__kernel_cos+0xb0>
 8006c48:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006c4c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8006cc0 <__kernel_cos+0xb8>
 8006c50:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <__kernel_cos+0xc8>)
 8006c52:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006c56:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8006cc8 <__kernel_cos+0xc0>
 8006c5a:	4299      	cmp	r1, r3
 8006c5c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006c60:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8006c64:	ee24 4b06 	vmul.f64	d4, d4, d6
 8006c68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c6c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8006c70:	d804      	bhi.n	8006c7c <__kernel_cos+0x74>
 8006c72:	ee37 7b41 	vsub.f64	d7, d7, d1
 8006c76:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006c7a:	4770      	bx	lr
 8006c7c:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <__kernel_cos+0xcc>)
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d809      	bhi.n	8006c96 <__kernel_cos+0x8e>
 8006c82:	2200      	movs	r2, #0
 8006c84:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8006c88:	ec43 2b16 	vmov	d6, r2, r3
 8006c8c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006c90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006c94:	e7ed      	b.n	8006c72 <__kernel_cos+0x6a>
 8006c96:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8006c9a:	e7f7      	b.n	8006c8c <__kernel_cos+0x84>
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	be8838d4 	.word	0xbe8838d4
 8006ca4:	bda8fae9 	.word	0xbda8fae9
 8006ca8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006cac:	3e21ee9e 	.word	0x3e21ee9e
 8006cb0:	809c52ad 	.word	0x809c52ad
 8006cb4:	be927e4f 	.word	0xbe927e4f
 8006cb8:	19cb1590 	.word	0x19cb1590
 8006cbc:	3efa01a0 	.word	0x3efa01a0
 8006cc0:	16c15177 	.word	0x16c15177
 8006cc4:	bf56c16c 	.word	0xbf56c16c
 8006cc8:	5555554c 	.word	0x5555554c
 8006ccc:	3fa55555 	.word	0x3fa55555
 8006cd0:	3fd33332 	.word	0x3fd33332
 8006cd4:	3fe90000 	.word	0x3fe90000

08006cd8 <__kernel_sin>:
 8006cd8:	ee10 3a90 	vmov	r3, s1
 8006cdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ce0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006ce4:	d204      	bcs.n	8006cf0 <__kernel_sin+0x18>
 8006ce6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006cea:	ee17 3a90 	vmov	r3, s15
 8006cee:	b35b      	cbz	r3, 8006d48 <__kernel_sin+0x70>
 8006cf0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006cf4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006cf8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8006d50 <__kernel_sin+0x78>
 8006cfc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006d58 <__kernel_sin+0x80>
 8006d00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006d04:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006d60 <__kernel_sin+0x88>
 8006d08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006d0c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006d68 <__kernel_sin+0x90>
 8006d10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006d14:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8006d70 <__kernel_sin+0x98>
 8006d18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006d1c:	b930      	cbnz	r0, 8006d2c <__kernel_sin+0x54>
 8006d1e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8006d78 <__kernel_sin+0xa0>
 8006d22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006d26:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006d2a:	4770      	bx	lr
 8006d2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006d30:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8006d34:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006d38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006d3c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8006d80 <__kernel_sin+0xa8>
 8006d40:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006d44:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	f3af 8000 	nop.w
 8006d50:	5acfd57c 	.word	0x5acfd57c
 8006d54:	3de5d93a 	.word	0x3de5d93a
 8006d58:	8a2b9ceb 	.word	0x8a2b9ceb
 8006d5c:	be5ae5e6 	.word	0xbe5ae5e6
 8006d60:	57b1fe7d 	.word	0x57b1fe7d
 8006d64:	3ec71de3 	.word	0x3ec71de3
 8006d68:	19c161d5 	.word	0x19c161d5
 8006d6c:	bf2a01a0 	.word	0xbf2a01a0
 8006d70:	1110f8a6 	.word	0x1110f8a6
 8006d74:	3f811111 	.word	0x3f811111
 8006d78:	55555549 	.word	0x55555549
 8006d7c:	bfc55555 	.word	0xbfc55555
 8006d80:	55555549 	.word	0x55555549
 8006d84:	3fc55555 	.word	0x3fc55555

08006d88 <__ieee754_rem_pio2>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	eeb0 7b40 	vmov.f64	d7, d0
 8006d8e:	ee17 5a90 	vmov	r5, s15
 8006d92:	4b99      	ldr	r3, [pc, #612]	@ (8006ff8 <__ieee754_rem_pio2+0x270>)
 8006d94:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006d98:	429e      	cmp	r6, r3
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	d807      	bhi.n	8006db0 <__ieee754_rem_pio2+0x28>
 8006da0:	2200      	movs	r2, #0
 8006da2:	2300      	movs	r3, #0
 8006da4:	ed84 0b00 	vstr	d0, [r4]
 8006da8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006dac:	2000      	movs	r0, #0
 8006dae:	e01b      	b.n	8006de8 <__ieee754_rem_pio2+0x60>
 8006db0:	4b92      	ldr	r3, [pc, #584]	@ (8006ffc <__ieee754_rem_pio2+0x274>)
 8006db2:	429e      	cmp	r6, r3
 8006db4:	d83b      	bhi.n	8006e2e <__ieee754_rem_pio2+0xa6>
 8006db6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8006fb8 <__ieee754_rem_pio2+0x230>
 8006dc0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8006dc4:	dd19      	ble.n	8006dfa <__ieee754_rem_pio2+0x72>
 8006dc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006dca:	429e      	cmp	r6, r3
 8006dcc:	d00e      	beq.n	8006dec <__ieee754_rem_pio2+0x64>
 8006dce:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8006fc0 <__ieee754_rem_pio2+0x238>
 8006dd2:	ee37 6b45 	vsub.f64	d6, d7, d5
 8006dd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006dda:	ed84 6b00 	vstr	d6, [r4]
 8006dde:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006de2:	ed84 7b02 	vstr	d7, [r4, #8]
 8006de6:	2001      	movs	r0, #1
 8006de8:	b008      	add	sp, #32
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8006fc8 <__ieee754_rem_pio2+0x240>
 8006df0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8006fd0 <__ieee754_rem_pio2+0x248>
 8006df4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006df8:	e7eb      	b.n	8006dd2 <__ieee754_rem_pio2+0x4a>
 8006dfa:	429e      	cmp	r6, r3
 8006dfc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006e00:	d00e      	beq.n	8006e20 <__ieee754_rem_pio2+0x98>
 8006e02:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8006fc0 <__ieee754_rem_pio2+0x238>
 8006e06:	ee37 6b05 	vadd.f64	d6, d7, d5
 8006e0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006e0e:	ed84 6b00 	vstr	d6, [r4]
 8006e12:	ee37 7b05 	vadd.f64	d7, d7, d5
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006e1e:	e7e3      	b.n	8006de8 <__ieee754_rem_pio2+0x60>
 8006e20:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8006fc8 <__ieee754_rem_pio2+0x240>
 8006e24:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8006fd0 <__ieee754_rem_pio2+0x248>
 8006e28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e2c:	e7eb      	b.n	8006e06 <__ieee754_rem_pio2+0x7e>
 8006e2e:	4b74      	ldr	r3, [pc, #464]	@ (8007000 <__ieee754_rem_pio2+0x278>)
 8006e30:	429e      	cmp	r6, r3
 8006e32:	d870      	bhi.n	8006f16 <__ieee754_rem_pio2+0x18e>
 8006e34:	f000 f8ec 	bl	8007010 <fabs>
 8006e38:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8006e3c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006fd8 <__ieee754_rem_pio2+0x250>
 8006e40:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006e44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006e48:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006e4c:	ee17 0a90 	vmov	r0, s15
 8006e50:	eeb1 4b45 	vneg.f64	d4, d5
 8006e54:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8006fb8 <__ieee754_rem_pio2+0x230>
 8006e58:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006e5c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8006fc0 <__ieee754_rem_pio2+0x238>
 8006e60:	281f      	cmp	r0, #31
 8006e62:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006e66:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006e6a:	dc05      	bgt.n	8006e78 <__ieee754_rem_pio2+0xf0>
 8006e6c:	4b65      	ldr	r3, [pc, #404]	@ (8007004 <__ieee754_rem_pio2+0x27c>)
 8006e6e:	1e42      	subs	r2, r0, #1
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	42b3      	cmp	r3, r6
 8006e76:	d109      	bne.n	8006e8c <__ieee754_rem_pio2+0x104>
 8006e78:	ee16 3a90 	vmov	r3, s13
 8006e7c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006e80:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006e8a:	dc02      	bgt.n	8006e92 <__ieee754_rem_pio2+0x10a>
 8006e8c:	ed84 6b00 	vstr	d6, [r4]
 8006e90:	e01a      	b.n	8006ec8 <__ieee754_rem_pio2+0x140>
 8006e92:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8006fc8 <__ieee754_rem_pio2+0x240>
 8006e96:	eeb0 6b40 	vmov.f64	d6, d0
 8006e9a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8006e9e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006ea2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8006ea6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8006fd0 <__ieee754_rem_pio2+0x248>
 8006eaa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8006eae:	ee36 3b47 	vsub.f64	d3, d6, d7
 8006eb2:	ee13 3a90 	vmov	r3, s7
 8006eb6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b31      	cmp	r3, #49	@ 0x31
 8006ebe:	dc17      	bgt.n	8006ef0 <__ieee754_rem_pio2+0x168>
 8006ec0:	eeb0 0b46 	vmov.f64	d0, d6
 8006ec4:	ed84 3b00 	vstr	d3, [r4]
 8006ec8:	ed94 6b00 	vldr	d6, [r4]
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	ee30 0b46 	vsub.f64	d0, d0, d6
 8006ed2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8006ed6:	ed84 0b02 	vstr	d0, [r4, #8]
 8006eda:	da85      	bge.n	8006de8 <__ieee754_rem_pio2+0x60>
 8006edc:	eeb1 6b46 	vneg.f64	d6, d6
 8006ee0:	eeb1 0b40 	vneg.f64	d0, d0
 8006ee4:	ed84 6b00 	vstr	d6, [r4]
 8006ee8:	ed84 0b02 	vstr	d0, [r4, #8]
 8006eec:	4240      	negs	r0, r0
 8006eee:	e77b      	b.n	8006de8 <__ieee754_rem_pio2+0x60>
 8006ef0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8006fe0 <__ieee754_rem_pio2+0x258>
 8006ef4:	eeb0 0b46 	vmov.f64	d0, d6
 8006ef8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8006efc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8006f00:	eea4 6b07 	vfma.f64	d6, d4, d7
 8006f04:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8006fe8 <__ieee754_rem_pio2+0x260>
 8006f08:	eeb0 7b46 	vmov.f64	d7, d6
 8006f0c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8006f10:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006f14:	e7ba      	b.n	8006e8c <__ieee754_rem_pio2+0x104>
 8006f16:	4b3c      	ldr	r3, [pc, #240]	@ (8007008 <__ieee754_rem_pio2+0x280>)
 8006f18:	429e      	cmp	r6, r3
 8006f1a:	d906      	bls.n	8006f2a <__ieee754_rem_pio2+0x1a2>
 8006f1c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006f20:	ed80 7b02 	vstr	d7, [r0, #8]
 8006f24:	ed80 7b00 	vstr	d7, [r0]
 8006f28:	e740      	b.n	8006dac <__ieee754_rem_pio2+0x24>
 8006f2a:	ee10 3a10 	vmov	r3, s0
 8006f2e:	1532      	asrs	r2, r6, #20
 8006f30:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8006f34:	4618      	mov	r0, r3
 8006f36:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006f3a:	ec41 0b17 	vmov	d7, r0, r1
 8006f3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006f42:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8006ff0 <__ieee754_rem_pio2+0x268>
 8006f46:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006f4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f4e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006f52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f56:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006f5a:	a808      	add	r0, sp, #32
 8006f5c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006f60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f64:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006f68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f70:	2103      	movs	r1, #3
 8006f72:	ed30 7b02 	vldmdb	r0!, {d7}
 8006f76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f101 31ff 	add.w	r1, r1, #4294967295
 8006f84:	d0f5      	beq.n	8006f72 <__ieee754_rem_pio2+0x1ea>
 8006f86:	4921      	ldr	r1, [pc, #132]	@ (800700c <__ieee754_rem_pio2+0x284>)
 8006f88:	9101      	str	r1, [sp, #4]
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	9100      	str	r1, [sp, #0]
 8006f8e:	a802      	add	r0, sp, #8
 8006f90:	4621      	mov	r1, r4
 8006f92:	f000 f845 	bl	8007020 <__kernel_rem_pio2>
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	f6bf af26 	bge.w	8006de8 <__ieee754_rem_pio2+0x60>
 8006f9c:	ed94 7b00 	vldr	d7, [r4]
 8006fa0:	eeb1 7b47 	vneg.f64	d7, d7
 8006fa4:	ed84 7b00 	vstr	d7, [r4]
 8006fa8:	ed94 7b02 	vldr	d7, [r4, #8]
 8006fac:	eeb1 7b47 	vneg.f64	d7, d7
 8006fb0:	ed84 7b02 	vstr	d7, [r4, #8]
 8006fb4:	e79a      	b.n	8006eec <__ieee754_rem_pio2+0x164>
 8006fb6:	bf00      	nop
 8006fb8:	54400000 	.word	0x54400000
 8006fbc:	3ff921fb 	.word	0x3ff921fb
 8006fc0:	1a626331 	.word	0x1a626331
 8006fc4:	3dd0b461 	.word	0x3dd0b461
 8006fc8:	1a600000 	.word	0x1a600000
 8006fcc:	3dd0b461 	.word	0x3dd0b461
 8006fd0:	2e037073 	.word	0x2e037073
 8006fd4:	3ba3198a 	.word	0x3ba3198a
 8006fd8:	6dc9c883 	.word	0x6dc9c883
 8006fdc:	3fe45f30 	.word	0x3fe45f30
 8006fe0:	2e000000 	.word	0x2e000000
 8006fe4:	3ba3198a 	.word	0x3ba3198a
 8006fe8:	252049c1 	.word	0x252049c1
 8006fec:	397b839a 	.word	0x397b839a
 8006ff0:	00000000 	.word	0x00000000
 8006ff4:	41700000 	.word	0x41700000
 8006ff8:	3fe921fb 	.word	0x3fe921fb
 8006ffc:	4002d97b 	.word	0x4002d97b
 8007000:	413921fb 	.word	0x413921fb
 8007004:	08007758 	.word	0x08007758
 8007008:	7fefffff 	.word	0x7fefffff
 800700c:	080077d8 	.word	0x080077d8

08007010 <fabs>:
 8007010:	ec51 0b10 	vmov	r0, r1, d0
 8007014:	4602      	mov	r2, r0
 8007016:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800701a:	ec43 2b10 	vmov	d0, r2, r3
 800701e:	4770      	bx	lr

08007020 <__kernel_rem_pio2>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	ed2d 8b06 	vpush	{d8-d10}
 8007028:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800702c:	469b      	mov	fp, r3
 800702e:	9001      	str	r0, [sp, #4]
 8007030:	4bbb      	ldr	r3, [pc, #748]	@ (8007320 <__kernel_rem_pio2+0x300>)
 8007032:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8007034:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8007038:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800703c:	f112 0f14 	cmn.w	r2, #20
 8007040:	bfa8      	it	ge
 8007042:	1ed3      	subge	r3, r2, #3
 8007044:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007048:	bfb8      	it	lt
 800704a:	2300      	movlt	r3, #0
 800704c:	f06f 0517 	mvn.w	r5, #23
 8007050:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8007308 <__kernel_rem_pio2+0x2e8>
 8007054:	bfa4      	itt	ge
 8007056:	2018      	movge	r0, #24
 8007058:	fb93 f3f0 	sdivge	r3, r3, r0
 800705c:	fb03 5505 	mla	r5, r3, r5, r5
 8007060:	eba3 040a 	sub.w	r4, r3, sl
 8007064:	4415      	add	r5, r2
 8007066:	460f      	mov	r7, r1
 8007068:	eb09 060a 	add.w	r6, r9, sl
 800706c:	a81a      	add	r0, sp, #104	@ 0x68
 800706e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8007072:	2200      	movs	r2, #0
 8007074:	42b2      	cmp	r2, r6
 8007076:	dd0e      	ble.n	8007096 <__kernel_rem_pio2+0x76>
 8007078:	aa1a      	add	r2, sp, #104	@ 0x68
 800707a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800707e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8007082:	2600      	movs	r6, #0
 8007084:	454e      	cmp	r6, r9
 8007086:	dc25      	bgt.n	80070d4 <__kernel_rem_pio2+0xb4>
 8007088:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8007308 <__kernel_rem_pio2+0x2e8>
 800708c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007090:	4614      	mov	r4, r2
 8007092:	2000      	movs	r0, #0
 8007094:	e015      	b.n	80070c2 <__kernel_rem_pio2+0xa2>
 8007096:	42d4      	cmn	r4, r2
 8007098:	d409      	bmi.n	80070ae <__kernel_rem_pio2+0x8e>
 800709a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800709e:	ee07 1a90 	vmov	s15, r1
 80070a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a6:	eca0 7b02 	vstmia	r0!, {d7}
 80070aa:	3201      	adds	r2, #1
 80070ac:	e7e2      	b.n	8007074 <__kernel_rem_pio2+0x54>
 80070ae:	eeb0 7b46 	vmov.f64	d7, d6
 80070b2:	e7f8      	b.n	80070a6 <__kernel_rem_pio2+0x86>
 80070b4:	ecbc 5b02 	vldmia	ip!, {d5}
 80070b8:	ed94 6b00 	vldr	d6, [r4]
 80070bc:	3001      	adds	r0, #1
 80070be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80070c2:	4550      	cmp	r0, sl
 80070c4:	f1a4 0408 	sub.w	r4, r4, #8
 80070c8:	ddf4      	ble.n	80070b4 <__kernel_rem_pio2+0x94>
 80070ca:	ecae 7b02 	vstmia	lr!, {d7}
 80070ce:	3601      	adds	r6, #1
 80070d0:	3208      	adds	r2, #8
 80070d2:	e7d7      	b.n	8007084 <__kernel_rem_pio2+0x64>
 80070d4:	aa06      	add	r2, sp, #24
 80070d6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8007310 <__kernel_rem_pio2+0x2f0>
 80070da:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8007318 <__kernel_rem_pio2+0x2f8>
 80070de:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80070e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80070e6:	9203      	str	r2, [sp, #12]
 80070e8:	9302      	str	r3, [sp, #8]
 80070ea:	464c      	mov	r4, r9
 80070ec:	00e3      	lsls	r3, r4, #3
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	ab92      	add	r3, sp, #584	@ 0x248
 80070f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070f6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80070fa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80070fc:	ab06      	add	r3, sp, #24
 80070fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007102:	461e      	mov	r6, r3
 8007104:	4620      	mov	r0, r4
 8007106:	2800      	cmp	r0, #0
 8007108:	f1a2 0208 	sub.w	r2, r2, #8
 800710c:	dc4a      	bgt.n	80071a4 <__kernel_rem_pio2+0x184>
 800710e:	4628      	mov	r0, r5
 8007110:	9305      	str	r3, [sp, #20]
 8007112:	f000 fa01 	bl	8007518 <scalbn>
 8007116:	eeb0 8b40 	vmov.f64	d8, d0
 800711a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800711e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007122:	f000 fa79 	bl	8007618 <floor>
 8007126:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800712a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800712e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007132:	2d00      	cmp	r5, #0
 8007134:	ee17 8a90 	vmov	r8, s15
 8007138:	9b05      	ldr	r3, [sp, #20]
 800713a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800713e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007142:	dd41      	ble.n	80071c8 <__kernel_rem_pio2+0x1a8>
 8007144:	1e60      	subs	r0, r4, #1
 8007146:	aa06      	add	r2, sp, #24
 8007148:	f1c5 0c18 	rsb	ip, r5, #24
 800714c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8007150:	fa46 f20c 	asr.w	r2, r6, ip
 8007154:	4490      	add	r8, r2
 8007156:	fa02 f20c 	lsl.w	r2, r2, ip
 800715a:	1ab6      	subs	r6, r6, r2
 800715c:	aa06      	add	r2, sp, #24
 800715e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8007162:	f1c5 0217 	rsb	r2, r5, #23
 8007166:	4116      	asrs	r6, r2
 8007168:	2e00      	cmp	r6, #0
 800716a:	dd3c      	ble.n	80071e6 <__kernel_rem_pio2+0x1c6>
 800716c:	f04f 0c00 	mov.w	ip, #0
 8007170:	f108 0801 	add.w	r8, r8, #1
 8007174:	4660      	mov	r0, ip
 8007176:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800717a:	4564      	cmp	r4, ip
 800717c:	dc66      	bgt.n	800724c <__kernel_rem_pio2+0x22c>
 800717e:	2d00      	cmp	r5, #0
 8007180:	dd03      	ble.n	800718a <__kernel_rem_pio2+0x16a>
 8007182:	2d01      	cmp	r5, #1
 8007184:	d072      	beq.n	800726c <__kernel_rem_pio2+0x24c>
 8007186:	2d02      	cmp	r5, #2
 8007188:	d07a      	beq.n	8007280 <__kernel_rem_pio2+0x260>
 800718a:	2e02      	cmp	r6, #2
 800718c:	d12b      	bne.n	80071e6 <__kernel_rem_pio2+0x1c6>
 800718e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007192:	ee30 8b48 	vsub.f64	d8, d0, d8
 8007196:	b330      	cbz	r0, 80071e6 <__kernel_rem_pio2+0x1c6>
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f9bd 	bl	8007518 <scalbn>
 800719e:	ee38 8b40 	vsub.f64	d8, d8, d0
 80071a2:	e020      	b.n	80071e6 <__kernel_rem_pio2+0x1c6>
 80071a4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80071a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80071ac:	3801      	subs	r0, #1
 80071ae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80071b2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80071b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80071ba:	eca6 0a01 	vstmia	r6!, {s0}
 80071be:	ed92 0b00 	vldr	d0, [r2]
 80071c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80071c6:	e79e      	b.n	8007106 <__kernel_rem_pio2+0xe6>
 80071c8:	d105      	bne.n	80071d6 <__kernel_rem_pio2+0x1b6>
 80071ca:	1e62      	subs	r2, r4, #1
 80071cc:	a906      	add	r1, sp, #24
 80071ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80071d2:	15f6      	asrs	r6, r6, #23
 80071d4:	e7c8      	b.n	8007168 <__kernel_rem_pio2+0x148>
 80071d6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80071da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80071de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e2:	da31      	bge.n	8007248 <__kernel_rem_pio2+0x228>
 80071e4:	2600      	movs	r6, #0
 80071e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80071ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ee:	f040 809b 	bne.w	8007328 <__kernel_rem_pio2+0x308>
 80071f2:	1e62      	subs	r2, r4, #1
 80071f4:	2000      	movs	r0, #0
 80071f6:	454a      	cmp	r2, r9
 80071f8:	da49      	bge.n	800728e <__kernel_rem_pio2+0x26e>
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d062      	beq.n	80072c4 <__kernel_rem_pio2+0x2a4>
 80071fe:	3c01      	subs	r4, #1
 8007200:	ab06      	add	r3, sp, #24
 8007202:	3d18      	subs	r5, #24
 8007204:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f8      	beq.n	80071fe <__kernel_rem_pio2+0x1de>
 800720c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007210:	4628      	mov	r0, r5
 8007212:	f000 f981 	bl	8007518 <scalbn>
 8007216:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007310 <__kernel_rem_pio2+0x2f0>
 800721a:	1c62      	adds	r2, r4, #1
 800721c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800721e:	00d3      	lsls	r3, r2, #3
 8007220:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007224:	4622      	mov	r2, r4
 8007226:	2a00      	cmp	r2, #0
 8007228:	f280 80a8 	bge.w	800737c <__kernel_rem_pio2+0x35c>
 800722c:	4622      	mov	r2, r4
 800722e:	2a00      	cmp	r2, #0
 8007230:	f2c0 80c6 	blt.w	80073c0 <__kernel_rem_pio2+0x3a0>
 8007234:	a96a      	add	r1, sp, #424	@ 0x1a8
 8007236:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800723a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8007308 <__kernel_rem_pio2+0x2e8>
 800723e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8007324 <__kernel_rem_pio2+0x304>
 8007242:	2000      	movs	r0, #0
 8007244:	1aa1      	subs	r1, r4, r2
 8007246:	e0b0      	b.n	80073aa <__kernel_rem_pio2+0x38a>
 8007248:	2602      	movs	r6, #2
 800724a:	e78f      	b.n	800716c <__kernel_rem_pio2+0x14c>
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	b948      	cbnz	r0, 8007266 <__kernel_rem_pio2+0x246>
 8007252:	b122      	cbz	r2, 800725e <__kernel_rem_pio2+0x23e>
 8007254:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8007258:	f843 2c04 	str.w	r2, [r3, #-4]
 800725c:	2201      	movs	r2, #1
 800725e:	f10c 0c01 	add.w	ip, ip, #1
 8007262:	4610      	mov	r0, r2
 8007264:	e789      	b.n	800717a <__kernel_rem_pio2+0x15a>
 8007266:	ebae 0202 	sub.w	r2, lr, r2
 800726a:	e7f5      	b.n	8007258 <__kernel_rem_pio2+0x238>
 800726c:	1e62      	subs	r2, r4, #1
 800726e:	ab06      	add	r3, sp, #24
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007278:	a906      	add	r1, sp, #24
 800727a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800727e:	e784      	b.n	800718a <__kernel_rem_pio2+0x16a>
 8007280:	1e62      	subs	r2, r4, #1
 8007282:	ab06      	add	r3, sp, #24
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800728c:	e7f4      	b.n	8007278 <__kernel_rem_pio2+0x258>
 800728e:	ab06      	add	r3, sp, #24
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	3a01      	subs	r2, #1
 8007296:	4318      	orrs	r0, r3
 8007298:	e7ad      	b.n	80071f6 <__kernel_rem_pio2+0x1d6>
 800729a:	3301      	adds	r3, #1
 800729c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d0fa      	beq.n	800729a <__kernel_rem_pio2+0x27a>
 80072a4:	9a04      	ldr	r2, [sp, #16]
 80072a6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80072aa:	446a      	add	r2, sp
 80072ac:	eb04 000b 	add.w	r0, r4, fp
 80072b0:	a91a      	add	r1, sp, #104	@ 0x68
 80072b2:	1c66      	adds	r6, r4, #1
 80072b4:	3a98      	subs	r2, #152	@ 0x98
 80072b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80072ba:	4423      	add	r3, r4
 80072bc:	42b3      	cmp	r3, r6
 80072be:	da04      	bge.n	80072ca <__kernel_rem_pio2+0x2aa>
 80072c0:	461c      	mov	r4, r3
 80072c2:	e713      	b.n	80070ec <__kernel_rem_pio2+0xcc>
 80072c4:	9a03      	ldr	r2, [sp, #12]
 80072c6:	2301      	movs	r3, #1
 80072c8:	e7e8      	b.n	800729c <__kernel_rem_pio2+0x27c>
 80072ca:	9902      	ldr	r1, [sp, #8]
 80072cc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80072d0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	ee07 1a90 	vmov	s15, r1
 80072da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072de:	2400      	movs	r4, #0
 80072e0:	eca0 7b02 	vstmia	r0!, {d7}
 80072e4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8007308 <__kernel_rem_pio2+0x2e8>
 80072e8:	4686      	mov	lr, r0
 80072ea:	4554      	cmp	r4, sl
 80072ec:	dd03      	ble.n	80072f6 <__kernel_rem_pio2+0x2d6>
 80072ee:	eca2 7b02 	vstmia	r2!, {d7}
 80072f2:	3601      	adds	r6, #1
 80072f4:	e7e2      	b.n	80072bc <__kernel_rem_pio2+0x29c>
 80072f6:	ecbc 5b02 	vldmia	ip!, {d5}
 80072fa:	ed3e 6b02 	vldmdb	lr!, {d6}
 80072fe:	3401      	adds	r4, #1
 8007300:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007304:	e7f1      	b.n	80072ea <__kernel_rem_pio2+0x2ca>
 8007306:	bf00      	nop
	...
 8007314:	3e700000 	.word	0x3e700000
 8007318:	00000000 	.word	0x00000000
 800731c:	41700000 	.word	0x41700000
 8007320:	08007920 	.word	0x08007920
 8007324:	080078e0 	.word	0x080078e0
 8007328:	4268      	negs	r0, r5
 800732a:	eeb0 0b48 	vmov.f64	d0, d8
 800732e:	f000 f8f3 	bl	8007518 <scalbn>
 8007332:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8007500 <__kernel_rem_pio2+0x4e0>
 8007336:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	db17      	blt.n	8007370 <__kernel_rem_pio2+0x350>
 8007340:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8007508 <__kernel_rem_pio2+0x4e8>
 8007344:	ee20 7b07 	vmul.f64	d7, d0, d7
 8007348:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800734c:	aa06      	add	r2, sp, #24
 800734e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8007352:	eea5 0b46 	vfms.f64	d0, d5, d6
 8007356:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800735a:	3518      	adds	r5, #24
 800735c:	ee10 3a10 	vmov	r3, s0
 8007360:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007364:	ee17 3a10 	vmov	r3, s14
 8007368:	3401      	adds	r4, #1
 800736a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800736e:	e74d      	b.n	800720c <__kernel_rem_pio2+0x1ec>
 8007370:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8007374:	aa06      	add	r2, sp, #24
 8007376:	ee10 3a10 	vmov	r3, s0
 800737a:	e7f6      	b.n	800736a <__kernel_rem_pio2+0x34a>
 800737c:	a806      	add	r0, sp, #24
 800737e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8007382:	9001      	str	r0, [sp, #4]
 8007384:	ee07 0a90 	vmov	s15, r0
 8007388:	3a01      	subs	r2, #1
 800738a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800738e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8007392:	ee20 0b06 	vmul.f64	d0, d0, d6
 8007396:	ed21 7b02 	vstmdb	r1!, {d7}
 800739a:	e744      	b.n	8007226 <__kernel_rem_pio2+0x206>
 800739c:	ecbc 5b02 	vldmia	ip!, {d5}
 80073a0:	ecb5 6b02 	vldmia	r5!, {d6}
 80073a4:	3001      	adds	r0, #1
 80073a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80073aa:	4548      	cmp	r0, r9
 80073ac:	dc01      	bgt.n	80073b2 <__kernel_rem_pio2+0x392>
 80073ae:	4281      	cmp	r1, r0
 80073b0:	daf4      	bge.n	800739c <__kernel_rem_pio2+0x37c>
 80073b2:	a842      	add	r0, sp, #264	@ 0x108
 80073b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80073b8:	ed81 7b00 	vstr	d7, [r1]
 80073bc:	3a01      	subs	r2, #1
 80073be:	e736      	b.n	800722e <__kernel_rem_pio2+0x20e>
 80073c0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80073c2:	2a02      	cmp	r2, #2
 80073c4:	dc0a      	bgt.n	80073dc <__kernel_rem_pio2+0x3bc>
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	dc2d      	bgt.n	8007426 <__kernel_rem_pio2+0x406>
 80073ca:	d046      	beq.n	800745a <__kernel_rem_pio2+0x43a>
 80073cc:	f008 0007 	and.w	r0, r8, #7
 80073d0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80073d4:	ecbd 8b06 	vpop	{d8-d10}
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80073de:	2a03      	cmp	r2, #3
 80073e0:	d1f4      	bne.n	80073cc <__kernel_rem_pio2+0x3ac>
 80073e2:	a942      	add	r1, sp, #264	@ 0x108
 80073e4:	f1a3 0208 	sub.w	r2, r3, #8
 80073e8:	440a      	add	r2, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	4620      	mov	r0, r4
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f1a1 0108 	sub.w	r1, r1, #8
 80073f4:	dc52      	bgt.n	800749c <__kernel_rem_pio2+0x47c>
 80073f6:	4621      	mov	r1, r4
 80073f8:	2901      	cmp	r1, #1
 80073fa:	f1a2 0208 	sub.w	r2, r2, #8
 80073fe:	dc5d      	bgt.n	80074bc <__kernel_rem_pio2+0x49c>
 8007400:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8007510 <__kernel_rem_pio2+0x4f0>
 8007404:	aa42      	add	r2, sp, #264	@ 0x108
 8007406:	4413      	add	r3, r2
 8007408:	2c01      	cmp	r4, #1
 800740a:	dc67      	bgt.n	80074dc <__kernel_rem_pio2+0x4bc>
 800740c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8007410:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8007414:	2e00      	cmp	r6, #0
 8007416:	d167      	bne.n	80074e8 <__kernel_rem_pio2+0x4c8>
 8007418:	ed87 5b00 	vstr	d5, [r7]
 800741c:	ed87 6b02 	vstr	d6, [r7, #8]
 8007420:	ed87 7b04 	vstr	d7, [r7, #16]
 8007424:	e7d2      	b.n	80073cc <__kernel_rem_pio2+0x3ac>
 8007426:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8007510 <__kernel_rem_pio2+0x4f0>
 800742a:	aa42      	add	r2, sp, #264	@ 0x108
 800742c:	4413      	add	r3, r2
 800742e:	4622      	mov	r2, r4
 8007430:	2a00      	cmp	r2, #0
 8007432:	da24      	bge.n	800747e <__kernel_rem_pio2+0x45e>
 8007434:	b34e      	cbz	r6, 800748a <__kernel_rem_pio2+0x46a>
 8007436:	eeb1 7b46 	vneg.f64	d7, d6
 800743a:	ed87 7b00 	vstr	d7, [r7]
 800743e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8007442:	aa44      	add	r2, sp, #272	@ 0x110
 8007444:	2301      	movs	r3, #1
 8007446:	ee37 7b46 	vsub.f64	d7, d7, d6
 800744a:	429c      	cmp	r4, r3
 800744c:	da20      	bge.n	8007490 <__kernel_rem_pio2+0x470>
 800744e:	b10e      	cbz	r6, 8007454 <__kernel_rem_pio2+0x434>
 8007450:	eeb1 7b47 	vneg.f64	d7, d7
 8007454:	ed87 7b02 	vstr	d7, [r7, #8]
 8007458:	e7b8      	b.n	80073cc <__kernel_rem_pio2+0x3ac>
 800745a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8007510 <__kernel_rem_pio2+0x4f0>
 800745e:	aa42      	add	r2, sp, #264	@ 0x108
 8007460:	4413      	add	r3, r2
 8007462:	2c00      	cmp	r4, #0
 8007464:	da05      	bge.n	8007472 <__kernel_rem_pio2+0x452>
 8007466:	b10e      	cbz	r6, 800746c <__kernel_rem_pio2+0x44c>
 8007468:	eeb1 7b47 	vneg.f64	d7, d7
 800746c:	ed87 7b00 	vstr	d7, [r7]
 8007470:	e7ac      	b.n	80073cc <__kernel_rem_pio2+0x3ac>
 8007472:	ed33 6b02 	vldmdb	r3!, {d6}
 8007476:	3c01      	subs	r4, #1
 8007478:	ee37 7b06 	vadd.f64	d7, d7, d6
 800747c:	e7f1      	b.n	8007462 <__kernel_rem_pio2+0x442>
 800747e:	ed33 7b02 	vldmdb	r3!, {d7}
 8007482:	3a01      	subs	r2, #1
 8007484:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007488:	e7d2      	b.n	8007430 <__kernel_rem_pio2+0x410>
 800748a:	eeb0 7b46 	vmov.f64	d7, d6
 800748e:	e7d4      	b.n	800743a <__kernel_rem_pio2+0x41a>
 8007490:	ecb2 6b02 	vldmia	r2!, {d6}
 8007494:	3301      	adds	r3, #1
 8007496:	ee37 7b06 	vadd.f64	d7, d7, d6
 800749a:	e7d6      	b.n	800744a <__kernel_rem_pio2+0x42a>
 800749c:	ed91 7b00 	vldr	d7, [r1]
 80074a0:	ed91 5b02 	vldr	d5, [r1, #8]
 80074a4:	3801      	subs	r0, #1
 80074a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80074aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074ae:	ed81 6b00 	vstr	d6, [r1]
 80074b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80074b6:	ed81 7b02 	vstr	d7, [r1, #8]
 80074ba:	e798      	b.n	80073ee <__kernel_rem_pio2+0x3ce>
 80074bc:	ed92 7b00 	vldr	d7, [r2]
 80074c0:	ed92 5b02 	vldr	d5, [r2, #8]
 80074c4:	3901      	subs	r1, #1
 80074c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80074ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80074ce:	ed82 6b00 	vstr	d6, [r2]
 80074d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80074d6:	ed82 7b02 	vstr	d7, [r2, #8]
 80074da:	e78d      	b.n	80073f8 <__kernel_rem_pio2+0x3d8>
 80074dc:	ed33 6b02 	vldmdb	r3!, {d6}
 80074e0:	3c01      	subs	r4, #1
 80074e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80074e6:	e78f      	b.n	8007408 <__kernel_rem_pio2+0x3e8>
 80074e8:	eeb1 5b45 	vneg.f64	d5, d5
 80074ec:	eeb1 6b46 	vneg.f64	d6, d6
 80074f0:	ed87 5b00 	vstr	d5, [r7]
 80074f4:	eeb1 7b47 	vneg.f64	d7, d7
 80074f8:	ed87 6b02 	vstr	d6, [r7, #8]
 80074fc:	e790      	b.n	8007420 <__kernel_rem_pio2+0x400>
 80074fe:	bf00      	nop
 8007500:	00000000 	.word	0x00000000
 8007504:	41700000 	.word	0x41700000
 8007508:	00000000 	.word	0x00000000
 800750c:	3e700000 	.word	0x3e700000
	...

08007518 <scalbn>:
 8007518:	ee10 1a90 	vmov	r1, s1
 800751c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007520:	b98b      	cbnz	r3, 8007546 <scalbn+0x2e>
 8007522:	ee10 3a10 	vmov	r3, s0
 8007526:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800752a:	4319      	orrs	r1, r3
 800752c:	d00a      	beq.n	8007544 <scalbn+0x2c>
 800752e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80075e0 <scalbn+0xc8>
 8007532:	4b37      	ldr	r3, [pc, #220]	@ (8007610 <scalbn+0xf8>)
 8007534:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007538:	4298      	cmp	r0, r3
 800753a:	da0b      	bge.n	8007554 <scalbn+0x3c>
 800753c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80075e8 <scalbn+0xd0>
 8007540:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007544:	4770      	bx	lr
 8007546:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800754a:	4293      	cmp	r3, r2
 800754c:	d107      	bne.n	800755e <scalbn+0x46>
 800754e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007552:	4770      	bx	lr
 8007554:	ee10 1a90 	vmov	r1, s1
 8007558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800755c:	3b36      	subs	r3, #54	@ 0x36
 800755e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007562:	4290      	cmp	r0, r2
 8007564:	dd0d      	ble.n	8007582 <scalbn+0x6a>
 8007566:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80075f0 <scalbn+0xd8>
 800756a:	ee10 3a90 	vmov	r3, s1
 800756e:	eeb0 6b47 	vmov.f64	d6, d7
 8007572:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80075f8 <scalbn+0xe0>
 8007576:	2b00      	cmp	r3, #0
 8007578:	fe27 7b05 	vselge.f64	d7, d7, d5
 800757c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8007580:	4770      	bx	lr
 8007582:	4418      	add	r0, r3
 8007584:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8007588:	4298      	cmp	r0, r3
 800758a:	dcec      	bgt.n	8007566 <scalbn+0x4e>
 800758c:	2800      	cmp	r0, #0
 800758e:	dd0a      	ble.n	80075a6 <scalbn+0x8e>
 8007590:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8007594:	ec53 2b10 	vmov	r2, r3, d0
 8007598:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800759c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80075a0:	ec43 2b10 	vmov	d0, r2, r3
 80075a4:	4770      	bx	lr
 80075a6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80075aa:	da09      	bge.n	80075c0 <scalbn+0xa8>
 80075ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80075e8 <scalbn+0xd0>
 80075b0:	ee10 3a90 	vmov	r3, s1
 80075b4:	eeb0 6b47 	vmov.f64	d6, d7
 80075b8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8007600 <scalbn+0xe8>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	e7db      	b.n	8007578 <scalbn+0x60>
 80075c0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80075c4:	ec53 2b10 	vmov	r2, r3, d0
 80075c8:	3036      	adds	r0, #54	@ 0x36
 80075ca:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80075ce:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80075d2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8007608 <scalbn+0xf0>
 80075d6:	ec43 2b10 	vmov	d0, r2, r3
 80075da:	e7b1      	b.n	8007540 <scalbn+0x28>
 80075dc:	f3af 8000 	nop.w
 80075e0:	00000000 	.word	0x00000000
 80075e4:	43500000 	.word	0x43500000
 80075e8:	c2f8f359 	.word	0xc2f8f359
 80075ec:	01a56e1f 	.word	0x01a56e1f
 80075f0:	8800759c 	.word	0x8800759c
 80075f4:	7e37e43c 	.word	0x7e37e43c
 80075f8:	8800759c 	.word	0x8800759c
 80075fc:	fe37e43c 	.word	0xfe37e43c
 8007600:	c2f8f359 	.word	0xc2f8f359
 8007604:	81a56e1f 	.word	0x81a56e1f
 8007608:	00000000 	.word	0x00000000
 800760c:	3c900000 	.word	0x3c900000
 8007610:	ffff3cb0 	.word	0xffff3cb0
 8007614:	00000000 	.word	0x00000000

08007618 <floor>:
 8007618:	ee10 3a90 	vmov	r3, s1
 800761c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8007620:	ee10 2a10 	vmov	r2, s0
 8007624:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8007628:	2913      	cmp	r1, #19
 800762a:	b530      	push	{r4, r5, lr}
 800762c:	4615      	mov	r5, r2
 800762e:	dc33      	bgt.n	8007698 <floor+0x80>
 8007630:	2900      	cmp	r1, #0
 8007632:	da18      	bge.n	8007666 <floor+0x4e>
 8007634:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80076f8 <floor+0xe0>
 8007638:	ee30 0b07 	vadd.f64	d0, d0, d7
 800763c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	dd0a      	ble.n	800765c <floor+0x44>
 8007646:	2b00      	cmp	r3, #0
 8007648:	da50      	bge.n	80076ec <floor+0xd4>
 800764a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800764e:	4313      	orrs	r3, r2
 8007650:	2200      	movs	r2, #0
 8007652:	4293      	cmp	r3, r2
 8007654:	4b2a      	ldr	r3, [pc, #168]	@ (8007700 <floor+0xe8>)
 8007656:	bf08      	it	eq
 8007658:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	ec41 0b10 	vmov	d0, r0, r1
 8007664:	e01f      	b.n	80076a6 <floor+0x8e>
 8007666:	4827      	ldr	r0, [pc, #156]	@ (8007704 <floor+0xec>)
 8007668:	4108      	asrs	r0, r1
 800766a:	ea03 0400 	and.w	r4, r3, r0
 800766e:	4314      	orrs	r4, r2
 8007670:	d019      	beq.n	80076a6 <floor+0x8e>
 8007672:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80076f8 <floor+0xe0>
 8007676:	ee30 0b07 	vadd.f64	d0, d0, d7
 800767a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	ddeb      	ble.n	800765c <floor+0x44>
 8007684:	2b00      	cmp	r3, #0
 8007686:	bfbe      	ittt	lt
 8007688:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800768c:	410a      	asrlt	r2, r1
 800768e:	189b      	addlt	r3, r3, r2
 8007690:	ea23 0300 	bic.w	r3, r3, r0
 8007694:	2200      	movs	r2, #0
 8007696:	e7e1      	b.n	800765c <floor+0x44>
 8007698:	2933      	cmp	r1, #51	@ 0x33
 800769a:	dd05      	ble.n	80076a8 <floor+0x90>
 800769c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80076a0:	d101      	bne.n	80076a6 <floor+0x8e>
 80076a2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80076a6:	bd30      	pop	{r4, r5, pc}
 80076a8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80076ac:	f04f 30ff 	mov.w	r0, #4294967295
 80076b0:	40e0      	lsrs	r0, r4
 80076b2:	4210      	tst	r0, r2
 80076b4:	d0f7      	beq.n	80076a6 <floor+0x8e>
 80076b6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80076f8 <floor+0xe0>
 80076ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80076be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80076c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c6:	ddc9      	ble.n	800765c <floor+0x44>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	da02      	bge.n	80076d2 <floor+0xba>
 80076cc:	2914      	cmp	r1, #20
 80076ce:	d103      	bne.n	80076d8 <floor+0xc0>
 80076d0:	3301      	adds	r3, #1
 80076d2:	ea22 0200 	bic.w	r2, r2, r0
 80076d6:	e7c1      	b.n	800765c <floor+0x44>
 80076d8:	2401      	movs	r4, #1
 80076da:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80076de:	fa04 f101 	lsl.w	r1, r4, r1
 80076e2:	440a      	add	r2, r1
 80076e4:	42aa      	cmp	r2, r5
 80076e6:	bf38      	it	cc
 80076e8:	191b      	addcc	r3, r3, r4
 80076ea:	e7f2      	b.n	80076d2 <floor+0xba>
 80076ec:	2200      	movs	r2, #0
 80076ee:	4613      	mov	r3, r2
 80076f0:	e7b4      	b.n	800765c <floor+0x44>
 80076f2:	bf00      	nop
 80076f4:	f3af 8000 	nop.w
 80076f8:	8800759c 	.word	0x8800759c
 80076fc:	7e37e43c 	.word	0x7e37e43c
 8007700:	bff00000 	.word	0xbff00000
 8007704:	000fffff 	.word	0x000fffff

08007708 <_init>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr

08007714 <_fini>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr
